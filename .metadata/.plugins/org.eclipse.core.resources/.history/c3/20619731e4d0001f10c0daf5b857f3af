/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdlib.h"
#include "semphr.h"
#include "printf_uart.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticQueue_t osStaticMessageQDef_t;
/* USER CODE BEGIN PTD */
#define SIZE_OF_BUF 20
#define NUM_OF_BUF 4
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio_rx;
DMA_HandleTypeDef hdma_sdio_tx;

TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart3;

/* Definitions for userTask1 */
osThreadId_t userTask1Handle;
const osThreadAttr_t userTask1_attributes = {
  .name = "userTask1",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for mgmtTaskFATFS */
osThreadId_t mgmtTaskFATFSHandle;
const osThreadAttr_t mgmtTaskFATFS_attributes = {
  .name = "mgmtTaskFATFS",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for inputTaskMgmt */
osThreadId_t inputTaskMgmtHandle;
const osThreadAttr_t inputTaskMgmt_attributes = {
  .name = "inputTaskMgmt",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* Definitions for bufMsgQueue */
osMessageQueueId_t bufMsgQueueHandle;
uint8_t bufMsgQueueBuffer[ 20 * sizeof( uint8_t ) ];
osStaticMessageQDef_t bufMsgQueueControlBlock;
const osMessageQueueAttr_t bufMsgQueue_attributes = {
  .name = "bufMsgQueue",
  .cb_mem = &bufMsgQueueControlBlock,
  .cb_size = sizeof(bufMsgQueueControlBlock),
  .mq_mem = &bufMsgQueueBuffer,
  .mq_size = sizeof(bufMsgQueueBuffer)
};
/* Definitions for uartRXSem */
osSemaphoreId_t uartRXSemHandle;
const osSemaphoreAttr_t uartRXSem_attributes = {
  .name = "uartRXSem"
};
/* Definitions for cmdRXSem */
osSemaphoreId_t cmdRXSemHandle;
const osSemaphoreAttr_t cmdRXSem_attributes = {
  .name = "cmdRXSem"
};
/* Definitions for bufMsgSem */
osSemaphoreId_t bufMsgSemHandle;
const osSemaphoreAttr_t bufMsgSem_attributes = {
  .name = "bufMsgSem"
};
/* USER CODE BEGIN PV */
extern const Diskio_drvTypeDef  SD_Driver;
extern char SDPath[4];
volatile unsigned long totalTickCnt;
extern volatile uint32_t freq;

FATFS fs;
FRESULT res_fs;
uint32_t freqRef;
uint32_t uart_irq = 0;
uint8_t bufRX[1];
uint8_t bufMsg[SIZE_OF_BUF];
uint8_t cmd_fs_ref[NUM_OF_BUF][SIZE_OF_BUF] = {
		" ",
		"mount",
		"unmount",
		"write"

};
uint32_t cmd_cod;
uint32_t cmd_fs = 0;
uint8_t text[2][20];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM5_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SDIO_SD_Init(void);
void StartTask1(void *argument);
void StartMgmtTaskFATFS(void *argument);
void StartInputTaskMgmt(void *argument);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
int extCmdMsg(uint8_t *buf, const uint32_t num);
void extKeyMsg(uint8_t *buf, const uint32_t num, const uint32_t k);
//void Mount_FATFS(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM5_Init();
  MX_USART3_UART_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
  HAL_UART_Receive_IT(&huart3, bufRX, 1);
//  UART_Printf("%c",bufRX);
  bufMsg[0] = bufRX[0];
  freqRef = HAL_RCC_GetSysClockFreq();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartRXSem */
  uartRXSemHandle = osSemaphoreNew(1, 0, &uartRXSem_attributes);

  /* creation of cmdRXSem */
  cmdRXSemHandle = osSemaphoreNew(1, 0, &cmdRXSem_attributes);

  /* creation of bufMsgSem */
  bufMsgSemHandle = osSemaphoreNew(1, 0, &bufMsgSem_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of bufMsgQueue */
  bufMsgQueueHandle = osMessageQueueNew (20, sizeof(uint8_t), &bufMsgQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of userTask1 */
  userTask1Handle = osThreadNew(StartTask1, NULL, &userTask1_attributes);

  /* creation of mgmtTaskFATFS */
  mgmtTaskFATFSHandle = osThreadNew(StartMgmtTaskFATFS, NULL, &mgmtTaskFATFS_attributes);

  /* creation of inputTaskMgmt */
  inputTaskMgmtHandle = osThreadNew(StartInputTaskMgmt, NULL, &inputTaskMgmt_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
}

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{

  /* USER CODE BEGIN SDIO_Init 0 */

  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd.Init.ClockDiv = 0;
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 1679;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 10;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 	HAL_UART_Receive_IT(&huart3, bufRX, 1);
 	BaseType_t xHigherPriorityTaskWokenUART = pdFALSE;
	xSemaphoreGiveFromISR(uartRXSemHandle, &xHigherPriorityTaskWokenUART);
 }


int extCmdMsg(uint8_t *buf, const uint32_t num)
{
	int i = 0;

	  while(i < NUM_OF_BUF)
	  {
		  if (strstr((char *)buf,(char *)&cmd_fs_ref[i]) && num == strlen(cmd_fs_ref[i]))
		  {
			  return i;
		  }
		  else
		  {
			  i++;
		  }
	  }

	  return 0xffff;
}

void extKeyMsg(uint8_t *buf, const uint32_t num, const uint32_t k)
{
int n = sizeof(text)/2;
	  strncpy((char *)text+k*(sizeof(text))/2, (char *)buf, num);

}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartTask1 */
/**
  * @brief  Function implementing the userTask1 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {


    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartMgmtTaskFATFS */
/**
* @brief Function implementing the mgmtTaskFATFS thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMgmtTaskFATFS */
void StartMgmtTaskFATFS(void *argument)
{
  /* USER CODE BEGIN StartMgmtTaskFATFS */
//	int i = 0;
  /* Infinite loop */
  for(;;){

	  if (xSemaphoreTake(cmdRXSemHandle, portMAX_DELAY))
	  {

		  switch (cmd_fs) {
			case 1 ... 2:
				res_fs = mount_fs(&fs, cmd_fs);
				break;
			case 3:
				res_fs = write_fs(&text[0], &text[1]);
				break;
			default:
				break;
		}

		  cmd_fs = 0;

	  }

    osDelay(1);
  }
  /* USER CODE END StartMgmtTaskFATFS */
}

/* USER CODE BEGIN Header_StartInputTaskMgmt */
/**
* @brief Function implementing the inputTaskMgmt thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInputTaskMgmt */
void StartInputTaskMgmt(void *argument)
{
  /* USER CODE BEGIN StartInputTaskMgmt */
	uint8_t msg[20];
//	if (strstr((char *)bufRX,"\n"))
//	{
//		xSemaphoreGive(cmdRXSemHandle);
//		memset((char *)bufRX, (int)'0',SIZE_OF_BUF);
//	}
  /* Infinite loop */
  for(;;)
  {

	  if (xSemaphoreTake(uartRXSemHandle, portMAX_DELAY))
	  {

		uint8_t k = 0;

		HAL_UART_Transmit(&huart3, (uint8_t *)&bufRX[0], 1, HAL_MAX_DELAY);
		if (bufRX[0] == '-')
		{
			if (cmd_fs != 0)
			{
				extKeyMsg(bufMsg, uart_irq, k);
				k++;
			}
			else
			{
				cmd_fs = extCmdMsg(bufMsg, uart_irq);
				k = 0;
			}
			memset((char *)bufMsg, (int)'0',SIZE_OF_BUF);
			uart_irq = 0;


		}
		else if (!(bufRX[0] == '\n' || bufRX[0] == '\r' || bufRX[0] == '\0' || uart_irq == SIZE_OF_BUF-1))
		{
			bufMsg[uart_irq] = bufRX[0];
 			uart_irq++;
		}
		else
		{
			if (cmd_fs != 0)
			{
				extKeyMsg(bufMsg, uart_irq, k);
			}
			else
			{
				cmd_fs = extCmdMsg(bufMsg, uart_irq);
 				xSemaphoreGive(cmdRXSemHandle);
			}
			memset((char *)bufMsg, (int)'0',SIZE_OF_BUF);
			uart_irq = 0;
			k = 0;

		}

	  }

    osDelay(1);
  }
  /* USER CODE END StartInputTaskMgmt */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM5) {
	totalTickCnt++;
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
