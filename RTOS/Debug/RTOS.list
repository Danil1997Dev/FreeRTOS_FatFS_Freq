
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800e10c  0800e10c  0000f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e58c  0800e58c  000100b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e58c  0800e58c  0000f58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e594  0800e594  000100b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e594  0800e594  0000f594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e598  0800e598  0000f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800e59c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100b0  2**0
                  CONTENTS
 10 .bss          00005518  200000b0  200000b0  000100b0  2**2
                  ALLOC
 11 ._user_heap_stack 00001700  200055c8  200055c8  000100b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022cc0  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e48  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  00037be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001611  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e12  00000000  00000000  0003ae89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bd2  00000000  00000000  00061c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd643  00000000  00000000  0008586d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162eb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007de0  00000000  00000000  00162ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  0016acd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0f4 	.word	0x0800e0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800e0f4 	.word	0x0800e0f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <configureTimerForRunTimeStats>:
void vApplicationTickHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	totalTickCnt = 0;
 8000574:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <configureTimerForRunTimeStats+0x14>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]

}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20000730 	.word	0x20000730

08000588 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
return totalTickCnt;
 800058c:	4b03      	ldr	r3, [pc, #12]	@ (800059c <getRunTimeCounterValue+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000730 	.word	0x20000730

080005a0 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
	  char *pStrIdle = NULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]

	vTaskGetRunTimeStats(bfrInfo);
 80005aa:	484e      	ldr	r0, [pc, #312]	@ (80006e4 <vApplicationIdleHook+0x144>)
 80005ac:	f00b ff28 	bl	800c400 <vTaskGetRunTimeStats>
	pStrIdle = strstr(bfrInfo,"IDLE");
 80005b0:	494d      	ldr	r1, [pc, #308]	@ (80006e8 <vApplicationIdleHook+0x148>)
 80005b2:	484c      	ldr	r0, [pc, #304]	@ (80006e4 <vApplicationIdleHook+0x144>)
 80005b4:	f00d f8b2 	bl	800d71c <strstr>
 80005b8:	60f8      	str	r0, [r7, #12]
	if (pStrIdle)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	f000 808d 	beq.w	80006dc <vApplicationIdleHook+0x13c>
	{
		freq = HAL_RCC_GetSysClockFreq();
 80005c2:	f002 fc47 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <vApplicationIdleHook+0x14c>)
 80005ca:	6013      	str	r3, [r2, #0]
		pStrIdle = strstr(pStrIdle,"%");
 80005cc:	2125      	movs	r1, #37	@ 0x25
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f00d f884 	bl	800d6dc <strchr>
 80005d4:	60f8      	str	r0, [r7, #12]
		const char *pStrIdelStart = pStrIdle;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
		while (*(pStrIdle) != '\t')
 80005da:	e002      	b.n	80005e2 <vApplicationIdleHook+0x42>
		{
			pStrIdle--;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3b01      	subs	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
		while (*(pStrIdle) != '\t')
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d1f8      	bne.n	80005dc <vApplicationIdleHook+0x3c>
		}

		if ((pStrIdelStart-(pStrIdle+1)) == 1)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d106      	bne.n	8000604 <vApplicationIdleHook+0x64>
		{
			precIdelChar = *(pStrIdle+1);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b3c      	ldr	r3, [pc, #240]	@ (80006f0 <vApplicationIdleHook+0x150>)
 8000600:	801a      	strh	r2, [r3, #0]
 8000602:	e028      	b.n	8000656 <vApplicationIdleHook+0xb6>
		}
		else if ((pStrIdelStart-(pStrIdle+1)) == 2)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	2b02      	cmp	r3, #2
 800060e:	d10e      	bne.n	800062e <vApplicationIdleHook+0x8e>
		{
			precIdelChar = (*(pStrIdle+2) << 8) | (*(pStrIdle+1) << 0);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3302      	adds	r3, #2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <vApplicationIdleHook+0x150>)
 800062a:	801a      	strh	r2, [r3, #0]
 800062c:	e013      	b.n	8000656 <vApplicationIdleHook+0xb6>
		}
		else if ((pStrIdelStart-(pStrIdle+1)) > 3)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2b03      	cmp	r3, #3
 8000638:	dd0d      	ble.n	8000656 <vApplicationIdleHook+0xb6>
		{
			precIdelChar = (*(pStrIdle+2) << 8) | (*(pStrIdle+1) << 0);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3302      	adds	r3, #2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	b21a      	sxth	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <vApplicationIdleHook+0x150>)
 8000654:	801a      	strh	r2, [r3, #0]
		}
		precIdelInt = atoi((char *)&precIdelChar);
 8000656:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <vApplicationIdleHook+0x150>)
 8000658:	f00c ff56 	bl	800d508 <atoi>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <vApplicationIdleHook+0x154>)
 8000662:	601a      	str	r2, [r3, #0]

		if (precIdelInt > 50)
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <vApplicationIdleHook+0x154>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b32      	cmp	r3, #50	@ 0x32
 800066a:	d91c      	bls.n	80006a6 <vApplicationIdleHook+0x106>
		{
			if (freq == freqRef)
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <vApplicationIdleHook+0x14c>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <vApplicationIdleHook+0x158>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	429a      	cmp	r2, r3
 8000676:	d12c      	bne.n	80006d2 <vApplicationIdleHook+0x132>
			{
//				statusClk = SysClockPLLConfig();
				statusClk = SysClockHSEConfig();
 8000678:	4c20      	ldr	r4, [pc, #128]	@ (80006fc <vApplicationIdleHook+0x15c>)
 800067a:	463b      	mov	r3, r7
 800067c:	4618      	mov	r0, r3
 800067e:	f000 ff71 	bl	8001564 <SysClockHSEConfig>
 8000682:	4622      	mov	r2, r4
 8000684:	463b      	mov	r3, r7
 8000686:	e893 0003 	ldmia.w	r3, {r0, r1}
 800068a:	e882 0003 	stmia.w	r2, {r0, r1}
				HAL_UART_DeInit(&huart3);
 800068e:	481c      	ldr	r0, [pc, #112]	@ (8000700 <vApplicationIdleHook+0x160>)
 8000690:	f004 fbb2 	bl	8004df8 <HAL_UART_DeInit>
				HAL_UART_Init(&huart3);
 8000694:	481a      	ldr	r0, [pc, #104]	@ (8000700 <vApplicationIdleHook+0x160>)
 8000696:	f004 fb5f 	bl	8004d58 <HAL_UART_Init>
				HAL_UART_Receive_IT(&huart3, bufRX, sizeof(bufRX));
 800069a:	2201      	movs	r2, #1
 800069c:	4919      	ldr	r1, [pc, #100]	@ (8000704 <vApplicationIdleHook+0x164>)
 800069e:	4818      	ldr	r0, [pc, #96]	@ (8000700 <vApplicationIdleHook+0x160>)
 80006a0:	f004 fc67 	bl	8004f72 <HAL_UART_Receive_IT>
 80006a4:	e015      	b.n	80006d2 <vApplicationIdleHook+0x132>
			}
		}
		else
		{
			statusClk = SysClockPLLConfig();
 80006a6:	4c15      	ldr	r4, [pc, #84]	@ (80006fc <vApplicationIdleHook+0x15c>)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fece 	bl	800144c <SysClockPLLConfig>
 80006b0:	4622      	mov	r2, r4
 80006b2:	463b      	mov	r3, r7
 80006b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b8:	e882 0003 	stmia.w	r2, {r0, r1}
//			HAL_SD_DeInit(&hsd);
//			HAL_SD_Init(&hsd);
			HAL_UART_DeInit(&huart3);
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <vApplicationIdleHook+0x160>)
 80006be:	f004 fb9b 	bl	8004df8 <HAL_UART_DeInit>
			HAL_UART_Init(&huart3);
 80006c2:	480f      	ldr	r0, [pc, #60]	@ (8000700 <vApplicationIdleHook+0x160>)
 80006c4:	f004 fb48 	bl	8004d58 <HAL_UART_Init>
			HAL_UART_Receive_IT(&huart3, bufRX, sizeof(bufRX));
 80006c8:	2201      	movs	r2, #1
 80006ca:	490e      	ldr	r1, [pc, #56]	@ (8000704 <vApplicationIdleHook+0x164>)
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <vApplicationIdleHook+0x160>)
 80006ce:	f004 fc50 	bl	8004f72 <HAL_UART_Receive_IT>
		}
		freq = HAL_RCC_GetSysClockFreq();
 80006d2:	f002 fbbf 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <vApplicationIdleHook+0x14c>)
 80006da:	6013      	str	r3, [r2, #0]
	}
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	200000cc 	.word	0x200000cc
 80006e8:	0800e10c 	.word	0x0800e10c
 80006ec:	20000a3c 	.word	0x20000a3c
 80006f0:	200004d0 	.word	0x200004d0
 80006f4:	200004cc 	.word	0x200004cc
 80006f8:	2000096c 	.word	0x2000096c
 80006fc:	200004d4 	.word	0x200004d4
 8000700:	20000668 	.word	0x20000668
 8000704:	20000974 	.word	0x20000974

08000708 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 f810 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f888 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f9b2 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000728:	f000 f988 	bl	8000a3c <MX_DMA_Init>
  MX_TIM5_Init();
 800072c:	f000 f90e 	bl	800094c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000730:	f000 f95a 	bl	80009e8 <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 8000734:	f000 f8ea 	bl	800090c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000738:	f006 f8c8 	bl	80068cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800073c:	4827      	ldr	r0, [pc, #156]	@ (80007dc <main+0xc4>)
 800073e:	f003 fee5 	bl	800450c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, bufRX, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	4926      	ldr	r1, [pc, #152]	@ (80007e0 <main+0xc8>)
 8000746:	4827      	ldr	r0, [pc, #156]	@ (80007e4 <main+0xcc>)
 8000748:	f004 fc13 	bl	8004f72 <HAL_UART_Receive_IT>
//  UART_Printf("%c",bufRX);
  bufMsg[0] = bufRX[0];
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <main+0xc8>)
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <main+0xd0>)
 8000752:	701a      	strb	r2, [r3, #0]
  freqRef = HAL_RCC_GetSysClockFreq();
 8000754:	f002 fb7e 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8000758:	4603      	mov	r3, r0
 800075a:	4a24      	ldr	r2, [pc, #144]	@ (80007ec <main+0xd4>)
 800075c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800075e:	f008 ff99 	bl	8009694 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartRXSem */
  uartRXSemHandle = osSemaphoreNew(1, 0, &uartRXSem_attributes);
 8000762:	4a23      	ldr	r2, [pc, #140]	@ (80007f0 <main+0xd8>)
 8000764:	2100      	movs	r1, #0
 8000766:	2001      	movs	r0, #1
 8000768:	f009 f8c2 	bl	80098f0 <osSemaphoreNew>
 800076c:	4603      	mov	r3, r0
 800076e:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <main+0xdc>)
 8000770:	6013      	str	r3, [r2, #0]

  /* creation of cmdRXSem */
  cmdRXSemHandle = osSemaphoreNew(1, 0, &cmdRXSem_attributes);
 8000772:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <main+0xe0>)
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
 8000778:	f009 f8ba 	bl	80098f0 <osSemaphoreNew>
 800077c:	4603      	mov	r3, r0
 800077e:	4a1f      	ldr	r2, [pc, #124]	@ (80007fc <main+0xe4>)
 8000780:	6013      	str	r3, [r2, #0]

  /* creation of bufMsgSem */
  bufMsgSemHandle = osSemaphoreNew(1, 0, &bufMsgSem_attributes);
 8000782:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <main+0xe8>)
 8000784:	2100      	movs	r1, #0
 8000786:	2001      	movs	r0, #1
 8000788:	f009 f8b2 	bl	80098f0 <osSemaphoreNew>
 800078c:	4603      	mov	r3, r0
 800078e:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <main+0xec>)
 8000790:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of bufMsgQueue */
  bufMsgQueueHandle = osMessageQueueNew (20, sizeof(uint8_t), &bufMsgQueue_attributes);
 8000792:	4a1d      	ldr	r2, [pc, #116]	@ (8000808 <main+0xf0>)
 8000794:	2101      	movs	r1, #1
 8000796:	2014      	movs	r0, #20
 8000798:	f009 f9ee 	bl	8009b78 <osMessageQueueNew>
 800079c:	4603      	mov	r3, r0
 800079e:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <main+0xf4>)
 80007a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of userTask1 */
  userTask1Handle = osThreadNew(StartTask1, NULL, &userTask1_attributes);
 80007a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <main+0xf8>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	481b      	ldr	r0, [pc, #108]	@ (8000814 <main+0xfc>)
 80007a8:	f008 fff5 	bl	8009796 <osThreadNew>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <main+0x100>)
 80007b0:	6013      	str	r3, [r2, #0]

  /* creation of mgmtTaskFATFS */
  mgmtTaskFATFSHandle = osThreadNew(StartMgmtTaskFATFS, NULL, &mgmtTaskFATFS_attributes);
 80007b2:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <main+0x104>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	481a      	ldr	r0, [pc, #104]	@ (8000820 <main+0x108>)
 80007b8:	f008 ffed 	bl	8009796 <osThreadNew>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <main+0x10c>)
 80007c0:	6013      	str	r3, [r2, #0]

  /* creation of inputTaskMgmt */
  inputTaskMgmtHandle = osThreadNew(StartInputTaskMgmt, NULL, &inputTaskMgmt_attributes);
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <main+0x110>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <main+0x114>)
 80007c8:	f008 ffe5 	bl	8009796 <osThreadNew>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a18      	ldr	r2, [pc, #96]	@ (8000830 <main+0x118>)
 80007d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007d2:	f008 ffa5 	bl	8009720 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <main+0xbe>
 80007da:	bf00      	nop
 80007dc:	20000620 	.word	0x20000620
 80007e0:	20000974 	.word	0x20000974
 80007e4:	20000668 	.word	0x20000668
 80007e8:	20000978 	.word	0x20000978
 80007ec:	2000096c 	.word	0x2000096c
 80007f0:	0800e374 	.word	0x0800e374
 80007f4:	20000724 	.word	0x20000724
 80007f8:	0800e384 	.word	0x0800e384
 80007fc:	20000728 	.word	0x20000728
 8000800:	0800e394 	.word	0x0800e394
 8000804:	2000072c 	.word	0x2000072c
 8000808:	0800e35c 	.word	0x0800e35c
 800080c:	200006bc 	.word	0x200006bc
 8000810:	0800e2f0 	.word	0x0800e2f0
 8000814:	08000bf1 	.word	0x08000bf1
 8000818:	200006b0 	.word	0x200006b0
 800081c:	0800e314 	.word	0x0800e314
 8000820:	08000c01 	.word	0x08000c01
 8000824:	200006b4 	.word	0x200006b4
 8000828:	0800e338 	.word	0x0800e338
 800082c:	08000cb1 	.word	0x08000cb1
 8000830:	200006b8 	.word	0x200006b8

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	@ 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00c ff42 	bl	800d6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <SystemClock_Config+0xd0>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	4a28      	ldr	r2, [pc, #160]	@ (8000904 <SystemClock_Config+0xd0>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	@ 0x40
 8000868:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <SystemClock_Config+0xd0>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <SystemClock_Config+0xd4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a22      	ldr	r2, [pc, #136]	@ (8000908 <SystemClock_Config+0xd4>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <SystemClock_Config+0xd4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008a4:	2319      	movs	r3, #25
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ff60 	bl	8002780 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008c6:	f000 faf9 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f9c1 	bl	8002c70 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f4:	f000 fae2 	bl	8000ebc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008f8:	f002 faa0 	bl	8002e3c <HAL_RCC_EnableCSS>
}
 80008fc:	bf00      	nop
 80008fe:	3750      	adds	r7, #80	@ 0x50
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 8000912:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <MX_SDIO_SD_Init+0x3c>)
 8000914:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <MX_SDIO_SD_Init+0x38>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	200004dc 	.word	0x200004dc
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM5_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_TIM5_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1679;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM5_Init+0x94>)
 8000970:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000974:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM5_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM5_Init+0x94>)
 800097e:	220a      	movs	r2, #10
 8000980:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_TIM5_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM5_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_TIM5_Init+0x94>)
 8000990:	f003 fd6c 	bl	800446c <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 fa8f 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_TIM5_Init+0x94>)
 80009ac:	f003 ff0e 	bl	80047cc <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fa81 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_TIM5_Init+0x94>)
 80009c8:	f004 f936 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80009d2:	f000 fa73 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000620 	.word	0x20000620
 80009e4:	40000c00 	.word	0x40000c00

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART3_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a20:	f004 f99a 	bl	8004d58 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 fa47 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000668 	.word	0x20000668
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2105      	movs	r1, #5
 8000a62:	203b      	movs	r0, #59	@ 0x3b
 8000a64:	f000 ffae 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a68:	203b      	movs	r0, #59	@ 0x3b
 8000a6a:	f000 ffc7 	bl	80019fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	2045      	movs	r0, #69	@ 0x45
 8000a74:	f000 ffa6 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a78:	2045      	movs	r0, #69	@ 0x45
 8000a7a:	f000 ffbf 	bl	80019fc <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a16      	ldr	r2, [pc, #88]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_GPIO_Init+0x84>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 	HAL_UART_Receive_IT(&huart3, bufRX, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4909      	ldr	r1, [pc, #36]	@ (8000b44 <HAL_UART_RxCpltCallback+0x30>)
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <HAL_UART_RxCpltCallback+0x34>)
 8000b22:	f004 fa26 	bl	8004f72 <HAL_UART_Receive_IT>
 	BaseType_t xHigherPriorityTaskWokenUART = pdFALSE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(uartRXSemHandle, &xHigherPriorityTaskWokenUART);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_UART_RxCpltCallback+0x38>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f107 020c 	add.w	r2, r7, #12
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f009 fd8d 	bl	800a654 <xQueueGiveFromISR>
 }
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000974 	.word	0x20000974
 8000b48:	20000668 	.word	0x20000668
 8000b4c:	20000724 	.word	0x20000724

08000b50 <extCmdMsg>:


int extCmdMsg(uint8_t *buf, const uint32_t num)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]

	  while(i < NUM_OF_BUF)
 8000b5e:	e020      	b.n	8000ba2 <extCmdMsg+0x52>
	  {
		  if (strstr((char *)buf,(char *)&cmd_fs_ref[i]) && num == strlen(cmd_fs_ref[i]))
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <extCmdMsg+0x64>)
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f00c fdd3 	bl	800d71c <strstr>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00f      	beq.n	8000b9c <extCmdMsg+0x4c>
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <extCmdMsg+0x64>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fb20 	bl	80001d0 <strlen>
 8000b90:	4602      	mov	r2, r0
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <extCmdMsg+0x4c>
		  {
			  return i;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	e007      	b.n	8000bac <extCmdMsg+0x5c>
		  }
		  else
		  {
			  i++;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
	  while(i < NUM_OF_BUF)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	dddb      	ble.n	8000b60 <extCmdMsg+0x10>
		  }
	  }

	  return 0xffff;
 8000ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <extKeyMsg>:

void extKeyMsg(uint8_t *buf, const uint32_t num, const uint32_t k)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
int n = sizeof(text[0]);
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	617b      	str	r3, [r7, #20]
	  strncpy((char *)text+k*(sizeof(text[0])), (char *)buf, num);
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <extKeyMsg+0x34>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	68f9      	ldr	r1, [r7, #12]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00c fd8a 	bl	800d6f6 <strncpy>

}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000990 	.word	0x20000990

08000bf0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f008 fe5e 	bl	80098ba <osDelay>
 8000bfe:	e7fb      	b.n	8000bf8 <StartTask1+0x8>

08000c00 <StartMgmtTaskFATFS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMgmtTaskFATFS */
void StartMgmtTaskFATFS(void *argument)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartMgmtTaskFATFS */
//	int i = 0;
  /* Infinite loop */
  for(;;){

	  if (xSemaphoreTake(cmdRXSemHandle, portMAX_DELAY))
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <StartMgmtTaskFATFS+0x8c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 fe91 	bl	800a938 <xQueueSemaphoreTake>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d032      	beq.n	8000c82 <StartMgmtTaskFATFS+0x82>
	  {

		  switch (cmd_fs) {
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <StartMgmtTaskFATFS+0x90>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d802      	bhi.n	8000c2a <StartMgmtTaskFATFS+0x2a>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <StartMgmtTaskFATFS+0x30>
					statusClk = SysClockPLLConfig();
				}
				res_fs = write_fs(&text[0], &text[1]);
				break;
			default:
				break;
 8000c28:	e028      	b.n	8000c7c <StartMgmtTaskFATFS+0x7c>
		  switch (cmd_fs) {
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d00c      	beq.n	8000c48 <StartMgmtTaskFATFS+0x48>
				break;
 8000c2e:	e025      	b.n	8000c7c <StartMgmtTaskFATFS+0x7c>
				res_fs = mount_fs(&fs, cmd_fs);
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <StartMgmtTaskFATFS+0x90>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	4816      	ldr	r0, [pc, #88]	@ (8000c94 <StartMgmtTaskFATFS+0x94>)
 8000c3a:	f005 fe71 	bl	8006920 <mount_fs>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <StartMgmtTaskFATFS+0x98>)
 8000c44:	701a      	strb	r2, [r3, #0]
				break;
 8000c46:	e019      	b.n	8000c7c <StartMgmtTaskFATFS+0x7c>
				if (freq != freqRef)
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <StartMgmtTaskFATFS+0x9c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <StartMgmtTaskFATFS+0xa0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d00a      	beq.n	8000c6a <StartMgmtTaskFATFS+0x6a>
					statusClk = SysClockPLLConfig();
 8000c54:	4c13      	ldr	r4, [pc, #76]	@ (8000ca4 <StartMgmtTaskFATFS+0xa4>)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fbf7 	bl	800144c <SysClockPLLConfig>
 8000c5e:	4622      	mov	r2, r4
 8000c60:	463b      	mov	r3, r7
 8000c62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c66:	e882 0003 	stmia.w	r2, {r0, r1}
				res_fs = write_fs(&text[0], &text[1]);
 8000c6a:	490f      	ldr	r1, [pc, #60]	@ (8000ca8 <StartMgmtTaskFATFS+0xa8>)
 8000c6c:	480f      	ldr	r0, [pc, #60]	@ (8000cac <StartMgmtTaskFATFS+0xac>)
 8000c6e:	f005 feaf 	bl	80069d0 <write_fs>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <StartMgmtTaskFATFS+0x98>)
 8000c78:	701a      	strb	r2, [r3, #0]
				break;
 8000c7a:	bf00      	nop
		}

		  cmd_fs = 0;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <StartMgmtTaskFATFS+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]

	  }

    osDelay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f008 fe19 	bl	80098ba <osDelay>
	  if (xSemaphoreTake(cmdRXSemHandle, portMAX_DELAY))
 8000c88:	e7be      	b.n	8000c08 <StartMgmtTaskFATFS+0x8>
 8000c8a:	bf00      	nop
 8000c8c:	20000728 	.word	0x20000728
 8000c90:	2000098c 	.word	0x2000098c
 8000c94:	20000734 	.word	0x20000734
 8000c98:	20000968 	.word	0x20000968
 8000c9c:	20000a3c 	.word	0x20000a3c
 8000ca0:	2000096c 	.word	0x2000096c
 8000ca4:	200004d4 	.word	0x200004d4
 8000ca8:	200009a4 	.word	0x200009a4
 8000cac:	20000990 	.word	0x20000990

08000cb0 <StartInputTaskMgmt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInputTaskMgmt */
void StartInputTaskMgmt(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInputTaskMgmt */
	uint8_t k = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73bb      	strb	r3, [r7, #14]
//	}
  /* Infinite loop */
  for(;;)
  {

	  if (xSemaphoreTake(uartRXSemHandle, portMAX_DELAY))
 8000cc0:	4b65      	ldr	r3, [pc, #404]	@ (8000e58 <StartInputTaskMgmt+0x1a8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f009 fe35 	bl	800a938 <xQueueSemaphoreTake>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80bd 	beq.w	8000e50 <StartInputTaskMgmt+0x1a0>
	  {
		HAL_UART_Transmit(&huart3, (uint8_t *)"\r", 1, HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	2201      	movs	r2, #1
 8000cdc:	495f      	ldr	r1, [pc, #380]	@ (8000e5c <StartInputTaskMgmt+0x1ac>)
 8000cde:	4860      	ldr	r0, [pc, #384]	@ (8000e60 <StartInputTaskMgmt+0x1b0>)
 8000ce0:	f004 f8bc 	bl	8004e5c <HAL_UART_Transmit>

		if (bufRX[0] == '-')
 8000ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b2d      	cmp	r3, #45	@ 0x2d
 8000cea:	d135      	bne.n	8000d58 <StartInputTaskMgmt+0xa8>
		{
			printBuf[n] = bufRX[0];
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	4a5d      	ldr	r2, [pc, #372]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000cf0:	7811      	ldrb	r1, [r2, #0]
 8000cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000cf4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart3, (uint8_t *)printBuf, n+1, HAL_MAX_DELAY);
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	4959      	ldr	r1, [pc, #356]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000d04:	4856      	ldr	r0, [pc, #344]	@ (8000e60 <StartInputTaskMgmt+0x1b0>)
 8000d06:	f004 f8a9 	bl	8004e5c <HAL_UART_Transmit>
			if (cmd_fs != 0)
 8000d0a:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <StartInputTaskMgmt+0x1bc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <StartInputTaskMgmt+0x78>
			{
				extKeyMsg(bufMsg, uart_irq, k);
 8000d12:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4856      	ldr	r0, [pc, #344]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000d1c:	f7ff ff4c 	bl	8000bb8 <extKeyMsg>
				k++;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e00b      	b.n	8000d40 <StartInputTaskMgmt+0x90>
			}
			else
			{
				cmd_fs = extCmdMsg(bufMsg, uart_irq);
 8000d28:	4b51      	ldr	r3, [pc, #324]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4851      	ldr	r0, [pc, #324]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000d30:	f7ff ff0e 	bl	8000b50 <extCmdMsg>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b4c      	ldr	r3, [pc, #304]	@ (8000e6c <StartInputTaskMgmt+0x1bc>)
 8000d3a:	601a      	str	r2, [r3, #0]
				k = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
			}
			memset((char *)bufMsg, (int)'0',SIZE_OF_BUF);
 8000d40:	2214      	movs	r2, #20
 8000d42:	2130      	movs	r1, #48	@ 0x30
 8000d44:	484b      	ldr	r0, [pc, #300]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000d46:	f00c fcc1 	bl	800d6cc <memset>
			uart_irq = 0;
 8000d4a:	4b49      	ldr	r3, [pc, #292]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
			n++;
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73bb      	strb	r3, [r7, #14]
 8000d56:	e07b      	b.n	8000e50 <StartInputTaskMgmt+0x1a0>


		}
		else if (bufRX[0] == '\177')
 8000d58:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d5e:	d11b      	bne.n	8000d98 <StartInputTaskMgmt+0xe8>
		{
			uart_irq--;
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a42      	ldr	r2, [pc, #264]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d68:	6013      	str	r3, [r2, #0]
			n--;
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	73bb      	strb	r3, [r7, #14]
			bufMsg[uart_irq] = '\177';
 8000d70:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a3f      	ldr	r2, [pc, #252]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000d76:	217f      	movs	r1, #127	@ 0x7f
 8000d78:	54d1      	strb	r1, [r2, r3]
			printBuf[n] = '\177';
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000d7e:	217f      	movs	r1, #127	@ 0x7f
 8000d80:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart3, (uint8_t *)printBuf, n+1, HAL_MAX_DELAY);
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	4936      	ldr	r1, [pc, #216]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000d90:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <StartInputTaskMgmt+0x1b0>)
 8000d92:	f004 f863 	bl	8004e5c <HAL_UART_Transmit>
 8000d96:	e05b      	b.n	8000e50 <StartInputTaskMgmt+0x1a0>
			//uart_irq++;
			//n++;
		}
		else if (!(bufRX[0] == '\n' || bufRX[0] == '\r' || bufRX[0] == '\0' || uart_irq == SIZE_OF_BUF-1))
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	d029      	beq.n	8000df4 <StartInputTaskMgmt+0x144>
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b0d      	cmp	r3, #13
 8000da6:	d025      	beq.n	8000df4 <StartInputTaskMgmt+0x144>
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d021      	beq.n	8000df4 <StartInputTaskMgmt+0x144>
 8000db0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b13      	cmp	r3, #19
 8000db6:	d01d      	beq.n	8000df4 <StartInputTaskMgmt+0x144>
		{
			printBuf[n] = bufRX[0];
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	4a2a      	ldr	r2, [pc, #168]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000dbc:	7811      	ldrb	r1, [r2, #0]
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000dc0:	54d1      	strb	r1, [r2, r3]
			bufMsg[uart_irq] = bufRX[0];
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <StartInputTaskMgmt+0x1b4>)
 8000dc8:	7811      	ldrb	r1, [r2, #0]
 8000dca:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000dcc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart3, (uint8_t *)printBuf, n+1, HAL_MAX_DELAY);
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	4923      	ldr	r1, [pc, #140]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000ddc:	4820      	ldr	r0, [pc, #128]	@ (8000e60 <StartInputTaskMgmt+0x1b0>)
 8000dde:	f004 f83d 	bl	8004e5c <HAL_UART_Transmit>
 			uart_irq++;
 8000de2:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a21      	ldr	r2, [pc, #132]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000dea:	6013      	str	r3, [r2, #0]
 			n++;
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	e02d      	b.n	8000e50 <StartInputTaskMgmt+0x1a0>
		}
		else
		{
			if (cmd_fs != 0)
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <StartInputTaskMgmt+0x1bc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <StartInputTaskMgmt+0x15c>
			{
				extKeyMsg(bufMsg, uart_irq, k);
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	4619      	mov	r1, r3
 8000e04:	481b      	ldr	r0, [pc, #108]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000e06:	f7ff fed7 	bl	8000bb8 <extKeyMsg>
 8000e0a:	e009      	b.n	8000e20 <StartInputTaskMgmt+0x170>
			}
			else
			{
				cmd_fs = extCmdMsg(bufMsg, uart_irq);
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000e14:	f7ff fe9c 	bl	8000b50 <extCmdMsg>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <StartInputTaskMgmt+0x1bc>)
 8000e1e:	601a      	str	r2, [r3, #0]
			}
			memset((char *)bufMsg, (int)'0',SIZE_OF_BUF);
 8000e20:	2214      	movs	r2, #20
 8000e22:	2130      	movs	r1, #48	@ 0x30
 8000e24:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <StartInputTaskMgmt+0x1c4>)
 8000e26:	f00c fc51 	bl	800d6cc <memset>
			memset((char *)printBuf, (int)'0',SIZE_OF_BUF);
 8000e2a:	2214      	movs	r2, #20
 8000e2c:	2130      	movs	r1, #48	@ 0x30
 8000e2e:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <StartInputTaskMgmt+0x1b8>)
 8000e30:	f00c fc4c 	bl	800d6cc <memset>
			uart_irq = 0;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <StartInputTaskMgmt+0x1c0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
			k = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
			n = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73bb      	strb	r3, [r7, #14]
			xSemaphoreGive(cmdRXSemHandle);
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <StartInputTaskMgmt+0x1c8>)
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f009 fa62 	bl	800a314 <xQueueGenericSend>

		}

	  }

    osDelay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f008 fd32 	bl	80098ba <osDelay>
	  if (xSemaphoreTake(uartRXSemHandle, portMAX_DELAY))
 8000e56:	e733      	b.n	8000cc0 <StartInputTaskMgmt+0x10>
 8000e58:	20000724 	.word	0x20000724
 8000e5c:	0800e170 	.word	0x0800e170
 8000e60:	20000668 	.word	0x20000668
 8000e64:	20000974 	.word	0x20000974
 8000e68:	200009b8 	.word	0x200009b8
 8000e6c:	2000098c 	.word	0x2000098c
 8000e70:	20000970 	.word	0x20000970
 8000e74:	20000978 	.word	0x20000978
 8000e78:	20000728 	.word	0x20000728

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM5) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d104      	bne.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x1c>
	totalTickCnt++;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e96:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8000ea2:	f000 fc6f 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40000c00 	.word	0x40000c00
 8000eb4:	20000730 	.word	0x20000730
 8000eb8:	40010000 	.word	0x40010000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <UART_Printf>:

extern UART_HandleTypeDef H_UART;

#endif

void UART_Printf(const char* fmt, ...) {
 8000ec8:	b40f      	push	{r0, r1, r2, r3}
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b0c2      	sub	sp, #264	@ 0x108
 8000ece:	af00      	add	r7, sp, #0
    char buff[256];
    __builtin_va_list args;
    __builtin_va_start(args, fmt);
 8000ed0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000edc:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8000ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ee6:	f107 0008 	add.w	r0, r7, #8
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef4:	f00c fbdc 	bl	800d6b0 <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f967 	bl	80001d0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 0108 	add.w	r1, r7, #8
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <UART_Printf+0x5c>)
 8000f10:	f003 ffa4 	bl	8004e5c <HAL_UART_Transmit>
    __builtin_va_end(args);
}
 8000f14:	bf00      	nop
 8000f16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr
 8000f24:	20000668 	.word	0x20000668

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x64>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	210f      	movs	r1, #15
 8000f6a:	f06f 0001 	mvn.w	r0, #1
 8000f6e:	f000 fd29 	bl	80019c4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2005      	movs	r0, #5
 8000f78:	f000 fd24 	bl	80019c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f7c:	2005      	movs	r0, #5
 8000f7e:	f000 fd3d 	bl	80019fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a68      	ldr	r2, [pc, #416]	@ (8001150 <HAL_SD_MspInit+0x1c0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	f040 80c9 	bne.w	8001146 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	4b66      	ldr	r3, [pc, #408]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbc:	4a65      	ldr	r2, [pc, #404]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc4:	4b63      	ldr	r3, [pc, #396]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe0:	4b5c      	ldr	r3, [pc, #368]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b58      	ldr	r3, [pc, #352]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	4a57      	ldr	r2, [pc, #348]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffc:	4b55      	ldr	r3, [pc, #340]	@ (8001154 <HAL_SD_MspInit+0x1c4>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001008:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800101a:	230c      	movs	r3, #12
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	484c      	ldr	r0, [pc, #304]	@ (8001158 <HAL_SD_MspInit+0x1c8>)
 8001026:	f001 f913 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800102a:	2304      	movs	r3, #4
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800103a:	230c      	movs	r3, #12
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4845      	ldr	r0, [pc, #276]	@ (800115c <HAL_SD_MspInit+0x1cc>)
 8001046:	f001 f903 	bl	8002250 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800104c:	4a45      	ldr	r2, [pc, #276]	@ (8001164 <HAL_SD_MspInit+0x1d4>)
 800104e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001050:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001056:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001058:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b3e      	ldr	r3, [pc, #248]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800106c:	4b3c      	ldr	r3, [pc, #240]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800106e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001072:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001074:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800107e:	2220      	movs	r2, #32
 8001080:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b37      	ldr	r3, [pc, #220]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001088:	4b35      	ldr	r3, [pc, #212]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800108a:	2204      	movs	r2, #4
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800108e:	4b34      	ldr	r3, [pc, #208]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001090:	2203      	movs	r2, #3
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001094:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 8001096:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800109c:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 800109e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80010a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80010a4:	482e      	ldr	r0, [pc, #184]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 80010a6:	f000 fcc5 	bl	8001a34 <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80010b0:	f7ff ff04 	bl	8000ebc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ba:	4a29      	ldr	r2, [pc, #164]	@ (8001160 <HAL_SD_MspInit+0x1d0>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010c2:	4a2a      	ldr	r2, [pc, #168]	@ (800116c <HAL_SD_MspInit+0x1dc>)
 80010c4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ce:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010d0:	2240      	movs	r2, #64	@ 0x40
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010f4:	2220      	movs	r2, #32
 80010f6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 8001100:	2204      	movs	r2, #4
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 8001106:	2203      	movs	r2, #3
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 800110c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 8001114:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001118:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800111a:	4813      	ldr	r0, [pc, #76]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 800111c:	f000 fc8a 	bl	8001a34 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001126:	f7ff fec9 	bl	8000ebc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 800112e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <HAL_SD_MspInit+0x1d8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2031      	movs	r0, #49	@ 0x31
 800113c:	f000 fc42 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001140:	2031      	movs	r0, #49	@ 0x31
 8001142:	f000 fc5b 	bl	80019fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40012c00 	.word	0x40012c00
 8001154:	40023800 	.word	0x40023800
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	20000560 	.word	0x20000560
 8001164:	40026458 	.word	0x40026458
 8001168:	200005c0 	.word	0x200005c0
 800116c:	400264a0 	.word	0x400264a0

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_TIM_Base_MspInit+0x48>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d115      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	2032      	movs	r0, #50	@ 0x32
 80011a4:	f000 fc0e 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f000 fc27 	bl	80019fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40000c00 	.word	0x40000c00
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001254 <HAL_UART_MspInit+0x94>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d134      	bne.n	800124c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_UART_MspInit+0x98>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_UART_MspInit+0x98>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_UART_MspInit+0x98>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_UART_MspInit+0x98>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <HAL_UART_MspInit+0x98>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_UART_MspInit+0x98>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122c:	2307      	movs	r3, #7
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4809      	ldr	r0, [pc, #36]	@ (800125c <HAL_UART_MspInit+0x9c>)
 8001238:	f001 f80a 	bl	8002250 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2105      	movs	r1, #5
 8001240:	2027      	movs	r0, #39	@ 0x27
 8001242:	f000 fbbf 	bl	80019c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001246:	2027      	movs	r0, #39	@ 0x27
 8001248:	f000 fbd8 	bl	80019fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	@ 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40004800 	.word	0x40004800
 8001258:	40023800 	.word	0x40023800
 800125c:	40020c00 	.word	0x40020c00

08001260 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_UART_MspDeInit+0x38>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10d      	bne.n	800128e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_UART_MspDeInit+0x3c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <HAL_UART_MspDeInit+0x3c>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 800127e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <HAL_UART_MspDeInit+0x40>)
 8001284:	f001 f980 	bl	8002588 <HAL_GPIO_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001288:	2027      	movs	r0, #39	@ 0x27
 800128a:	f000 fbc5 	bl	8001a18 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004800 	.word	0x40004800
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <HAL_InitTick+0xd4>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001378 <HAL_InitTick+0xd4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <HAL_InitTick+0xd4>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 ff48 	bl	8003170 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012e0:	f001 fe9e 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ec:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_InitTick+0xd8>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9b      	lsrs	r3, r3, #18
 80012f4:	3b01      	subs	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_InitTick+0xdc>)
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_InitTick+0xe0>)
 80012fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_InitTick+0xdc>)
 8001300:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001304:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001306:	4a1e      	ldr	r2, [pc, #120]	@ (8001380 <HAL_InitTick+0xdc>)
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <HAL_InitTick+0xdc>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_InitTick+0xdc>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_InitTick+0xdc>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <HAL_InitTick+0xdc>)
 8001320:	f003 f8a4 	bl	800446c <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800132a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11b      	bne.n	800136a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001332:	4813      	ldr	r0, [pc, #76]	@ (8001380 <HAL_InitTick+0xdc>)
 8001334:	f003 f8ea 	bl	800450c <HAL_TIM_Base_Start_IT>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800133e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001342:	2b00      	cmp	r3, #0
 8001344:	d111      	bne.n	800136a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001346:	2019      	movs	r0, #25
 8001348:	f000 fb58 	bl	80019fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d808      	bhi.n	8001364 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001352:	2200      	movs	r2, #0
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	2019      	movs	r0, #25
 8001358:	f000 fb34 	bl	80019c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_InitTick+0xe4>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e002      	b.n	800136a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800136a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800136e:	4618      	mov	r0, r3
 8001370:	3730      	adds	r7, #48	@ 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	431bde83 	.word	0x431bde83
 8001380:	200009f4 	.word	0x200009f4
 8001384:	40010000 	.word	0x40010000
 8001388:	20000054 	.word	0x20000054

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001390:	f001 ff20 	bl	80031d4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x8>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013da:	f003 f907 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200009f4 	.word	0x200009f4

080013e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <USART3_IRQHandler+0x10>)
 80013ee:	f003 fde5 	bl	8004fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000668 	.word	0x20000668

080013fc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <SDIO_IRQHandler+0x10>)
 8001402:	f002 f97b 	bl	80036fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200004dc 	.word	0x200004dc

08001410 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM5_IRQHandler+0x10>)
 8001416:	f003 f8e9 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000620 	.word	0x20000620

08001424 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Stream3_IRQHandler+0x10>)
 800142a:	f000 fc9b 	bl	8001d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000560 	.word	0x20000560

08001438 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <DMA2_Stream6_IRQHandler+0x10>)
 800143e:	f000 fc91 	bl	8001d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200005c0 	.word	0x200005c0

0800144c <SysClockPLLConfig>:
#include "sys_clk_cnfg.h"

volatile uint32_t freq;

ret_status SysClockPLLConfig(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a8      	sub	sp, #160	@ 0xa0
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	ret_status status;

	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001454:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001458:	2230      	movs	r2, #48	@ 0x30
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00c f935 	bl	800d6cc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001462:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

	  RCC_OscInitTypeDef RCC_OscStruct;
	  RCC_ClkInitTypeDef RCC_ClkStruct;
	  uint32_t laten;

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001472:	2301      	movs	r3, #1
 8001474:	66bb      	str	r3, [r7, #104]	@ 0x68
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001476:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001482:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001486:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  RCC_OscInitStruct.PLL.PLLM = 25;
 800148a:	2319      	movs	r3, #25
 800148c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8001490:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 800149e:	2307      	movs	r3, #7
 80014a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	  status.sysStat = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014a4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f969 	bl	8002780 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  if (status.sysStat != HAL_OK)
 80014b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <SysClockPLLConfig+0x88>
	  {
		status.nErrFnc = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    return status;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	461a      	mov	r2, r3
 80014c6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80014ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80014d2:	e041      	b.n	8001558 <SysClockPLLConfig+0x10c>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	65bb      	str	r3, [r7, #88]	@ 0x58
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014e4:	663b      	str	r3, [r7, #96]	@ 0x60
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	667b      	str	r3, [r7, #100]	@ 0x64

	  status.sysStat = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80014ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f0:	2105      	movs	r1, #5
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fbbc 	bl	8002c70 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  if (status.sysStat != HAL_OK)
 80014fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <SysClockPLLConfig+0xd2>
	  {
		status.nErrFnc = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    return status;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001514:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001518:	e882 0003 	stmia.w	r2, {r0, r1}
 800151c:	e01c      	b.n	8001558 <SysClockPLLConfig+0x10c>
	  }

		freq = HAL_RCC_GetSysClockFreq();
 800151e:	f001 fc99 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8001522:	4603      	mov	r3, r0
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <SysClockPLLConfig+0x114>)
 8001526:	6013      	str	r3, [r2, #0]
	    HAL_RCC_GetClockConfig(&RCC_ClkStruct, &laten);
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fe1c 	bl	8003170 <HAL_RCC_GetClockConfig>
	    HAL_RCC_GetOscConfig(&RCC_OscStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4618      	mov	r0, r3
 800153e:	f001 fd83 	bl	8003048 <HAL_RCC_GetOscConfig>

	    status.nErrFnc = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	    return status;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001550:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001554:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	37a0      	adds	r7, #160	@ 0xa0
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000a3c 	.word	0x20000a3c

08001564 <SysClockHSEConfig>:

ret_status SysClockHSEConfig(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0a8      	sub	sp, #160	@ 0xa0
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	ret_status status;

	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001570:	2230      	movs	r2, #48	@ 0x30
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f00c f8a9 	bl	800d6cc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

	  RCC_OscInitTypeDef RCC_OscStruct;
	  RCC_ClkInitTypeDef RCC_ClkStruct;
	  uint32_t laten;

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	66bb      	str	r3, [r7, #104]	@ 0x68
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001592:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  status.sysStat = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800159a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 f8ee 	bl	8002780 <HAL_RCC_OscConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  if (status.sysStat != HAL_OK)
 80015aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <SysClockHSEConfig+0x66>
	  {
		status.nErrFnc = 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    return status;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80015c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80015c8:	e041      	b.n	800164e <SysClockHSEConfig+0xea>
	  }

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	65bb      	str	r3, [r7, #88]	@ 0x58
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015da:	663b      	str	r3, [r7, #96]	@ 0x60
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e0:	667b      	str	r3, [r7, #100]	@ 0x64

	  status.sysStat = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80015e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e6:	2105      	movs	r1, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fb41 	bl	8002c70 <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  if (status.sysStat != HAL_OK)
 80015f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <SysClockHSEConfig+0xb0>
	  {
		status.nErrFnc = 2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	    return status;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	461a      	mov	r2, r3
 8001606:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800160a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800160e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001612:	e01c      	b.n	800164e <SysClockHSEConfig+0xea>
	  }

		freq = HAL_RCC_GetSysClockFreq();
 8001614:	f001 fc1e 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8001618:	4603      	mov	r3, r0
 800161a:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <SysClockHSEConfig+0xf4>)
 800161c:	6013      	str	r3, [r2, #0]
	    HAL_RCC_GetClockConfig(&RCC_ClkStruct, &laten);
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fda1 	bl	8003170 <HAL_RCC_GetClockConfig>
	    HAL_RCC_GetOscConfig(&RCC_OscStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fd08 	bl	8003048 <HAL_RCC_GetOscConfig>
	    status.nErrFnc = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	    return status;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	461a      	mov	r2, r3
 8001642:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	37a0      	adds	r7, #160	@ 0xa0
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000a3c 	.word	0x20000a3c

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f00c f8b2 	bl	800d7f4 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000f00 	.word	0x00000f00
 80016c0:	20000a40 	.word	0x20000a40
 80016c4:	200055c8 	.word	0x200055c8

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f00c f871 	bl	800d800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7fe fffb 	bl	8000718 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001730:	0800e59c 	.word	0x0800e59c
  ldr r2, =_sbss
 8001734:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001738:	200055c8 	.word	0x200055c8

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f920 	bl	80019ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fd98 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fbd8 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000058 	.word	0x20000058
 80017a8:	20000a44 	.word	0x20000a44

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000a44 	.word	0x20000a44

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000058 	.word	0x20000058

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db12      	blt.n	80018e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <__NVIC_DisableIRQ+0x44>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	3320      	adds	r3, #32
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80018d8:	f3bf 8f4f 	dsb	sy
}
 80018dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018de:	f3bf 8f6f 	isb	sy
}
 80018e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff28 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d6:	f7ff ff3d 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	6978      	ldr	r0, [r7, #20]
 80019e2:	f7ff ffb1 	bl	8001948 <NVIC_EncodePriority>
 80019e6:	4602      	mov	r2, r0
 80019e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff80 	bl	80018f4 <__NVIC_SetPriority>
}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff30 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff40 	bl	80018ac <__NVIC_DisableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff feb4 	bl	80017ac <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e099      	b.n	8001b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a70:	e00f      	b.n	8001a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a72:	f7ff fe9b 	bl	80017ac <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d908      	bls.n	8001a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e078      	b.n	8001b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e8      	bne.n	8001a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_DMA_Init+0x158>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d107      	bne.n	8001afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	4313      	orrs	r3, r2
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f023 0307 	bic.w	r3, r3, #7
 8001b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d117      	bne.n	8001b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fb0d 	bl	8002158 <DMA_CheckFifoParam>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2240      	movs	r2, #64	@ 0x40
 8001b48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b52:	2301      	movs	r3, #1
 8001b54:	e016      	b.n	8001b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fac4 	bl	80020ec <DMA_CalcBaseAndBitshift>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	223f      	movs	r2, #63	@ 0x3f
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	f010803f 	.word	0xf010803f

08001b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_DMA_Start_IT+0x26>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e040      	b.n	8001c38 <HAL_DMA_Start_IT+0xa8>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d12f      	bne.n	8001c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fa56 	bl	8002090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	223f      	movs	r2, #63	@ 0x3f
 8001bea:	409a      	lsls	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0216 	orr.w	r2, r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e005      	b.n	8001c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c4e:	f7ff fdad 	bl	80017ac <HAL_GetTick>
 8001c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e052      	b.n	8001d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0216 	bic.w	r2, r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_DMA_Abort+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	e013      	b.n	8001cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc4:	f7ff fd72 	bl	80017ac <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d90c      	bls.n	8001cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e015      	b.n	8001d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e4      	bne.n	8001cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	223f      	movs	r2, #63	@ 0x3f
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00c      	b.n	8001d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d70:	4b8e      	ldr	r3, [pc, #568]	@ (8001fac <HAL_DMA_IRQHandler+0x248>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb0 <HAL_DMA_IRQHandler+0x24c>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8e:	2208      	movs	r2, #8
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	2201      	movs	r2, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	2204      	movs	r2, #4
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	f043 0204 	orr.w	r2, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	2210      	movs	r2, #16
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d043      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03c      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	2210      	movs	r2, #16
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d024      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
 8001e92:	e01f      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e016      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0208 	bic.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	2220      	movs	r2, #32
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 808f 	beq.w	8002004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8087 	beq.w	8002004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	2220      	movs	r2, #32
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d136      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x1da>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f52:	223f      	movs	r2, #63	@ 0x3f
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07e      	beq.n	8002070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
        }
        return;
 8001f7a:	e079      	b.n	8002070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01d      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e02c      	b.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
 8001faa:	bf00      	nop
 8001fac:	20000050 	.word	0x20000050
 8001fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e01e      	b.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0210 	bic.w	r2, r2, #16
 8001fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	2b00      	cmp	r3, #0
 800200a:	d032      	beq.n	8002072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2205      	movs	r2, #5
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3301      	adds	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	d307      	bcc.n	800204c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f2      	bne.n	8002030 <HAL_DMA_IRQHandler+0x2cc>
 800204a:	e000      	b.n	800204e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800204c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e000      	b.n	8002072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002070:	bf00      	nop
    }
  }
}
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b40      	cmp	r3, #64	@ 0x40
 80020bc:	d108      	bne.n	80020d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ce:	e007      	b.n	80020e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3b10      	subs	r3, #16
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <DMA_CalcBaseAndBitshift+0x64>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002106:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <DMA_CalcBaseAndBitshift+0x68>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d909      	bls.n	800212e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	@ 0x58
 800212c:	e007      	b.n	800213e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	aaaaaaab 	.word	0xaaaaaaab
 8002154:	0800e3bc 	.word	0x0800e3bc

08002158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11f      	bne.n	80021b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d856      	bhi.n	8002226 <DMA_CheckFifoParam+0xce>
 8002178:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <DMA_CheckFifoParam+0x28>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	080021a3 	.word	0x080021a3
 8002188:	08002191 	.word	0x08002191
 800218c:	08002227 	.word	0x08002227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d046      	beq.n	800222a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e043      	b.n	800222a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021aa:	d140      	bne.n	800222e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e03d      	b.n	800222e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ba:	d121      	bne.n	8002200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d837      	bhi.n	8002232 <DMA_CheckFifoParam+0xda>
 80021c2:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x70>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021df 	.word	0x080021df
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	080021f1 	.word	0x080021f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e030      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ee:	e022      	b.n	8002236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f8:	d11f      	bne.n	800223a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021fe:	e01c      	b.n	800223a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d903      	bls.n	800220e <DMA_CheckFifoParam+0xb6>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d003      	beq.n	8002214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800220c:	e018      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      break;
 8002212:	e015      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e00b      	b.n	800223e <DMA_CheckFifoParam+0xe6>
      break;
 8002226:	bf00      	nop
 8002228:	e00a      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e008      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e006      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e004      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;   
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
    }
  } 
  
  return status; 
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e16b      	b.n	8002544 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	f040 815a 	bne.w	800253e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d005      	beq.n	80022a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d130      	bne.n	8002304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 0201 	and.w	r2, r3, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d017      	beq.n	8002340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d123      	bne.n	8002394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80b4 	beq.w	800253e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b60      	ldr	r3, [pc, #384]	@ (800255c <HAL_GPIO_Init+0x30c>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	4a5f      	ldr	r2, [pc, #380]	@ (800255c <HAL_GPIO_Init+0x30c>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e6:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_GPIO_Init+0x30c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002560 <HAL_GPIO_Init+0x310>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a52      	ldr	r2, [pc, #328]	@ (8002564 <HAL_GPIO_Init+0x314>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02b      	beq.n	8002476 <HAL_GPIO_Init+0x226>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a51      	ldr	r2, [pc, #324]	@ (8002568 <HAL_GPIO_Init+0x318>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d025      	beq.n	8002472 <HAL_GPIO_Init+0x222>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a50      	ldr	r2, [pc, #320]	@ (800256c <HAL_GPIO_Init+0x31c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01f      	beq.n	800246e <HAL_GPIO_Init+0x21e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4f      	ldr	r2, [pc, #316]	@ (8002570 <HAL_GPIO_Init+0x320>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x21a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4e      	ldr	r2, [pc, #312]	@ (8002574 <HAL_GPIO_Init+0x324>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x216>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4d      	ldr	r2, [pc, #308]	@ (8002578 <HAL_GPIO_Init+0x328>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x212>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4c      	ldr	r2, [pc, #304]	@ (800257c <HAL_GPIO_Init+0x32c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x20e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4b      	ldr	r2, [pc, #300]	@ (8002580 <HAL_GPIO_Init+0x330>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x20a>
 8002456:	2307      	movs	r3, #7
 8002458:	e00e      	b.n	8002478 <HAL_GPIO_Init+0x228>
 800245a:	2308      	movs	r3, #8
 800245c:	e00c      	b.n	8002478 <HAL_GPIO_Init+0x228>
 800245e:	2306      	movs	r3, #6
 8002460:	e00a      	b.n	8002478 <HAL_GPIO_Init+0x228>
 8002462:	2305      	movs	r3, #5
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x228>
 8002466:	2304      	movs	r3, #4
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x228>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x228>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x228>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x228>
 8002476:	2300      	movs	r3, #0
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002488:	4935      	ldr	r1, [pc, #212]	@ (8002560 <HAL_GPIO_Init+0x310>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002496:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_GPIO_Init+0x334>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ba:	4a32      	ldr	r2, [pc, #200]	@ (8002584 <HAL_GPIO_Init+0x334>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c0:	4b30      	ldr	r3, [pc, #192]	@ (8002584 <HAL_GPIO_Init+0x334>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e4:	4a27      	ldr	r2, [pc, #156]	@ (8002584 <HAL_GPIO_Init+0x334>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ea:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <HAL_GPIO_Init+0x334>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250e:	4a1d      	ldr	r2, [pc, #116]	@ (8002584 <HAL_GPIO_Init+0x334>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_GPIO_Init+0x334>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002538:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <HAL_GPIO_Init+0x334>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f67f ae90 	bls.w	800226c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40021800 	.word	0x40021800
 8002580:	40021c00 	.word	0x40021c00
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e0cd      	b.n	8002740 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	f040 80bd 	bne.w	800273a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80025c0:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_GPIO_DeInit+0x1d0>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_GPIO_DeInit+0x1d4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_DeInit+0xba>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002760 <HAL_GPIO_DeInit+0x1d8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_DeInit+0xb6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a5b      	ldr	r2, [pc, #364]	@ (8002764 <HAL_GPIO_DeInit+0x1dc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_DeInit+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002768 <HAL_GPIO_DeInit+0x1e0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_DeInit+0xae>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a59      	ldr	r2, [pc, #356]	@ (800276c <HAL_GPIO_DeInit+0x1e4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_DeInit+0xaa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <HAL_GPIO_DeInit+0x1e8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_DeInit+0xa6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a57      	ldr	r2, [pc, #348]	@ (8002774 <HAL_GPIO_DeInit+0x1ec>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_DeInit+0xa2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_GPIO_DeInit+0x1f0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_DeInit+0x9e>
 8002622:	2307      	movs	r3, #7
 8002624:	e00e      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 8002626:	2308      	movs	r3, #8
 8002628:	e00c      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 800262a:	2306      	movs	r3, #6
 800262c:	e00a      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 800262e:	2305      	movs	r3, #5
 8002630:	e008      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 8002632:	2304      	movs	r3, #4
 8002634:	e006      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_DeInit+0xbc>
 8002642:	2300      	movs	r3, #0
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d132      	bne.n	80026ba <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002654:	4b49      	ldr	r3, [pc, #292]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	4947      	ldr	r1, [pc, #284]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 800265e:	4013      	ands	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002662:	4b46      	ldr	r3, [pc, #280]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	4944      	ldr	r1, [pc, #272]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 800266c:	4013      	ands	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002670:	4b42      	ldr	r3, [pc, #264]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	4940      	ldr	r1, [pc, #256]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 800267a:	4013      	ands	r3, r2
 800267c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800267e:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	493d      	ldr	r1, [pc, #244]	@ (800277c <HAL_GPIO_DeInit+0x1f4>)
 8002688:	4013      	ands	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800269c:	4a2e      	ldr	r2, [pc, #184]	@ (8002758 <HAL_GPIO_DeInit+0x1d0>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	482a      	ldr	r0, [pc, #168]	@ (8002758 <HAL_GPIO_DeInit+0x1d0>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	400a      	ands	r2, r1
 80026b4:	3302      	adds	r3, #2
 80026b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2103      	movs	r1, #3
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	08d2      	lsrs	r2, r2, #3
 80026f0:	4019      	ands	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2103      	movs	r1, #3
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	2101      	movs	r1, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2103      	movs	r1, #3
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f af2e 	bls.w	80025a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e267      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d075      	beq.n	800288a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800279e:	4b88      	ldr	r3, [pc, #544]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d00c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b85      	ldr	r3, [pc, #532]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d112      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b82      	ldr	r3, [pc, #520]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c2:	d10b      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	4b7e      	ldr	r3, [pc, #504]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d05b      	beq.n	8002888 <HAL_RCC_OscConfig+0x108>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d157      	bne.n	8002888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e242      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_OscConfig+0x74>
 80027e6:	4b76      	ldr	r3, [pc, #472]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a75      	ldr	r2, [pc, #468]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e01d      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x98>
 80027fe:	4b70      	ldr	r3, [pc, #448]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6f      	ldr	r2, [pc, #444]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b6d      	ldr	r3, [pc, #436]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6c      	ldr	r2, [pc, #432]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 8002818:	4b69      	ldr	r3, [pc, #420]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a68      	ldr	r2, [pc, #416]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b66      	ldr	r3, [pc, #408]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a65      	ldr	r2, [pc, #404]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe ffb8 	bl	80017ac <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe ffb4 	bl	80017ac <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	@ 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e207      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0xc0>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe ffa4 	bl	80017ac <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe ffa0 	bl	80017ac <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1f3      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	4b51      	ldr	r3, [pc, #324]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0xe8>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002896:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b47      	ldr	r3, [pc, #284]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d11c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b44      	ldr	r3, [pc, #272]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1c7      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4937      	ldr	r1, [pc, #220]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	e03a      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <HAL_RCC_OscConfig+0x244>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe ff59 	bl	80017ac <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe ff55 	bl	80017ac <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1a8      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b28      	ldr	r3, [pc, #160]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4925      	ldr	r1, [pc, #148]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b24      	ldr	r3, [pc, #144]	@ (80029c4 <HAL_RCC_OscConfig+0x244>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe ff38 	bl	80017ac <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe ff34 	bl	80017ac <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e187      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d036      	beq.n	80029d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_RCC_OscConfig+0x248>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe ff18 	bl	80017ac <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe ff14 	bl	80017ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e167      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x200>
 800299e:	e01b      	b.n	80029d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_OscConfig+0x248>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe ff01 	bl	80017ac <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ae:	f7fe fefd 	bl	80017ac <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e150      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	42470000 	.word	0x42470000
 80029c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b88      	ldr	r3, [pc, #544]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8097 	beq.w	8002b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b81      	ldr	r3, [pc, #516]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b77      	ldr	r3, [pc, #476]	@ (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b74      	ldr	r3, [pc, #464]	@ (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a73      	ldr	r2, [pc, #460]	@ (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe febd 	bl	80017ac <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe feb9 	bl	80017ac <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e10c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2ea>
 8002a5c:	4b64      	ldr	r3, [pc, #400]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	4a63      	ldr	r2, [pc, #396]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x30c>
 8002a72:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a8c:	4b58      	ldr	r3, [pc, #352]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	4a57      	ldr	r2, [pc, #348]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a98:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a54      	ldr	r2, [pc, #336]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe fe7e 	bl	80017ac <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fe7a 	bl	80017ac <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0cb      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	4b49      	ldr	r3, [pc, #292]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ee      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x334>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fe68 	bl	80017ac <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fe64 	bl	80017ac <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0b5      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	4a38      	ldr	r2, [pc, #224]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a1 	beq.w	8002c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1e:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d05c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d141      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fe38 	bl	80017ac <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fe34 	bl	80017ac <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e087      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	491b      	ldr	r1, [pc, #108]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fe0d 	bl	80017ac <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fe09 	bl	80017ac <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e05c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x416>
 8002bb4:	e054      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fdf6 	bl	80017ac <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fdf2 	bl	80017ac <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e045      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x444>
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e038      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCC_OscConfig+0x4ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d028      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d111      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b68      	ldr	r3, [pc, #416]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d90c      	bls.n	8002cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b65      	ldr	r3, [pc, #404]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b37      	ldr	r3, [pc, #220]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4934      	ldr	r1, [pc, #208]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fe fd24 	bl	80017ac <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fe fd20 	bl	80017ac <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b25      	ldr	r3, [pc, #148]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20c      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	@ (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f82d 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	490a      	ldr	r1, [pc, #40]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	5ccb      	ldrb	r3, [r1, r3]
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fa44 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	0800e3a4 	.word	0x0800e3a4
 8002e34:	20000050 	.word	0x20000050
 8002e38:	20000054 	.word	0x20000054

08002e3c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_RCC_EnableCSS+0x14>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	4247004c 	.word	0x4247004c

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b090      	sub	sp, #64	@ 0x40
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80a1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8c:	e09b      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e92:	e098      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ec0:	fb03 f201 	mul.w	r2, r3, r1
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	fb00 f303 	mul.w	r3, r0, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ece:	fba0 1202 	umull	r1, r2, r0, r2
 8002ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed4:	460a      	mov	r2, r1
 8002ed6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eda:	4413      	add	r3, r2
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	61fa      	str	r2, [r7, #28]
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eee:	f7fd f9c7 	bl	8000280 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efa:	e053      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	2200      	movs	r2, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	617a      	str	r2, [r7, #20]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f0e:	f04f 0b00 	mov.w	fp, #0
 8002f12:	4652      	mov	r2, sl
 8002f14:	465b      	mov	r3, fp
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f46:	ebb2 0408 	subs.w	r4, r2, r8
 8002f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	00eb      	lsls	r3, r5, #3
 8002f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	4614      	mov	r4, r2
 8002f60:	461d      	mov	r5, r3
 8002f62:	eb14 030a 	adds.w	r3, r4, sl
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	eb45 030b 	adc.w	r3, r5, fp
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f98:	f7fd f972 	bl	8000280 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3740      	adds	r7, #64	@ 0x40
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	017d7840 	.word	0x017d7840

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000050 	.word	0x20000050

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a9b      	lsrs	r3, r3, #10
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	0800e3b4 	.word	0x0800e3b4

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffdc 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	0800e3b4 	.word	0x0800e3b4

08003048 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	220f      	movs	r2, #15
 8003054:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8003056:	4b45      	ldr	r3, [pc, #276]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003062:	d104      	bne.n	800306e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e00e      	b.n	800308c <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 800306e:	4b3f      	ldr	r3, [pc, #252]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d104      	bne.n	8003086 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	e002      	b.n	800308c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 800308c:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d103      	bne.n	80030a0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	08db      	lsrs	r3, r3, #3
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80030b4:	4b2d      	ldr	r3, [pc, #180]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d103      	bne.n	80030c8 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2205      	movs	r2, #5
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	e00c      	b.n	80030e2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d103      	bne.n	80030dc <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	e002      	b.n	80030e2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d103      	bne.n	80030f6 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	615a      	str	r2, [r3, #20]
 80030f4:	e002      	b.n	80030fc <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003108:	d103      	bne.n	8003112 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	619a      	str	r2, [r3, #24]
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003130:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003146:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	0c1a      	lsrs	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_RCC_GetOscConfig+0x124>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0e1b      	lsrs	r3, r3, #24
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	220f      	movs	r2, #15
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_RCC_GetClockConfig+0x5c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031b2:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <HAL_RCC_GetClockConfig+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e0:	2b80      	cmp	r3, #128	@ 0x80
 80031e2:	d104      	bne.n	80031ee <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80031e4:	f000 f80a 	bl	80031fc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80031e8:	4b03      	ldr	r3, [pc, #12]	@ (80031f8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80031ea:	2280      	movs	r2, #128	@ 0x80
 80031ec:	701a      	strb	r2, [r3, #0]
  }
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	4002380e 	.word	0x4002380e

080031fc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e022      	b.n	8003262 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd feae 	bl	8000f90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f815 	bl	800326c <HAL_SD_InitCard>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e00a      	b.n	8003262 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b08e      	sub	sp, #56	@ 0x38
 8003270:	af04      	add	r7, sp, #16
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003288:	2376      	movs	r3, #118	@ 0x76
 800328a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681d      	ldr	r5, [r3, #0]
 8003290:	466c      	mov	r4, sp
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800329a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a4:	4628      	mov	r0, r5
 80032a6:	f002 fddf 	bl	8005e68 <SDIO_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04f      	b.n	800335c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <HAL_SD_InitCard+0xf8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fe17 	bl	8005efa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_SD_InitCard+0xf8>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80032d2:	2002      	movs	r0, #2
 80032d4:	f7fe fa76 	bl	80017c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 ff6b 	bl	80041b4 <SD_PowerON>
 80032de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e02e      	b.n	800335c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fe8a 	bl	8004018 <SD_InitCard>
 8003304:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e01b      	b.n	800335c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800332c:	4618      	mov	r0, r3
 800332e:	f002 fe76 	bl	800601e <SDMMC_CmdBlockLength>
 8003332:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00f      	beq.n	800335a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <HAL_SD_InitCard+0xfc>)
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	@ 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bdb0      	pop	{r4, r5, r7, pc}
 8003364:	422580a0 	.word	0x422580a0
 8003368:	004005ff 	.word	0x004005ff

0800336c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0c0      	b.n	8003516 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 80b9 	bne.w	8003514 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d907      	bls.n	80033c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0a7      	b.n	8003516 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2203      	movs	r2, #3
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003520 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80033f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a4b      	ldr	r2, [pc, #300]	@ (8003524 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80033f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2200      	movs	r2, #0
 8003400:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3380      	adds	r3, #128	@ 0x80
 8003430:	4619      	mov	r1, r3
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	f7fe fba9 	bl	8001b90 <HAL_DMA_Start_IT>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d017      	beq.n	8003474 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003452:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a33      	ldr	r2, [pc, #204]	@ (8003528 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800345a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e050      	b.n	8003516 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003474:	4b2d      	ldr	r3, [pc, #180]	@ (800352c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	2b01      	cmp	r3, #1
 8003480:	d002      	beq.n	8003488 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	025b      	lsls	r3, r3, #9
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	025b      	lsls	r3, r3, #9
 8003492:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003494:	2390      	movs	r3, #144	@ 0x90
 8003496:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003498:	2302      	movs	r3, #2
 800349a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f107 0210 	add.w	r2, r7, #16
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fd89 	bl	8005fc6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d90a      	bls.n	80034d0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2282      	movs	r2, #130	@ 0x82
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fded 	bl	80060a6 <SDMMC_CmdReadMultiBlock>
 80034cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80034ce:	e009      	b.n	80034e4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2281      	movs	r2, #129	@ 0x81
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fdc0 	bl	8006062 <SDMMC_CmdReadSingleBlock>
 80034e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80034e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003528 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80034f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e002      	b.n	8003516 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3730      	adds	r7, #48	@ 0x30
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08003e27 	.word	0x08003e27
 8003524:	08003e99 	.word	0x08003e99
 8003528:	004005ff 	.word	0x004005ff
 800352c:	4225858c 	.word	0x4225858c

08003530 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0c5      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 80be 	bne.w	80036e2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800356c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	429a      	cmp	r2, r3
 8003578:	d907      	bls.n	800358a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0ac      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	4a4e      	ldr	r2, [pc, #312]	@ (80036ec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80035b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ba:	4a4d      	ldr	r2, [pc, #308]	@ (80036f0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80035bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	2200      	movs	r2, #0
 80035c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	025b      	lsls	r3, r3, #9
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d90a      	bls.n	80035f0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22a0      	movs	r2, #160	@ 0xa0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fda1 	bl	800612e <SDMMC_CmdWriteMultiBlock>
 80035ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80035ee:	e009      	b.n	8003604 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2290      	movs	r2, #144	@ 0x90
 80035f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 fd74 	bl	80060ea <SDMMC_CmdWriteSingleBlock>
 8003602:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a39      	ldr	r2, [pc, #228]	@ (80036f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003610:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e059      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003630:	4b31      	ldr	r3, [pc, #196]	@ (80036f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3380      	adds	r3, #128	@ 0x80
 8003666:	461a      	mov	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	025b      	lsls	r3, r3, #9
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f7fe fa8f 	bl	8001b90 <HAL_DMA_Start_IT>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01c      	beq.n	80036b2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003686:	f023 0302 	bic.w	r3, r3, #2
 800368a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e018      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80036be:	2390      	movs	r3, #144	@ 0x90
 80036c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f107 0210 	add.w	r2, r7, #16
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fc74 	bl	8005fc6 <SDIO_ConfigData>

      return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3730      	adds	r7, #48	@ 0x30
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	08003dfd 	.word	0x08003dfd
 80036f0:	08003e99 	.word	0x08003e99
 80036f4:	004005ff 	.word	0x004005ff
 80036f8:	4225858c 	.word	0x4225858c

080036fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_SD_IRQHandler+0x2e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fdfc 	bl	8004320 <SD_Read_IT>
 8003728:	e165      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 808f 	beq.w	8003858 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003752:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8003756:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d039      	beq.n	80037e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_SD_IRQHandler+0x8a>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fcf2 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003790:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f92f 	bl	8003a08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80037b2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_SD_IRQHandler+0xda>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f003 f9f8 	bl	8006bcc <HAL_SD_RxCpltCallback>
 80037dc:	e10b      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f003 f9ea 	bl	8006bb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037e4:	e107      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8102 	beq.w	80039f6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d011      	beq.n	8003820 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f002 fcb7 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003806:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8f4 	bl	8003a08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80e5 	bne.w	80039f6 <HAL_SD_IRQHandler+0x2fa>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 80df 	bne.w	80039f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0208 	bic.w	r2, r2, #8
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f003 f9b1 	bl	8006bb8 <HAL_SD_TxCpltCallback>
}
 8003856:	e0ce      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_SD_IRQHandler+0x17c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fda6 	bl	80043c2 <SD_Write_IT>
 8003876:	e0be      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800387e:	f240 233a 	movw	r3, #570	@ 0x23a
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80b6 	beq.w	80039f6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	f043 0202 	orr.w	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	f043 0208 	orr.w	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	f043 0210 	orr.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	f043 0208 	orr.w	r2, r3, #8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fc20 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f855 	bl	8003a08 <HAL_SD_ErrorCallback>
}
 800395e:	e04a      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d045      	beq.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <HAL_SD_IRQHandler+0x282>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d011      	beq.n	80039a2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <HAL_SD_IRQHandler+0x304>)
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f9c8 	bl	8001d20 <HAL_DMA_Abort_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d02f      	beq.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	4618      	mov	r0, r3
 800399c:	f000 face 	bl	8003f3c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80039a0:	e029      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <HAL_SD_IRQHandler+0x2ba>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	4a12      	ldr	r2, [pc, #72]	@ (8003a04 <HAL_SD_IRQHandler+0x308>)
 80039bc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f9ac 	bl	8001d20 <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d013      	beq.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fae9 	bl	8003faa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80039d8:	e00d      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f003 f8d8 	bl	8006ba4 <HAL_SD_AbortCallback>
}
 80039f4:	e7ff      	b.n	80039f6 <HAL_SD_IRQHandler+0x2fa>
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	08003f3d 	.word	0x08003f3d
 8003a04:	08003fab 	.word	0x08003fab

08003a08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a2a:	0f9b      	lsrs	r3, r3, #30
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a9a:	0bdb      	lsrs	r3, r3, #15
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aac:	0b9b      	lsrs	r3, r3, #14
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003abe:	0b5b      	lsrs	r3, r3, #13
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad0:	0b1b      	lsrs	r3, r3, #12
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d163      	bne.n	8003bb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003af6:	4013      	ands	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003afc:	0f92      	lsrs	r2, r2, #30
 8003afe:	431a      	orrs	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b08:	0edb      	lsrs	r3, r3, #27
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2c:	0d5b      	lsrs	r3, r3, #21
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3e:	0c9b      	lsrs	r3, r3, #18
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b50:	0bdb      	lsrs	r3, r3, #15
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	7e1b      	ldrb	r3, [r3, #24]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	3302      	adds	r3, #2
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003b7e:	fb03 f202 	mul.w	r2, r3, r2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	7a1b      	ldrb	r3, [r3, #8]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ba0:	0a52      	lsrs	r2, r2, #9
 8003ba2:	fb03 f202 	mul.w	r2, r3, r2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bb2:	e031      	b.n	8003c18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11d      	bne.n	8003bf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	029a      	lsls	r2, r3, #10
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bf6:	e00f      	b.n	8003c18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a58      	ldr	r2, [pc, #352]	@ (8003d60 <HAL_SD_GetCardCSD+0x344>)
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e09d      	b.n	8003d54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1c:	0b9b      	lsrs	r3, r3, #14
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c2e:	09db      	lsrs	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	0fdb      	lsrs	r3, r3, #31
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	0f5b      	lsrs	r3, r3, #29
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	0d9b      	lsrs	r3, r3, #22
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	0d5b      	lsrs	r3, r3, #21
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	0bdb      	lsrs	r3, r3, #15
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd6:	0b9b      	lsrs	r3, r3, #14
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	0b5b      	lsrs	r3, r3, #13
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	0b1b      	lsrs	r3, r3, #12
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	004005ff 	.word	0x004005ff

08003d64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa7e 	bl	80042d0 <SD_SendStatus>
 8003dd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	0a5b      	lsrs	r3, r3, #9
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003df2:	693b      	ldr	r3, [r7, #16]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	2b82      	cmp	r3, #130	@ 0x82
 8003e3a:	d111      	bne.n	8003e60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f002 f997 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003e46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fdd4 	bl	8003a08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0208 	bic.w	r2, r2, #8
 8003e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f002 fe9f 	bl	8006bcc <HAL_SD_RxCpltCallback>
#endif
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe f8e6 	bl	8002078 <HAL_DMA_GetError>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d03e      	beq.n	8003f30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d002      	beq.n	8003ece <SD_DMAError+0x36>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d12d      	bne.n	8003f2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <SD_DMAError+0xa0>)
 8003ed4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7ff ff62 	bl	8003dbc <HAL_SD_GetCardState>
 8003ef8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d002      	beq.n	8003f06 <SD_DMAError+0x6e>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d10a      	bne.n	8003f1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 f932 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003f10:	4602      	mov	r2, r0
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	431a      	orrs	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff fd6c 	bl	8003a08 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	004005ff 	.word	0x004005ff

08003f3c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff31 	bl	8003dbc <HAL_SD_GetCardState>
 8003f5a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d002      	beq.n	8003f76 <SD_DMATxAbort+0x3a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10a      	bne.n	8003f8c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f002 f8fa 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f002 fe05 	bl	8006ba4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f9a:	e002      	b.n	8003fa2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff fd33 	bl	8003a08 <HAL_SD_ErrorCallback>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fefa 	bl	8003dbc <HAL_SD_GetCardState>
 8003fc8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d002      	beq.n	8003fe4 <SD_DMARxAbort+0x3a>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d10a      	bne.n	8003ffa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 f8c3 	bl	8006174 <SDMMC_CmdStopTransfer>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f002 fdce 	bl	8006ba4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004008:	e002      	b.n	8004010 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fcfc 	bl	8003a08 <HAL_SD_ErrorCallback>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b094      	sub	sp, #80	@ 0x50
 800401c:	af04      	add	r7, sp, #16
 800401e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004020:	2301      	movs	r3, #1
 8004022:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f001 ff74 	bl	8005f16 <SDIO_GetPowerState>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004034:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004038:	e0b8      	b.n	80041ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	2b03      	cmp	r3, #3
 8004040:	d02f      	beq.n	80040a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f002 f95b 	bl	8006302 <SDMMC_CmdSendCID>
 800404c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <SD_InitCard+0x40>
    {
      return errorstate;
 8004054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004056:	e0a9      	b.n	80041ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 ff9e 	bl	8005fa0 <SDIO_GetResponse>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2104      	movs	r1, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f001 ff95 	bl	8005fa0 <SDIO_GetResponse>
 8004076:	4602      	mov	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2108      	movs	r1, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f001 ff8c 	bl	8005fa0 <SDIO_GetResponse>
 8004088:	4602      	mov	r2, r0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	210c      	movs	r1, #12
 8004094:	4618      	mov	r0, r3
 8004096:	f001 ff83 	bl	8005fa0 <SDIO_GetResponse>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d00d      	beq.n	80040c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f107 020e 	add.w	r2, r7, #14
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 f961 	bl	800637c <SDMMC_CmdSetRelAdd>
 80040ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80040c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c4:	e072      	b.n	80041ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d036      	beq.n	800413c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f002 f92b 	bl	800633e <SDMMC_CmdSendCSD>
 80040e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80040f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f2:	e05b      	b.n	80041ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 ff50 	bl	8005fa0 <SDIO_GetResponse>
 8004100:	4602      	mov	r2, r0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2104      	movs	r1, #4
 800410c:	4618      	mov	r0, r3
 800410e:	f001 ff47 	bl	8005fa0 <SDIO_GetResponse>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2108      	movs	r1, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f001 ff3e 	bl	8005fa0 <SDIO_GetResponse>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	210c      	movs	r1, #12
 8004130:	4618      	mov	r0, r3
 8004132:	f001 ff35 	bl	8005fa0 <SDIO_GetResponse>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2104      	movs	r1, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f001 ff2c 	bl	8005fa0 <SDIO_GetResponse>
 8004148:	4603      	mov	r3, r0
 800414a:	0d1a      	lsrs	r2, r3, #20
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fc60 	bl	8003a1c <HAL_SD_GetCardCSD>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004162:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004166:	e021      	b.n	80041ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	2200      	movs	r2, #0
 8004174:	461c      	mov	r4, r3
 8004176:	4615      	mov	r5, r2
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	4608      	mov	r0, r1
 800417e:	f002 f81b 	bl	80061b8 <SDMMC_CmdSelDesel>
 8004182:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SD_InitCard+0x176>
  {
    return errorstate;
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	e00e      	b.n	80041ac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681d      	ldr	r5, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	466c      	mov	r4, sp
 8004196:	f103 0210 	add.w	r2, r3, #16
 800419a:	ca07      	ldmia	r2, {r0, r1, r2}
 800419c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041a0:	3304      	adds	r3, #4
 80041a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a4:	4628      	mov	r0, r5
 80041a6:	f001 fe5f 	bl	8005e68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3740      	adds	r7, #64	@ 0x40
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}

080041b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f002 f816 	bl	80061fe <SDMMC_CmdGoIdleState>
 80041d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <SD_PowerON+0x2a>
  {
    return errorstate;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	e072      	b.n	80042c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 f829 	bl	800623a <SDMMC_CmdOperCond>
 80041e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 ffff 	bl	80061fe <SDMMC_CmdGoIdleState>
 8004200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	e05b      	b.n	80042c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	2b01      	cmp	r3, #1
 8004218:	d137      	bne.n	800428a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f002 f829 	bl	8006278 <SDMMC_CmdAppCommand>
 8004226:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02d      	beq.n	800428a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800422e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004232:	e047      	b.n	80042c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f002 f81c 	bl	8006278 <SDMMC_CmdAppCommand>
 8004240:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <SD_PowerON+0x98>
    {
      return errorstate;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	e03b      	b.n	80042c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	491e      	ldr	r1, [pc, #120]	@ (80042cc <SD_PowerON+0x118>)
 8004252:	4618      	mov	r0, r3
 8004254:	f002 f832 	bl	80062bc <SDMMC_CmdAppOperCommand>
 8004258:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004260:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004264:	e02e      	b.n	80042c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fe97 	bl	8005fa0 <SDIO_GetResponse>
 8004272:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	0fdb      	lsrs	r3, r3, #31
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <SD_PowerON+0xcc>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <SD_PowerON+0xce>
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]

    count++;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004290:	4293      	cmp	r3, r2
 8004292:	d802      	bhi.n	800429a <SD_PowerON+0xe6>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0cc      	beq.n	8004234 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d902      	bls.n	80042aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80042a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042a8:	e00c      	b.n	80042c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80042ba:	e002      	b.n	80042c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	c1100000 	.word	0xc1100000

080042d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80042e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042e4:	e018      	b.n	8004318 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f002 f863 	bl	80063be <SDMMC_CmdSendStatus>
 80042f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	e009      	b.n	8004318 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fe48 	bl	8005fa0 <SDIO_GetResponse>
 8004310:	4602      	mov	r2, r0
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03f      	beq.n	80043ba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e033      	b.n	80043a8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fdba 	bl	8005ebe <SDIO_ReadFIFO>
 800434a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3301      	adds	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3b01      	subs	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]
      tmp++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3b01      	subs	r3, #1
 8004374:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	3b01      	subs	r3, #1
 800438a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0e1b      	lsrs	r3, r3, #24
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3b01      	subs	r3, #1
 80043a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3301      	adds	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	d9c8      	bls.n	8004340 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d043      	beq.n	8004464 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e037      	b.n	8004452 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3b01      	subs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	041a      	lsls	r2, r3, #16
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3b01      	subs	r3, #1
 8004422:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	061a      	lsls	r2, r3, #24
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4313      	orrs	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3b01      	subs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f107 0208 	add.w	r2, r7, #8
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f001 fd46 	bl	8005ed8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3301      	adds	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b07      	cmp	r3, #7
 8004456:	d9c4      	bls.n	80043e2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fe6c 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fa7e 	bl	80049ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d001      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e04e      	b.n	80045c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a23      	ldr	r2, [pc, #140]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454e:	d01d      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1f      	ldr	r2, [pc, #124]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1e      	ldr	r2, [pc, #120]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <HAL_TIM_Base_Start_IT+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1b      	ldr	r2, [pc, #108]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d111      	bne.n	80045b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b06      	cmp	r3, #6
 800459c:	d010      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	e007      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40001800 	.word	0x40001800

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0202 	mvn.w	r2, #2
 8004620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f999 	bl	800496e <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f98b 	bl	800495a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f99c 	bl	8004982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d020      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f973 	bl	800496e <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f965 	bl	800495a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f976 	bl	8004982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0208 	mvn.w	r2, #8
 80046b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f94d 	bl	800496e <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f93f 	bl	800495a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f950 	bl	8004982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f927 	bl	800496e <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f919 	bl	800495a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f92a 	bl	8004982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fb92 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fae4 	bl	8004d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8fb 	bl	8004996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0220 	mvn.w	r2, #32
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fab6 	bl	8004d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_ConfigClockSource+0x1c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e0b4      	b.n	8004952 <HAL_TIM_ConfigClockSource+0x186>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800480e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004820:	d03e      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004826:	f200 8087 	bhi.w	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482e:	f000 8086 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x172>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	d87f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b70      	cmp	r3, #112	@ 0x70
 800483a:	d01a      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xa6>
 800483c:	2b70      	cmp	r3, #112	@ 0x70
 800483e:	d87b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b60      	cmp	r3, #96	@ 0x60
 8004842:	d050      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004844:	2b60      	cmp	r3, #96	@ 0x60
 8004846:	d877      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b50      	cmp	r3, #80	@ 0x50
 800484a:	d03c      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0xfa>
 800484c:	2b50      	cmp	r3, #80	@ 0x50
 800484e:	d873      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d058      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x13a>
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	d86f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b30      	cmp	r3, #48	@ 0x30
 800485a:	d064      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 800485c:	2b30      	cmp	r3, #48	@ 0x30
 800485e:	d86b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d060      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b20      	cmp	r3, #32
 8004866:	d867      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05c      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b10      	cmp	r3, #16
 800486e:	d05a      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	e062      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004882:	f000 f9b9 	bl	8004bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	609a      	str	r2, [r3, #8]
      break;
 800489e:	e04f      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b0:	f000 f9a2 	bl	8004bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048c2:	609a      	str	r2, [r3, #8]
      break;
 80048c4:	e03c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f916 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2150      	movs	r1, #80	@ 0x50
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f96f 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80048e4:	e02c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	461a      	mov	r2, r3
 80048f4:	f000 f935 	bl	8004b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2160      	movs	r1, #96	@ 0x60
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f95f 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 8004904:	e01c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	461a      	mov	r2, r3
 8004914:	f000 f8f6 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2140      	movs	r1, #64	@ 0x40
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f94f 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 8004924:	e00c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f000 f946 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 8004936:	e003      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e000      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800493e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a46      	ldr	r2, [pc, #280]	@ (8004ad8 <TIM_Base_SetConfig+0x12c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ca:	d00f      	beq.n	80049ec <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a43      	ldr	r2, [pc, #268]	@ (8004adc <TIM_Base_SetConfig+0x130>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00b      	beq.n	80049ec <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a42      	ldr	r2, [pc, #264]	@ (8004ae0 <TIM_Base_SetConfig+0x134>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a41      	ldr	r2, [pc, #260]	@ (8004ae4 <TIM_Base_SetConfig+0x138>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a40      	ldr	r2, [pc, #256]	@ (8004ae8 <TIM_Base_SetConfig+0x13c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <TIM_Base_SetConfig+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d02b      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0c:	d027      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a32      	ldr	r2, [pc, #200]	@ (8004adc <TIM_Base_SetConfig+0x130>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d023      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a31      	ldr	r2, [pc, #196]	@ (8004ae0 <TIM_Base_SetConfig+0x134>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01f      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a30      	ldr	r2, [pc, #192]	@ (8004ae4 <TIM_Base_SetConfig+0x138>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01b      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <TIM_Base_SetConfig+0x13c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d017      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <TIM_Base_SetConfig+0x140>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <TIM_Base_SetConfig+0x144>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <TIM_Base_SetConfig+0x148>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <TIM_Base_SetConfig+0x14c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <TIM_Base_SetConfig+0x150>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <TIM_Base_SetConfig+0x154>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a10      	ldr	r2, [pc, #64]	@ (8004ad8 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0xf8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ae8 <TIM_Base_SetConfig+0x13c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d105      	bne.n	8004aca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	611a      	str	r2, [r3, #16]
  }
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800
 8004af8:	40001800 	.word	0x40001800
 8004afc:	40001c00 	.word	0x40001c00
 8004b00:	40002000 	.word	0x40002000

08004b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 030a 	bic.w	r3, r3, #10
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b087      	sub	sp, #28
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 0210 	bic.w	r2, r3, #16
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f043 0307 	orr.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e05a      	b.n	8004d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9c:	d01d      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40001800 	.word	0x40001800

08004d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e042      	b.n	8004df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc fa1e 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fdef 	bl	8005980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e024      	b.n	8004e54 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	@ 0x24
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e20:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fa1c 	bl	8001260 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	@ 0x28
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d175      	bne.n	8004f68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_UART_Transmit+0x2c>
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e06e      	b.n	8004f6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2221      	movs	r2, #33	@ 0x21
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fc87 	bl	80017ac <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb4:	d108      	bne.n	8004ec8 <HAL_UART_Transmit+0x6c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e003      	b.n	8004ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ed0:	e02e      	b.n	8004f30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2180      	movs	r1, #128	@ 0x80
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fb1f 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e03a      	b.n	8004f6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e007      	b.n	8004f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1cb      	bne.n	8004ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2140      	movs	r1, #64	@ 0x40
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 faeb 	bl	8005520 <UART_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e006      	b.n	8004f6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d112      	bne.n	8004fb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_UART_Receive_IT+0x26>
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e00b      	b.n	8004fb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fb12 	bl	80055d2 <UART_Start_Receive_IT>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_UART_IRQHandler+0x66>
 800500e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fbf2 	bl	8005804 <UART_Receive_IT>
      return;
 8005020:	e25b      	b.n	80054da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80de 	beq.w	80051e8 <HAL_UART_IRQHandler+0x22c>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80d1 	beq.w	80051e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xae>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_UART_IRQHandler+0xd2>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f043 0202 	orr.w	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
 800509a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f043 0204 	orr.w	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d011      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	f043 0208 	orr.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 81f2 	beq.w	80054d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_UART_IRQHandler+0x14e>
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb7d 	bl	8005804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <HAL_UART_IRQHandler+0x17a>
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04f      	beq.n	80051d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa85 	bl	8005646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d141      	bne.n	80051ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800517a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800518e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1d9      	bne.n	800514a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d013      	beq.n	80051c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	4a7e      	ldr	r2, [pc, #504]	@ (800539c <HAL_UART_IRQHandler+0x3e0>)
 80051a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc fdb8 	bl	8001d20 <HAL_DMA_Abort_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e00e      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f994 	bl	80054f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	e00a      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f990 	bl	80054f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e006      	b.n	80051e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f98c 	bl	80054f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051e2:	e175      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	bf00      	nop
    return;
 80051e6:	e173      	b.n	80054d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	f040 814f 	bne.w	8005490 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8148 	beq.w	8005490 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8141 	beq.w	8005490 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	f040 80b6 	bne.w	80053a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8145 	beq.w	80054d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800524e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005252:	429a      	cmp	r2, r3
 8005254:	f080 813e 	bcs.w	80054d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800525e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526a:	f000 8088 	beq.w	800537e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800528c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800529a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800529e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1d9      	bne.n	800526e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e1      	bne.n	80052ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3314      	adds	r3, #20
 80052fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800530c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800531a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800531c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800534c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800534e:	f023 0310 	bic.w	r3, r3, #16
 8005352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005360:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005362:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005366:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e3      	bne.n	800533c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc fc61 	bl	8001c40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800538c:	b29b      	uxth	r3, r3
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	b29b      	uxth	r3, r3
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8b7 	bl	8005508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800539a:	e09b      	b.n	80054d4 <HAL_UART_IRQHandler+0x518>
 800539c:	0800570d 	.word	0x0800570d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 808e 	beq.w	80054d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8089 	beq.w	80054d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80053ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e3      	bne.n	80053c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	623b      	str	r3, [r7, #32]
   return(result);
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005422:	633a      	str	r2, [r7, #48]	@ 0x30
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e3      	bne.n	80053fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	60fb      	str	r3, [r7, #12]
   return(result);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0310 	bic.w	r3, r3, #16
 800545a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005468:	61fa      	str	r2, [r7, #28]
 800546a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	69b9      	ldr	r1, [r7, #24]
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	617b      	str	r3, [r7, #20]
   return(result);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e3      	bne.n	8005444 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f83d 	bl	8005508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800548e:	e023      	b.n	80054d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <HAL_UART_IRQHandler+0x4f4>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f943 	bl	8005734 <UART_Transmit_IT>
    return;
 80054ae:	e014      	b.n	80054da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <HAL_UART_IRQHandler+0x51e>
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f983 	bl	80057d4 <UART_EndTransmit_IT>
    return;
 80054ce:	e004      	b.n	80054da <HAL_UART_IRQHandler+0x51e>
    return;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_UART_IRQHandler+0x51e>
      return;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_UART_IRQHandler+0x51e>
      return;
 80054d8:	bf00      	nop
  }
}
 80054da:	37e8      	adds	r7, #232	@ 0xe8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005530:	e03b      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d037      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fc f937 	bl	80017ac <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	6a3a      	ldr	r2, [r7, #32]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <UART_WaitOnFlagUntilTimeout+0x30>
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e03a      	b.n	80055ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d023      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b80      	cmp	r3, #128	@ 0x80
 8005566:	d020      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d01d      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d116      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f857 	bl	8005646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2208      	movs	r2, #8
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e00f      	b.n	80055ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0b4      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	4613      	mov	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2222      	movs	r2, #34	@ 0x22
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005616:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0220 	orr.w	r2, r2, #32
 8005636:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005646:	b480      	push	{r7}
 8005648:	b095      	sub	sp, #84	@ 0x54
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800566e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	61fb      	str	r3, [r7, #28]
   return(result);
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d119      	bne.n	80056f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 0310 	bic.w	r3, r3, #16
 80056d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056de:	61ba      	str	r2, [r7, #24]
 80056e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6979      	ldr	r1, [r7, #20]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	613b      	str	r3, [r7, #16]
   return(result);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005700:	bf00      	nop
 8005702:	3754      	adds	r7, #84	@ 0x54
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fee4 	bl	80054f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b21      	cmp	r3, #33	@ 0x21
 8005746:	d13e      	bne.n	80057c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005750:	d114      	bne.n	800577c <UART_Transmit_IT+0x48>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d110      	bne.n	800577c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]
 800577a:	e008      	b.n	800578e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6211      	str	r1, [r2, #32]
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29b      	uxth	r3, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	4619      	mov	r1, r3
 800579c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fe73 	bl	80054e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	@ 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b22      	cmp	r3, #34	@ 0x22
 8005816:	f040 80ae 	bne.w	8005976 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005822:	d117      	bne.n	8005854 <UART_Receive_IT+0x50>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d113      	bne.n	8005854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	b29a      	uxth	r2, r3
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	629a      	str	r2, [r3, #40]	@ 0x28
 8005852:	e026      	b.n	80058a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005866:	d007      	beq.n	8005878 <UART_Receive_IT+0x74>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <UART_Receive_IT+0x82>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e008      	b.n	8005898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005892:	b2da      	uxtb	r2, r3
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4619      	mov	r1, r3
 80058b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d15d      	bne.n	8005972 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0220 	bic.w	r2, r2, #32
 80058c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d135      	bne.n	8005968 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	613b      	str	r3, [r7, #16]
   return(result);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f023 0310 	bic.w	r3, r3, #16
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005922:	623a      	str	r2, [r7, #32]
 8005924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	69f9      	ldr	r1, [r7, #28]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e5      	bne.n	8005902 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b10      	cmp	r3, #16
 8005942:	d10a      	bne.n	800595a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fdd1 	bl	8005508 <HAL_UARTEx_RxEventCallback>
 8005966:	e002      	b.n	800596e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fb f8d3 	bl	8000b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	e002      	b.n	8005978 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e000      	b.n	8005978 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005976:	2302      	movs	r3, #2
  }
}
 8005978:	4618      	mov	r0, r3
 800597a:	3730      	adds	r7, #48	@ 0x30
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b0c0      	sub	sp, #256	@ 0x100
 8005986:	af00      	add	r7, sp, #0
 8005988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	68d9      	ldr	r1, [r3, #12]
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	ea40 0301 	orr.w	r3, r0, r1
 80059a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059d8:	f021 010c 	bic.w	r1, r1, #12
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059e6:	430b      	orrs	r3, r1
 80059e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	6999      	ldr	r1, [r3, #24]
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	ea40 0301 	orr.w	r3, r0, r1
 8005a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c4c <UART_SetConfig+0x2cc>)
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d005      	beq.n	8005a20 <UART_SetConfig+0xa0>
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d104      	bne.n	8005a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fd fafe 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8005a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a28:	e003      	b.n	8005a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2a:	f7fd fae5 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8005a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3c:	f040 810c 	bne.w	8005c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	1891      	adds	r1, r2, r2
 8005a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a5a:	415b      	adcs	r3, r3
 8005a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a62:	4621      	mov	r1, r4
 8005a64:	eb12 0801 	adds.w	r8, r2, r1
 8005a68:	4629      	mov	r1, r5
 8005a6a:	eb43 0901 	adc.w	r9, r3, r1
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a82:	4690      	mov	r8, r2
 8005a84:	4699      	mov	r9, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	eb18 0303 	adds.w	r3, r8, r3
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a90:	462b      	mov	r3, r5
 8005a92:	eb49 0303 	adc.w	r3, r9, r3
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aae:	460b      	mov	r3, r1
 8005ab0:	18db      	adds	r3, r3, r3
 8005ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	eb42 0303 	adc.w	r3, r2, r3
 8005aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ac4:	f7fa fbdc 	bl	8000280 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005ace:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	011c      	lsls	r4, r3, #4
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005af0:	415b      	adcs	r3, r3
 8005af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005af8:	4641      	mov	r1, r8
 8005afa:	eb12 0a01 	adds.w	sl, r2, r1
 8005afe:	4649      	mov	r1, r9
 8005b00:	eb43 0b01 	adc.w	fp, r3, r1
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b18:	4692      	mov	sl, r2
 8005b1a:	469b      	mov	fp, r3
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b26:	464b      	mov	r3, r9
 8005b28:	eb4b 0303 	adc.w	r3, fp, r3
 8005b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b44:	460b      	mov	r3, r1
 8005b46:	18db      	adds	r3, r3, r3
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	eb42 0303 	adc.w	r3, r2, r3
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b5a:	f7fa fb91 	bl	8000280 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b66:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2264      	movs	r2, #100	@ 0x64
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b7a:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b88:	441c      	add	r4, r3
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c00:	460b      	mov	r3, r1
 8005c02:	18db      	adds	r3, r3, r3
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c06:	4613      	mov	r3, r2
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c16:	f7fa fb33 	bl	8000280 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2164      	movs	r1, #100	@ 0x64
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	3332      	adds	r3, #50	@ 0x32
 8005c32:	4a08      	ldr	r2, [pc, #32]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 0207 	and.w	r2, r3, #7
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4422      	add	r2, r4
 8005c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c48:	e106      	b.n	8005e58 <UART_SetConfig+0x4d8>
 8005c4a:	bf00      	nop
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	6239      	str	r1, [r7, #32]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	4649      	mov	r1, r9
 8005c80:	eb43 0501 	adc.w	r5, r3, r1
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	00eb      	lsls	r3, r5, #3
 8005c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c92:	00e2      	lsls	r2, r4, #3
 8005c94:	4614      	mov	r4, r2
 8005c96:	461d      	mov	r5, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	18e3      	adds	r3, r4, r3
 8005c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	eb45 0303 	adc.w	r3, r5, r3
 8005ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	008b      	lsls	r3, r1, #2
 8005cca:	4621      	mov	r1, r4
 8005ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	008a      	lsls	r2, r1, #2
 8005cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cd8:	f7fa fad2 	bl	8000280 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4b60      	ldr	r3, [pc, #384]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	011c      	lsls	r4, r3, #4
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	61b9      	str	r1, [r7, #24]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6139      	str	r1, [r7, #16]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d64:	4649      	mov	r1, r9
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	4641      	mov	r1, r8
 8005d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6e:	4641      	mov	r1, r8
 8005d70:	008a      	lsls	r2, r1, #2
 8005d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d76:	f7fa fa83 	bl	8000280 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2301 	umull	r2, r3, r3, r1
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2264      	movs	r2, #100	@ 0x64
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	3332      	adds	r3, #50	@ 0x32
 8005d94:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da0:	441c      	add	r4, r3
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	415b      	adcs	r3, r3
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	1851      	adds	r1, r2, r1
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	414b      	adcs	r3, r1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dd8:	4659      	mov	r1, fp
 8005dda:	00cb      	lsls	r3, r1, #3
 8005ddc:	4651      	mov	r1, sl
 8005dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de2:	4651      	mov	r1, sl
 8005de4:	00ca      	lsls	r2, r1, #3
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	4642      	mov	r2, r8
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df2:	464b      	mov	r3, r9
 8005df4:	460a      	mov	r2, r1
 8005df6:	eb42 0303 	adc.w	r3, r2, r3
 8005dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e14:	4649      	mov	r1, r9
 8005e16:	008b      	lsls	r3, r1, #2
 8005e18:	4641      	mov	r1, r8
 8005e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e1e:	4641      	mov	r1, r8
 8005e20:	008a      	lsls	r2, r1, #2
 8005e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e26:	f7fa fa2b 	bl	8000280 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e30:	fba3 1302 	umull	r1, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2164      	movs	r1, #100	@ 0x64
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	3332      	adds	r3, #50	@ 0x32
 8005e42:	4a08      	ldr	r2, [pc, #32]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4422      	add	r2, r4
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e64:	51eb851f 	.word	0x51eb851f

08005e68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 001c 	add.w	r0, r7, #28
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005e86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005e8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005e8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005e92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005ea2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	b004      	add	sp, #16
 8005ebc:	4770      	bx	lr

08005ebe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2203      	movs	r2, #3
 8005f06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0303 	and.w	r3, r3, #3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f50:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f56:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005f6c:	f023 030f 	bic.w	r3, r3, #15
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	b2db      	uxtb	r3, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3314      	adds	r3, #20
 8005fae:	461a      	mov	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
}  
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005ff2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ff8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0

}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b088      	sub	sp, #32
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800602c:	2310      	movs	r3, #16
 800602e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006030:	2340      	movs	r3, #64	@ 0x40
 8006032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff ff74 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800604a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604e:	2110      	movs	r1, #16
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f9d7 	bl	8006404 <SDMMC_GetCmdResp1>
 8006056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006058:	69fb      	ldr	r3, [r7, #28]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006070:	2311      	movs	r3, #17
 8006072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006074:	2340      	movs	r3, #64	@ 0x40
 8006076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800607c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ff52 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800608e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006092:	2111      	movs	r1, #17
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9b5 	bl	8006404 <SDMMC_GetCmdResp1>
 800609a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609c:	69fb      	ldr	r3, [r7, #28]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b088      	sub	sp, #32
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80060b4:	2312      	movs	r3, #18
 80060b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060b8:	2340      	movs	r3, #64	@ 0x40
 80060ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff30 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d6:	2112      	movs	r1, #18
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f993 	bl	8006404 <SDMMC_GetCmdResp1>
 80060de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060e0:	69fb      	ldr	r3, [r7, #28]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b088      	sub	sp, #32
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80060f8:	2318      	movs	r3, #24
 80060fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060fc:	2340      	movs	r3, #64	@ 0x40
 80060fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ff0e 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611a:	2118      	movs	r1, #24
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f971 	bl	8006404 <SDMMC_GetCmdResp1>
 8006122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006124:	69fb      	ldr	r3, [r7, #28]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b088      	sub	sp, #32
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800613c:	2319      	movs	r3, #25
 800613e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006140:	2340      	movs	r3, #64	@ 0x40
 8006142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800614c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff feec 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	2119      	movs	r1, #25
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f94f 	bl	8006404 <SDMMC_GetCmdResp1>
 8006166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006168:	69fb      	ldr	r3, [r7, #28]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006180:	230c      	movs	r3, #12
 8006182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006184:	2340      	movs	r3, #64	@ 0x40
 8006186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006190:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006192:	f107 0308 	add.w	r3, r7, #8
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff feca 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800619e:	4a05      	ldr	r2, [pc, #20]	@ (80061b4 <SDMMC_CmdStopTransfer+0x40>)
 80061a0:	210c      	movs	r1, #12
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f92e 	bl	8006404 <SDMMC_GetCmdResp1>
 80061a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	05f5e100 	.word	0x05f5e100

080061b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	@ 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80061c8:	2307      	movs	r3, #7
 80061ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff fea6 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80061e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ea:	2107      	movs	r1, #7
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f909 	bl	8006404 <SDMMC_GetCmdResp1>
 80061f2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3728      	adds	r7, #40	@ 0x28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800621a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800621c:	f107 0308 	add.w	r3, r7, #8
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fe85 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fb23 	bl	8006874 <SDMMC_GetCmdError>
 800622e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006230:	69fb      	ldr	r3, [r7, #28]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006242:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006248:	2308      	movs	r3, #8
 800624a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800624c:	2340      	movs	r3, #64	@ 0x40
 800624e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006258:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800625a:	f107 0308 	add.w	r3, r7, #8
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff fe66 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fab6 	bl	80067d8 <SDMMC_GetCmdResp7>
 800626c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800626e:	69fb      	ldr	r3, [r7, #28]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006286:	2337      	movs	r3, #55	@ 0x37
 8006288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800628a:	2340      	movs	r3, #64	@ 0x40
 800628c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fe47 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80062a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a8:	2137      	movs	r1, #55	@ 0x37
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8aa 	bl	8006404 <SDMMC_GetCmdResp1>
 80062b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b2:	69fb      	ldr	r3, [r7, #28]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80062d2:	2329      	movs	r3, #41	@ 0x29
 80062d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062d6:	2340      	movs	r3, #64	@ 0x40
 80062d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fe21 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f9bd 	bl	8006670 <SDMMC_GetCmdResp3>
 80062f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f8:	69fb      	ldr	r3, [r7, #28]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b088      	sub	sp, #32
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800630e:	2302      	movs	r3, #2
 8006310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006312:	23c0      	movs	r3, #192	@ 0xc0
 8006314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800631a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800631e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fe03 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f957 	bl	80065e0 <SDMMC_GetCmdResp2>
 8006332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006334:	69fb      	ldr	r3, [r7, #28]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b088      	sub	sp, #32
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800634c:	2309      	movs	r3, #9
 800634e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006350:	23c0      	movs	r3, #192	@ 0xc0
 8006352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800635c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800635e:	f107 0308 	add.w	r3, r7, #8
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fde4 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f938 	bl	80065e0 <SDMMC_GetCmdResp2>
 8006370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006372:	69fb      	ldr	r3, [r7, #28]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800638a:	2303      	movs	r3, #3
 800638c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800638e:	2340      	movs	r3, #64	@ 0x40
 8006390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800639a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fdc5 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	2103      	movs	r1, #3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f99d 	bl	80066ec <SDMMC_GetCmdResp6>
 80063b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063b4:	69fb      	ldr	r3, [r7, #28]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b088      	sub	sp, #32
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80063cc:	230d      	movs	r3, #13
 80063ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063d0:	2340      	movs	r3, #64	@ 0x40
 80063d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fda4 	bl	8005f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80063ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ee:	210d      	movs	r1, #13
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f807 	bl	8006404 <SDMMC_GetCmdResp1>
 80063f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f8:	69fb      	ldr	r3, [r7, #28]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	460b      	mov	r3, r1
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006412:	4b70      	ldr	r3, [pc, #448]	@ (80065d4 <SDMMC_GetCmdResp1+0x1d0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a70      	ldr	r2, [pc, #448]	@ (80065d8 <SDMMC_GetCmdResp1+0x1d4>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	0a5a      	lsrs	r2, r3, #9
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	61fa      	str	r2, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006430:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006434:	e0c9      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ef      	beq.n	8006426 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ea      	bne.n	8006426 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2204      	movs	r2, #4
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006462:	2304      	movs	r3, #4
 8006464:	e0b1      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006478:	2301      	movs	r3, #1
 800647a:	e0a6      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	22c5      	movs	r2, #197	@ 0xc5
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fd7f 	bl	8005f86 <SDIO_GetCommandResponse>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	4293      	cmp	r3, r2
 8006490:	d001      	beq.n	8006496 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006492:	2301      	movs	r3, #1
 8006494:	e099      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006496:	2100      	movs	r1, #0
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff fd81 	bl	8005fa0 <SDIO_GetResponse>
 800649e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4b4e      	ldr	r3, [pc, #312]	@ (80065dc <SDMMC_GetCmdResp1+0x1d8>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e08d      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da02      	bge.n	80064ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064b8:	e087      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064c4:	2340      	movs	r3, #64	@ 0x40
 80064c6:	e080      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80064d2:	2380      	movs	r3, #128	@ 0x80
 80064d4:	e079      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80064e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064e4:	e071      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80064f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064f4:	e069      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006504:	e061      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006510:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006514:	e059      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006524:	e051      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006534:	e049      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006540:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006544:	e041      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006554:	e039      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006560:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006564:	e031      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006570:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006574:	e029      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006580:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006584:	e021      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006590:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006594:	e019      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80065a4:	e011      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80065b4:	e009      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80065c4:	e001      	b.n	80065ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000050 	.word	0x20000050
 80065d8:	10624dd3 	.word	0x10624dd3
 80065dc:	fdffe008 	.word	0xfdffe008

080065e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006668 <SDMMC_GetCmdResp2+0x88>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <SDMMC_GetCmdResp2+0x8c>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	0a5b      	lsrs	r3, r3, #9
 80065f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
 80065fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	60fa      	str	r2, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006608:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800660c:	e026      	b.n	800665c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006612:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ef      	beq.n	80065fe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1ea      	bne.n	80065fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800663a:	2304      	movs	r3, #4
 800663c:	e00e      	b.n	800665c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006650:	2301      	movs	r3, #1
 8006652:	e003      	b.n	800665c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	22c5      	movs	r2, #197	@ 0xc5
 8006658:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	20000050 	.word	0x20000050
 800666c:	10624dd3 	.word	0x10624dd3

08006670 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006678:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <SDMMC_GetCmdResp3+0x74>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1a      	ldr	r2, [pc, #104]	@ (80066e8 <SDMMC_GetCmdResp3+0x78>)
 800667e:	fba2 2303 	umull	r2, r3, r2, r3
 8006682:	0a5b      	lsrs	r3, r3, #9
 8006684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1e5a      	subs	r2, r3, #1
 8006692:	60fa      	str	r2, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800669c:	e01b      	b.n	80066d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ef      	beq.n	800668e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ea      	bne.n	800668e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2204      	movs	r2, #4
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066ca:	2304      	movs	r3, #4
 80066cc:	e003      	b.n	80066d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	22c5      	movs	r2, #197	@ 0xc5
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20000050 	.word	0x20000050
 80066e8:	10624dd3 	.word	0x10624dd3

080066ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	460b      	mov	r3, r1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066fa:	4b35      	ldr	r3, [pc, #212]	@ (80067d0 <SDMMC_GetCmdResp6+0xe4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a35      	ldr	r2, [pc, #212]	@ (80067d4 <SDMMC_GetCmdResp6+0xe8>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	0a5b      	lsrs	r3, r3, #9
 8006706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	1e5a      	subs	r2, r3, #1
 8006714:	61fa      	str	r2, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800671a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800671e:	e052      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006724:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ef      	beq.n	8006710 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ea      	bne.n	8006710 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2204      	movs	r2, #4
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800674c:	2304      	movs	r3, #4
 800674e:	e03a      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006762:	2301      	movs	r3, #1
 8006764:	e02f      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fc0d 	bl	8005f86 <SDIO_GetCommandResponse>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	4293      	cmp	r3, r2
 8006774:	d001      	beq.n	800677a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006776:	2301      	movs	r3, #1
 8006778:	e025      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22c5      	movs	r2, #197	@ 0xc5
 800677e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006780:	2100      	movs	r1, #0
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fc0c 	bl	8005fa0 <SDIO_GetResponse>
 8006788:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800679e:	2300      	movs	r3, #0
 80067a0:	e011      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067b0:	e009      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067c0:	e001      	b.n	80067c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000050 	.word	0x20000050
 80067d4:	10624dd3 	.word	0x10624dd3

080067d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067e0:	4b22      	ldr	r3, [pc, #136]	@ (800686c <SDMMC_GetCmdResp7+0x94>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a22      	ldr	r2, [pc, #136]	@ (8006870 <SDMMC_GetCmdResp7+0x98>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0a5b      	lsrs	r3, r3, #9
 80067ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f0:	fb02 f303 	mul.w	r3, r2, r3
 80067f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	60fa      	str	r2, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006800:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006804:	e02c      	b.n	8006860 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0ef      	beq.n	80067f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1ea      	bne.n	80067f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006832:	2304      	movs	r3, #4
 8006834:	e014      	b.n	8006860 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006848:	2301      	movs	r3, #1
 800684a:	e009      	b.n	8006860 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2240      	movs	r2, #64	@ 0x40
 800685c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800685e:	2300      	movs	r3, #0
  
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000050 	.word	0x20000050
 8006870:	10624dd3 	.word	0x10624dd3

08006874 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800687c:	4b11      	ldr	r3, [pc, #68]	@ (80068c4 <SDMMC_GetCmdError+0x50>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a11      	ldr	r2, [pc, #68]	@ (80068c8 <SDMMC_GetCmdError+0x54>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	0a5b      	lsrs	r3, r3, #9
 8006888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688c:	fb02 f303 	mul.w	r3, r2, r3
 8006890:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	60fa      	str	r2, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800689c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80068a0:	e009      	b.n	80068b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f1      	beq.n	8006892 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	22c5      	movs	r2, #197	@ 0xc5
 80068b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000050 	.word	0x20000050
 80068c8:	10624dd3 	.word	0x10624dd3

080068cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
extern UART_HandleTypeDef huart3;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80068d0:	490a      	ldr	r1, [pc, #40]	@ (80068fc <MX_FATFS_Init+0x30>)
 80068d2:	480b      	ldr	r0, [pc, #44]	@ (8006900 <MX_FATFS_Init+0x34>)
 80068d4:	f002 fe44 	bl	8009560 <FATFS_LinkDriver>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <MX_FATFS_Init+0x38>)
 80068de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
if (retSD != FR_OK)
 80068e0:	4b08      	ldr	r3, [pc, #32]	@ (8006904 <MX_FATFS_Init+0x38>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <MX_FATFS_Init+0x2a>
{
	HAL_UART_Transmit(&huart3, (uint8_t *)"Fail of link\r\n\a", sizeof("Fail of link\r\n\a"), 0xffff);
 80068e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068ec:	2210      	movs	r2, #16
 80068ee:	4906      	ldr	r1, [pc, #24]	@ (8006908 <MX_FATFS_Init+0x3c>)
 80068f0:	4806      	ldr	r0, [pc, #24]	@ (800690c <MX_FATFS_Init+0x40>)
 80068f2:	f7fe fab3 	bl	8004e5c <HAL_UART_Transmit>
}
  /* USER CODE END Init */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000a4c 	.word	0x20000a4c
 8006900:	0800e3c4 	.word	0x0800e3c4
 8006904:	20000a48 	.word	0x20000a48
 8006908:	0800e174 	.word	0x0800e174
 800690c:	20000668 	.word	0x20000668

08006910 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006914:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006916:	4618      	mov	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <mount_fs>:

/* USER CODE BEGIN Application */
FRESULT mount_fs(FATFS *fs, uint8_t opt)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
	FRESULT res;
	DWORD sizeClaster;
	FATFS* pfs = fs;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	613b      	str	r3, [r7, #16]

	switch (opt) {
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d002      	beq.n	800693c <mount_fs+0x1c>
 8006936:	2b02      	cmp	r3, #2
 8006938:	d025      	beq.n	8006986 <mount_fs+0x66>
			}

			UART_Printf("Unmount was success\r\n");
			break;
		default:
			break;
 800693a:	e038      	b.n	80069ae <mount_fs+0x8e>
			res = f_mount(fs, (TCHAR const*)SDPath, FS_MOUNT);
 800693c:	2201      	movs	r2, #1
 800693e:	491e      	ldr	r1, [pc, #120]	@ (80069b8 <mount_fs+0x98>)
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 f883 	bl	8008a4c <f_mount>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <mount_fs+0x3a>
				UART_Printf("Fail of mount\r\n\a");
 8006950:	481a      	ldr	r0, [pc, #104]	@ (80069bc <mount_fs+0x9c>)
 8006952:	f7fa fab9 	bl	8000ec8 <UART_Printf>
				return res;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	e02a      	b.n	80069b0 <mount_fs+0x90>
			UART_Printf("Mount success\r\n");
 800695a:	4819      	ldr	r0, [pc, #100]	@ (80069c0 <mount_fs+0xa0>)
 800695c:	f7fa fab4 	bl	8000ec8 <UART_Printf>
			res = f_getfree((TCHAR const*)SDPath, &sizeClaster, &pfs);
 8006960:	f107 0210 	add.w	r2, r7, #16
 8006964:	f107 030c 	add.w	r3, r7, #12
 8006968:	4619      	mov	r1, r3
 800696a:	4813      	ldr	r0, [pc, #76]	@ (80069b8 <mount_fs+0x98>)
 800696c:	f002 fcef 	bl	800934e <f_getfree>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d118      	bne.n	80069ac <mount_fs+0x8c>
				UART_Printf("free size = %d\r\n", sizeClaster);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4619      	mov	r1, r3
 800697e:	4811      	ldr	r0, [pc, #68]	@ (80069c4 <mount_fs+0xa4>)
 8006980:	f7fa faa2 	bl	8000ec8 <UART_Printf>
			break;
 8006984:	e012      	b.n	80069ac <mount_fs+0x8c>
			res = f_mount(NULL, (TCHAR const*)SDPath, FS_MOUNT);
 8006986:	2201      	movs	r2, #1
 8006988:	490b      	ldr	r1, [pc, #44]	@ (80069b8 <mount_fs+0x98>)
 800698a:	2000      	movs	r0, #0
 800698c:	f002 f85e 	bl	8008a4c <f_mount>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <mount_fs+0x84>
				UART_Printf("Fail of unmount\r\n\a");
 800699a:	480b      	ldr	r0, [pc, #44]	@ (80069c8 <mount_fs+0xa8>)
 800699c:	f7fa fa94 	bl	8000ec8 <UART_Printf>
				return res;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	e005      	b.n	80069b0 <mount_fs+0x90>
			UART_Printf("Unmount was success\r\n");
 80069a4:	4809      	ldr	r0, [pc, #36]	@ (80069cc <mount_fs+0xac>)
 80069a6:	f7fa fa8f 	bl	8000ec8 <UART_Printf>
			break;
 80069aa:	e000      	b.n	80069ae <mount_fs+0x8e>
			break;
 80069ac:	bf00      	nop
	}

	return res;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000a4c 	.word	0x20000a4c
 80069bc:	0800e184 	.word	0x0800e184
 80069c0:	0800e198 	.word	0x0800e198
 80069c4:	0800e1a8 	.word	0x0800e1a8
 80069c8:	0800e1bc 	.word	0x0800e1bc
 80069cc:	0800e1d0 	.word	0x0800e1d0

080069d0 <write_fs>:

FRESULT write_fs(uint8_t *name, uint8_t *text)
{
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80069dc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80069e0:	6018      	str	r0, [r3, #0]
 80069e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80069e6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80069ea:	6019      	str	r1, [r3, #0]
	FRESULT res;

    FIL logFile;

    res = f_open(&logFile, (char *)name, FA_OPEN_APPEND | FA_WRITE);
 80069ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80069f0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80069f4:	f107 000c 	add.w	r0, r7, #12
 80069f8:	2232      	movs	r2, #50	@ 0x32
 80069fa:	6819      	ldr	r1, [r3, #0]
 80069fc:	f002 f88a 	bl	8008b14 <f_open>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8006a06:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <write_fs+0x4a>
        UART_Printf("f_open() failed, res = %d\r\n", res);
 8006a0e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a12:	4619      	mov	r1, r3
 8006a14:	4829      	ldr	r0, [pc, #164]	@ (8006abc <write_fs+0xec>)
 8006a16:	f7fa fa57 	bl	8000ec8 <UART_Printf>
    }

    unsigned int bytesWritten;
    res = f_write(&logFile, text, strlen(text), &bytesWritten);
 8006a1a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006a1e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	f7f9 fbd4 	bl	80001d0 <strlen>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	f107 0308 	add.w	r3, r7, #8
 8006a2e:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8006a32:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8006a36:	f107 000c 	add.w	r0, r7, #12
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	6809      	ldr	r1, [r1, #0]
 8006a3e:	f002 fa2a 	bl	8008e96 <f_write>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8006a48:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <write_fs+0x8c>
        UART_Printf("f_write() failed, res = %d\r\n", res);
 8006a50:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a54:	4619      	mov	r1, r3
 8006a56:	481a      	ldr	r0, [pc, #104]	@ (8006ac0 <write_fs+0xf0>)
 8006a58:	f7fa fa36 	bl	8000ec8 <UART_Printf>
    }

    res = f_close(&logFile);
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	4618      	mov	r0, r3
 8006a62:	f002 fc45 	bl	80092f0 <f_close>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8006a6c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <write_fs+0xb0>
        UART_Printf("f_close() failed, res = %d\r\n", res);
 8006a74:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4812      	ldr	r0, [pc, #72]	@ (8006ac4 <write_fs+0xf4>)
 8006a7c:	f7fa fa24 	bl	8000ec8 <UART_Printf>
    }

    UART_Printf("In file '");
 8006a80:	4811      	ldr	r0, [pc, #68]	@ (8006ac8 <write_fs+0xf8>)
 8006a82:	f7fa fa21 	bl	8000ec8 <UART_Printf>
    UART_Printf((char *)name);
 8006a86:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006a8a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	f7fa fa1a 	bl	8000ec8 <UART_Printf>
    UART_Printf("' was writhed %u letters\r\n", strlen(text));
 8006a94:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006a98:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f7f9 fb97 	bl	80001d0 <strlen>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4809      	ldr	r0, [pc, #36]	@ (8006acc <write_fs+0xfc>)
 8006aa8:	f7fa fa0e 	bl	8000ec8 <UART_Printf>

    return res;
 8006aac:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	0800e1e8 	.word	0x0800e1e8
 8006ac0:	0800e204 	.word	0x0800e204
 8006ac4:	0800e224 	.word	0x0800e224
 8006ac8:	0800e244 	.word	0x0800e244
 8006acc:	0800e250 	.word	0x0800e250

08006ad0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006ada:	f000 f888 	bl	8006bee <BSP_SD_IsDetected>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d001      	beq.n	8006ae8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e005      	b.n	8006af4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006ae8:	4804      	ldr	r0, [pc, #16]	@ (8006afc <BSP_SD_Init+0x2c>)
 8006aea:	f7fc fb8e 	bl	800320a <HAL_SD_Init>
 8006aee:	4603      	mov	r3, r0
 8006af0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006af2:	79fb      	ldrb	r3, [r7, #7]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	200004dc 	.word	0x200004dc

08006b00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	4806      	ldr	r0, [pc, #24]	@ (8006b30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006b18:	f7fc fc28 	bl	800336c <HAL_SD_ReadBlocks_DMA>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	200004dc 	.word	0x200004dc

08006b34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68f9      	ldr	r1, [r7, #12]
 8006b4a:	4806      	ldr	r0, [pc, #24]	@ (8006b64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006b4c:	f7fc fcf0 	bl	8003530 <HAL_SD_WriteBlocks_DMA>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	200004dc 	.word	0x200004dc

08006b68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006b6c:	4805      	ldr	r0, [pc, #20]	@ (8006b84 <BSP_SD_GetCardState+0x1c>)
 8006b6e:	f7fd f925 	bl	8003dbc <HAL_SD_GetCardState>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	200004dc 	.word	0x200004dc

08006b88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4803      	ldr	r0, [pc, #12]	@ (8006ba0 <BSP_SD_GetCardInfo+0x18>)
 8006b94:	f7fd f8e6 	bl	8003d64 <HAL_SD_GetCardInfo>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	200004dc 	.word	0x200004dc

08006ba4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006bac:	f000 f818 	bl	8006be0 <BSP_SD_AbortCallback>
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006bc0:	f000 f998 	bl	8006ef4 <BSP_SD_WriteCpltCallback>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006bd4:	f000 f9a0 	bl	8006f18 <BSP_SD_ReadCpltCallback>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0

}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	b2db      	uxtb	r3, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8006c10:	f002 fdac 	bl	800976c <osKernelGetTickCount>
 8006c14:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8006c16:	e006      	b.n	8006c26 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c18:	f7ff ffa6 	bl	8006b68 <BSP_SD_GetCardState>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e009      	b.n	8006c3a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8006c26:	f002 fda1 	bl	800976c <osKernelGetTickCount>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d8f0      	bhi.n	8006c18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <SD_CheckStatus+0x38>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c54:	f7ff ff88 	bl	8006b68 <BSP_SD_GetCardState>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d107      	bne.n	8006c6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006c5e:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <SD_CheckStatus+0x38>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <SD_CheckStatus+0x38>)
 8006c6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006c6e:	4b03      	ldr	r3, [pc, #12]	@ (8006c7c <SD_CheckStatus+0x38>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b2db      	uxtb	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000059 	.word	0x20000059

08006c80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cfc <SD_initialize+0x7c>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006c90:	f002 fd24 	bl	80096dc <osKernelGetState>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d129      	bne.n	8006cee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006c9a:	f7ff ff19 	bl	8006ad0 <BSP_SD_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d107      	bne.n	8006cb4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff ffcc 	bl	8006c44 <SD_CheckStatus>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b12      	ldr	r3, [pc, #72]	@ (8006cfc <SD_initialize+0x7c>)
 8006cb2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006cb4:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <SD_initialize+0x7c>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d017      	beq.n	8006cee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006cbe:	4b10      	ldr	r3, [pc, #64]	@ (8006d00 <SD_initialize+0x80>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d107      	bne.n	8006cd6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2102      	movs	r1, #2
 8006cca:	200a      	movs	r0, #10
 8006ccc:	f002 ff54 	bl	8009b78 <osMessageQueueNew>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8006d00 <SD_initialize+0x80>)
 8006cd4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <SD_initialize+0x80>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006cde:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <SD_initialize+0x7c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <SD_initialize+0x7c>)
 8006cec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006cee:	4b03      	ldr	r3, [pc, #12]	@ (8006cfc <SD_initialize+0x7c>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b2db      	uxtb	r3, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000059 	.word	0x20000059
 8006d00:	20000a50 	.word	0x20000a50

08006d04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff ff97 	bl	8006c44 <SD_CheckStatus>
 8006d16:	4603      	mov	r3, r0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d34:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006d38:	f7ff ff66 	bl	8006c08 <SD_CheckStatusWithTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da01      	bge.n	8006d46 <SD_read+0x26>
  {
    return res;
 8006d42:	7ffb      	ldrb	r3, [r7, #31]
 8006d44:	e02f      	b.n	8006da6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f7ff fed8 	bl	8006b00 <BSP_SD_ReadBlocks_DMA>
 8006d50:	4603      	mov	r3, r0
 8006d52:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8006d54:	7fbb      	ldrb	r3, [r7, #30]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d124      	bne.n	8006da4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006d5a:	4b15      	ldr	r3, [pc, #84]	@ (8006db0 <SD_read+0x90>)
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f107 0112 	add.w	r1, r7, #18
 8006d62:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006d66:	2200      	movs	r2, #0
 8006d68:	f002 ffda 	bl	8009d20 <osMessageQueueGet>
 8006d6c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d117      	bne.n	8006da4 <SD_read+0x84>
 8006d74:	8a7b      	ldrh	r3, [r7, #18]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d114      	bne.n	8006da4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006d7a:	f002 fcf7 	bl	800976c <osKernelGetTickCount>
 8006d7e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006d80:	e007      	b.n	8006d92 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006d82:	f7ff fef1 	bl	8006b68 <BSP_SD_GetCardState>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <SD_read+0x72>
              {
                res = RES_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006d90:	e008      	b.n	8006da4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006d92:	f002 fceb 	bl	800976c <osKernelGetTickCount>
 8006d96:	4602      	mov	r2, r0
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d9ee      	bls.n	8006d82 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006da4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000a50 	.word	0x20000a50

08006db4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006dc8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006dcc:	f7ff ff1c 	bl	8006c08 <SD_CheckStatusWithTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da01      	bge.n	8006dda <SD_write+0x26>
  {
    return res;
 8006dd6:	7ffb      	ldrb	r3, [r7, #31]
 8006dd8:	e02d      	b.n	8006e36 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	68b8      	ldr	r0, [r7, #8]
 8006de0:	f7ff fea8 	bl	8006b34 <BSP_SD_WriteBlocks_DMA>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <SD_write+0x8c>)
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f107 0112 	add.w	r1, r7, #18
 8006df2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006df6:	2200      	movs	r2, #0
 8006df8:	f002 ff92 	bl	8009d20 <osMessageQueueGet>
 8006dfc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d117      	bne.n	8006e34 <SD_write+0x80>
 8006e04:	8a7b      	ldrh	r3, [r7, #18]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d114      	bne.n	8006e34 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006e0a:	f002 fcaf 	bl	800976c <osKernelGetTickCount>
 8006e0e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006e10:	e007      	b.n	8006e22 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006e12:	f7ff fea9 	bl	8006b68 <BSP_SD_GetCardState>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <SD_write+0x6e>
          {
            res = RES_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]
            break;
 8006e20:	e008      	b.n	8006e34 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006e22:	f002 fca3 	bl	800976c <osKernelGetTickCount>
 8006e26:	4602      	mov	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d9ee      	bls.n	8006e12 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8006e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000a50 	.word	0x20000a50

08006e44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08c      	sub	sp, #48	@ 0x30
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	603a      	str	r2, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
 8006e50:	460b      	mov	r3, r1
 8006e52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006e5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <SD_ioctl+0xac>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <SD_ioctl+0x28>
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e03c      	b.n	8006ee6 <SD_ioctl+0xa2>

  switch (cmd)
 8006e6c:	79bb      	ldrb	r3, [r7, #6]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d834      	bhi.n	8006edc <SD_ioctl+0x98>
 8006e72:	a201      	add	r2, pc, #4	@ (adr r2, 8006e78 <SD_ioctl+0x34>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e91 	.word	0x08006e91
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006ec3 	.word	0x08006ec3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006e8e:	e028      	b.n	8006ee2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fe77 	bl	8006b88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006ea6:	e01c      	b.n	8006ee2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ea8:	f107 030c 	add.w	r3, r7, #12
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff fe6b 	bl	8006b88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006ec0:	e00f      	b.n	8006ee2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ec2:	f107 030c 	add.w	r3, r7, #12
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff fe5e 	bl	8006b88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	0a5a      	lsrs	r2, r3, #9
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006eda:	e002      	b.n	8006ee2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3730      	adds	r7, #48	@ 0x30
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000059 	.word	0x20000059

08006ef4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8006efa:	2302      	movs	r3, #2
 8006efc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006efe:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <BSP_SD_WriteCpltCallback+0x20>)
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	1db9      	adds	r1, r7, #6
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	f002 feaa 	bl	8009c60 <osMessageQueuePut>
#endif
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000a50 	.word	0x20000a50

08006f18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006f22:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <BSP_SD_ReadCpltCallback+0x20>)
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	1db9      	adds	r1, r7, #6
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f002 fe98 	bl	8009c60 <osMessageQueuePut>
#endif
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000a50 	.word	0x20000a50

08006f3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	4a08      	ldr	r2, [pc, #32]	@ (8006f6c <disk_status+0x30>)
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	79fa      	ldrb	r2, [r7, #7]
 8006f54:	4905      	ldr	r1, [pc, #20]	@ (8006f6c <disk_status+0x30>)
 8006f56:	440a      	add	r2, r1
 8006f58:	7a12      	ldrb	r2, [r2, #8]
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4798      	blx	r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000a7c 	.word	0x20000a7c

08006f70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	4a0e      	ldr	r2, [pc, #56]	@ (8006fbc <disk_initialize+0x4c>)
 8006f82:	5cd3      	ldrb	r3, [r2, r3]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d114      	bne.n	8006fb2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006fbc <disk_initialize+0x4c>)
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	79fa      	ldrb	r2, [r7, #7]
 8006f96:	4909      	ldr	r1, [pc, #36]	@ (8006fbc <disk_initialize+0x4c>)
 8006f98:	440a      	add	r2, r1
 8006f9a:	7a12      	ldrb	r2, [r2, #8]
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4a03      	ldr	r2, [pc, #12]	@ (8006fbc <disk_initialize+0x4c>)
 8006fae:	2101      	movs	r1, #1
 8006fb0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000a7c 	.word	0x20000a7c

08006fc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ffc <disk_read+0x3c>)
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	689c      	ldr	r4, [r3, #8]
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4a07      	ldr	r2, [pc, #28]	@ (8006ffc <disk_read+0x3c>)
 8006fe0:	4413      	add	r3, r2
 8006fe2:	7a18      	ldrb	r0, [r3, #8]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	47a0      	blx	r4
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000a7c 	.word	0x20000a7c

08007000 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007000:	b590      	push	{r4, r7, lr}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <disk_write+0x3c>)
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68dc      	ldr	r4, [r3, #12]
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	4a07      	ldr	r2, [pc, #28]	@ (800703c <disk_write+0x3c>)
 8007020:	4413      	add	r3, r2
 8007022:	7a18      	ldrb	r0, [r3, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	47a0      	blx	r4
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	bd90      	pop	{r4, r7, pc}
 800703a:	bf00      	nop
 800703c:	20000a7c 	.word	0x20000a7c

08007040 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	603a      	str	r2, [r7, #0]
 800704a:	71fb      	strb	r3, [r7, #7]
 800704c:	460b      	mov	r3, r1
 800704e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <disk_ioctl+0x38>)
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	79fa      	ldrb	r2, [r7, #7]
 800705e:	4906      	ldr	r1, [pc, #24]	@ (8007078 <disk_ioctl+0x38>)
 8007060:	440a      	add	r2, r1
 8007062:	7a10      	ldrb	r0, [r2, #8]
 8007064:	79b9      	ldrb	r1, [r7, #6]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4798      	blx	r3
 800706a:	4603      	mov	r3, r0
 800706c:	73fb      	strb	r3, [r7, #15]
  return res;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000a7c 	.word	0x20000a7c

0800707c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b21a      	sxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b21b      	sxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b21b      	sxth	r3, r3
 800709c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800709e:	89fb      	ldrh	r3, [r7, #14]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3303      	adds	r3, #3
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	021b      	lsls	r3, r3, #8
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	3202      	adds	r2, #2
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	3201      	adds	r2, #1
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80070e4:	68fb      	ldr	r3, [r7, #12]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	887a      	ldrh	r2, [r7, #2]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	887b      	ldrh	r3, [r7, #2]
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	887a      	ldrh	r2, [r7, #2]
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	1c53      	adds	r3, r2, #1
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	6179      	str	r1, [r7, #20]
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	607b      	str	r3, [r7, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f1      	bne.n	800719a <mem_cpy+0x1a>
	}
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	617a      	str	r2, [r7, #20]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f3      	bne.n	80071d2 <mem_set+0x10>
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80071f8:	b480      	push	{r7}
 80071fa:	b089      	sub	sp, #36	@ 0x24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	61ba      	str	r2, [r7, #24]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	1acb      	subs	r3, r1, r3
 8007224:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3b01      	subs	r3, #1
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <mem_cmp+0x40>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0eb      	beq.n	8007210 <mem_cmp+0x18>

	return r;
 8007238:	697b      	ldr	r3, [r7, #20]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3724      	adds	r7, #36	@ 0x24
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007250:	e002      	b.n	8007258 <chk_chr+0x12>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3301      	adds	r3, #1
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <chk_chr+0x26>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	4293      	cmp	r3, r2
 800726a:	d1f2      	bne.n	8007252 <chk_chr+0xc>
	return *str;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	781b      	ldrb	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <lock_fs+0x22>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	4618      	mov	r0, r3
 8007290:	f002 f99c 	bl	80095cc <ff_req_grant>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <lock_fs+0x22>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <lock_fs+0x24>
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00d      	beq.n	80072d6 <unlock_fs+0x2e>
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	2b0c      	cmp	r3, #12
 80072be:	d00a      	beq.n	80072d6 <unlock_fs+0x2e>
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b0b      	cmp	r3, #11
 80072c4:	d007      	beq.n	80072d6 <unlock_fs+0x2e>
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d004      	beq.n	80072d6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f002 f990 	bl	80095f6 <ff_rel_grant>
	}
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072ea:	2300      	movs	r3, #0
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e029      	b.n	8007348 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80072f4:	4a27      	ldr	r2, [pc, #156]	@ (8007394 <chk_lock+0xb4>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	4413      	add	r3, r2
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01d      	beq.n	800733e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007302:	4a24      	ldr	r2, [pc, #144]	@ (8007394 <chk_lock+0xb4>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d116      	bne.n	8007342 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007314:	4a1f      	ldr	r2, [pc, #124]	@ (8007394 <chk_lock+0xb4>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	4413      	add	r3, r2
 800731c:	3304      	adds	r3, #4
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007324:	429a      	cmp	r2, r3
 8007326:	d10c      	bne.n	8007342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007328:	4a1a      	ldr	r2, [pc, #104]	@ (8007394 <chk_lock+0xb4>)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4413      	add	r3, r2
 8007330:	3308      	adds	r3, #8
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007338:	429a      	cmp	r2, r3
 800733a:	d102      	bne.n	8007342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800733c:	e007      	b.n	800734e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d9d2      	bls.n	80072f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d109      	bne.n	8007368 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <chk_lock+0x80>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d101      	bne.n	8007364 <chk_lock+0x84>
 8007360:	2300      	movs	r3, #0
 8007362:	e010      	b.n	8007386 <chk_lock+0xa6>
 8007364:	2312      	movs	r3, #18
 8007366:	e00e      	b.n	8007386 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d108      	bne.n	8007380 <chk_lock+0xa0>
 800736e:	4a09      	ldr	r2, [pc, #36]	@ (8007394 <chk_lock+0xb4>)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	4413      	add	r3, r2
 8007376:	330c      	adds	r3, #12
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800737e:	d101      	bne.n	8007384 <chk_lock+0xa4>
 8007380:	2310      	movs	r3, #16
 8007382:	e000      	b.n	8007386 <chk_lock+0xa6>
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000a5c 	.word	0x20000a5c

08007398 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800739e:	2300      	movs	r3, #0
 80073a0:	607b      	str	r3, [r7, #4]
 80073a2:	e002      	b.n	80073aa <enq_lock+0x12>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3301      	adds	r3, #1
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d806      	bhi.n	80073be <enq_lock+0x26>
 80073b0:	4a09      	ldr	r2, [pc, #36]	@ (80073d8 <enq_lock+0x40>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	4413      	add	r3, r2
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f2      	bne.n	80073a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000a5c 	.word	0x20000a5c

080073dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	e01f      	b.n	800742c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80073ec:	4a41      	ldr	r2, [pc, #260]	@ (80074f4 <inc_lock+0x118>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d113      	bne.n	8007426 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80073fe:	4a3d      	ldr	r2, [pc, #244]	@ (80074f4 <inc_lock+0x118>)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	3304      	adds	r3, #4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800740e:	429a      	cmp	r2, r3
 8007410:	d109      	bne.n	8007426 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007412:	4a38      	ldr	r2, [pc, #224]	@ (80074f4 <inc_lock+0x118>)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	4413      	add	r3, r2
 800741a:	3308      	adds	r3, #8
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007422:	429a      	cmp	r2, r3
 8007424:	d006      	beq.n	8007434 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d9dc      	bls.n	80073ec <inc_lock+0x10>
 8007432:	e000      	b.n	8007436 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007434:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d132      	bne.n	80074a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <inc_lock+0x6c>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d806      	bhi.n	800745c <inc_lock+0x80>
 800744e:	4a29      	ldr	r2, [pc, #164]	@ (80074f4 <inc_lock+0x118>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	4413      	add	r3, r2
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f2      	bne.n	8007442 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d101      	bne.n	8007466 <inc_lock+0x8a>
 8007462:	2300      	movs	r3, #0
 8007464:	e040      	b.n	80074e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4922      	ldr	r1, [pc, #136]	@ (80074f4 <inc_lock+0x118>)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	440b      	add	r3, r1
 8007472:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	491e      	ldr	r1, [pc, #120]	@ (80074f4 <inc_lock+0x118>)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	440b      	add	r3, r1
 8007480:	3304      	adds	r3, #4
 8007482:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	491a      	ldr	r1, [pc, #104]	@ (80074f4 <inc_lock+0x118>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	440b      	add	r3, r1
 8007490:	3308      	adds	r3, #8
 8007492:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007494:	4a17      	ldr	r2, [pc, #92]	@ (80074f4 <inc_lock+0x118>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4413      	add	r3, r2
 800749c:	330c      	adds	r3, #12
 800749e:	2200      	movs	r2, #0
 80074a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d009      	beq.n	80074bc <inc_lock+0xe0>
 80074a8:	4a12      	ldr	r2, [pc, #72]	@ (80074f4 <inc_lock+0x118>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	4413      	add	r3, r2
 80074b0:	330c      	adds	r3, #12
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <inc_lock+0xe0>
 80074b8:	2300      	movs	r3, #0
 80074ba:	e015      	b.n	80074e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <inc_lock+0xf8>
 80074c2:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <inc_lock+0x118>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	4413      	add	r3, r2
 80074ca:	330c      	adds	r3, #12
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	e001      	b.n	80074d8 <inc_lock+0xfc>
 80074d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074d8:	4906      	ldr	r1, [pc, #24]	@ (80074f4 <inc_lock+0x118>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	440b      	add	r3, r1
 80074e0:	330c      	adds	r3, #12
 80074e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000a5c 	.word	0x20000a5c

080074f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d825      	bhi.n	8007558 <dec_lock+0x60>
		n = Files[i].ctr;
 800750c:	4a17      	ldr	r2, [pc, #92]	@ (800756c <dec_lock+0x74>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	4413      	add	r3, r2
 8007514:	330c      	adds	r3, #12
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800751a:	89fb      	ldrh	r3, [r7, #14]
 800751c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007520:	d101      	bne.n	8007526 <dec_lock+0x2e>
 8007522:	2300      	movs	r3, #0
 8007524:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007526:	89fb      	ldrh	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <dec_lock+0x3a>
 800752c:	89fb      	ldrh	r3, [r7, #14]
 800752e:	3b01      	subs	r3, #1
 8007530:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007532:	4a0e      	ldr	r2, [pc, #56]	@ (800756c <dec_lock+0x74>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	4413      	add	r3, r2
 800753a:	330c      	adds	r3, #12
 800753c:	89fa      	ldrh	r2, [r7, #14]
 800753e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007540:	89fb      	ldrh	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <dec_lock+0x5a>
 8007546:	4a09      	ldr	r2, [pc, #36]	@ (800756c <dec_lock+0x74>)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4413      	add	r3, r2
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	737b      	strb	r3, [r7, #13]
 8007556:	e001      	b.n	800755c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007558:	2302      	movs	r3, #2
 800755a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800755c:	7b7b      	ldrb	r3, [r7, #13]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000a5c 	.word	0x20000a5c

08007570 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e010      	b.n	80075a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800757e:	4a0d      	ldr	r2, [pc, #52]	@ (80075b4 <clear_lock+0x44>)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	4413      	add	r3, r2
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d105      	bne.n	800759a <clear_lock+0x2a>
 800758e:	4a09      	ldr	r2, [pc, #36]	@ (80075b4 <clear_lock+0x44>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	4413      	add	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d9eb      	bls.n	800757e <clear_lock+0xe>
	}
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000a5c 	.word	0x20000a5c

080075b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	78db      	ldrb	r3, [r3, #3]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d034      	beq.n	8007636 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7858      	ldrb	r0, [r3, #1]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80075dc:	2301      	movs	r3, #1
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	f7ff fd0e 	bl	8007000 <disk_write>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
 80075ee:	e022      	b.n	8007636 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	1ad2      	subs	r2, r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	429a      	cmp	r2, r3
 8007604:	d217      	bcs.n	8007636 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	789b      	ldrb	r3, [r3, #2]
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e010      	b.n	8007630 <sync_window+0x78>
					wsect += fs->fsize;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4413      	add	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7858      	ldrb	r0, [r3, #1]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007622:	2301      	movs	r3, #1
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	f7ff fceb 	bl	8007000 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3b01      	subs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d8eb      	bhi.n	800760e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d01b      	beq.n	8007690 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ffad 	bl	80075b8 <sync_window>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d113      	bne.n	8007690 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7858      	ldrb	r0, [r3, #1]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007672:	2301      	movs	r3, #1
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	f7ff fca3 	bl	8006fc0 <disk_read>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff87 	bl	80075b8 <sync_window>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d158      	bne.n	8007766 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d148      	bne.n	800774e <sync_fs+0xb2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d144      	bne.n	800774e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3334      	adds	r3, #52	@ 0x34
 80076c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fd77 	bl	80071c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3334      	adds	r3, #52	@ 0x34
 80076d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80076dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fd06 	bl	80070f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3334      	adds	r3, #52	@ 0x34
 80076ea:	4921      	ldr	r1, [pc, #132]	@ (8007770 <sync_fs+0xd4>)
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fd1b 	bl	8007128 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3334      	adds	r3, #52	@ 0x34
 80076f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80076fa:	491e      	ldr	r1, [pc, #120]	@ (8007774 <sync_fs+0xd8>)
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fd13 	bl	8007128 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3334      	adds	r3, #52	@ 0x34
 8007706:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7ff fd09 	bl	8007128 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3334      	adds	r3, #52	@ 0x34
 800771a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f7ff fcff 	bl	8007128 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7858      	ldrb	r0, [r3, #1]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007742:	2301      	movs	r3, #1
 8007744:	f7ff fc5c 	bl	8007000 <disk_write>
			fs->fsi_flag = 0;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fc72 	bl	8007040 <disk_ioctl>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <sync_fs+0xca>
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	41615252 	.word	0x41615252
 8007774:	61417272 	.word	0x61417272

08007778 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	3b02      	subs	r3, #2
 8007786:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	3b02      	subs	r3, #2
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d301      	bcc.n	8007798 <clust2sect+0x20>
 8007794:	2300      	movs	r3, #0
 8007796:	e008      	b.n	80077aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	895b      	ldrh	r3, [r3, #10]
 800779c:	461a      	mov	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	fb03 f202 	mul.w	r2, r3, r2
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	4413      	add	r3, r2
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d904      	bls.n	80077d6 <get_fat+0x20>
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80077d6:	2301      	movs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e08e      	b.n	80078fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80077dc:	f04f 33ff 	mov.w	r3, #4294967295
 80077e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d061      	beq.n	80078ae <get_fat+0xf8>
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	dc7b      	bgt.n	80078e6 <get_fat+0x130>
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d002      	beq.n	80077f8 <get_fat+0x42>
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d041      	beq.n	800787a <get_fat+0xc4>
 80077f6:	e076      	b.n	80078e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	0a5b      	lsrs	r3, r3, #9
 800780e:	4413      	add	r3, r2
 8007810:	4619      	mov	r1, r3
 8007812:	6938      	ldr	r0, [r7, #16]
 8007814:	f7ff ff14 	bl	8007640 <move_window>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d166      	bne.n	80078ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	60fa      	str	r2, [r7, #12]
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007830:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	0a5b      	lsrs	r3, r3, #9
 800783a:	4413      	add	r3, r2
 800783c:	4619      	mov	r1, r3
 800783e:	6938      	ldr	r0, [r7, #16]
 8007840:	f7ff fefe 	bl	8007640 <move_window>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d152      	bne.n	80078f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4413      	add	r3, r2
 8007854:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4313      	orrs	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <get_fat+0xba>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	091b      	lsrs	r3, r3, #4
 800786e:	e002      	b.n	8007876 <get_fat+0xc0>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007876:	617b      	str	r3, [r7, #20]
			break;
 8007878:	e03f      	b.n	80078fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	4413      	add	r3, r2
 8007884:	4619      	mov	r1, r3
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f7ff feda 	bl	8007640 <move_window>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d130      	bne.n	80078f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80078a0:	4413      	add	r3, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fbea 	bl	800707c <ld_word>
 80078a8:	4603      	mov	r3, r0
 80078aa:	617b      	str	r3, [r7, #20]
			break;
 80078ac:	e025      	b.n	80078fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	09db      	lsrs	r3, r3, #7
 80078b6:	4413      	add	r3, r2
 80078b8:	4619      	mov	r1, r3
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f7ff fec0 	bl	8007640 <move_window>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d118      	bne.n	80078f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80078d4:	4413      	add	r3, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fbe8 	bl	80070ac <ld_dword>
 80078dc:	4603      	mov	r3, r0
 80078de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078e2:	617b      	str	r3, [r7, #20]
			break;
 80078e4:	e009      	b.n	80078fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078e6:	2301      	movs	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e006      	b.n	80078fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078ec:	bf00      	nop
 80078ee:	e004      	b.n	80078fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078f0:	bf00      	nop
 80078f2:	e002      	b.n	80078fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078f8:	bf00      	nop
		}
	}

	return val;
 80078fa:	697b      	ldr	r3, [r7, #20]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b089      	sub	sp, #36	@ 0x24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007910:	2302      	movs	r3, #2
 8007912:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b01      	cmp	r3, #1
 8007918:	f240 80d9 	bls.w	8007ace <put_fat+0x1ca>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	f080 80d3 	bcs.w	8007ace <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b03      	cmp	r3, #3
 800792e:	f000 8096 	beq.w	8007a5e <put_fat+0x15a>
 8007932:	2b03      	cmp	r3, #3
 8007934:	f300 80cb 	bgt.w	8007ace <put_fat+0x1ca>
 8007938:	2b01      	cmp	r3, #1
 800793a:	d002      	beq.n	8007942 <put_fat+0x3e>
 800793c:	2b02      	cmp	r3, #2
 800793e:	d06e      	beq.n	8007a1e <put_fat+0x11a>
 8007940:	e0c5      	b.n	8007ace <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	0a5b      	lsrs	r3, r3, #9
 8007958:	4413      	add	r3, r2
 800795a:	4619      	mov	r1, r3
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff fe6f 	bl	8007640 <move_window>
 8007962:	4603      	mov	r3, r0
 8007964:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007966:	7ffb      	ldrb	r3, [r7, #31]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f040 80a9 	bne.w	8007ac0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	1c59      	adds	r1, r3, #1
 8007978:	61b9      	str	r1, [r7, #24]
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	4413      	add	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00d      	beq.n	80079a8 <put_fat+0xa4>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b25b      	sxtb	r3, r3
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	b25a      	sxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	e001      	b.n	80079ac <put_fat+0xa8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	0a5b      	lsrs	r3, r3, #9
 80079be:	4413      	add	r3, r2
 80079c0:	4619      	mov	r1, r3
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fe3c 	bl	8007640 <move_window>
 80079c8:	4603      	mov	r3, r0
 80079ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079cc:	7ffb      	ldrb	r3, [r7, #31]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d178      	bne.n	8007ac4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	4413      	add	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <put_fat+0xf0>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	091b      	lsrs	r3, r3, #4
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	e00e      	b.n	8007a12 <put_fat+0x10e>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	f023 030f 	bic.w	r3, r3, #15
 80079fe:	b25a      	sxtb	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	b25b      	sxtb	r3, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b25b      	sxtb	r3, r3
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	70da      	strb	r2, [r3, #3]
			break;
 8007a1c:	e057      	b.n	8007ace <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	4413      	add	r3, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fe08 	bl	8007640 <move_window>
 8007a30:	4603      	mov	r3, r0
 8007a32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a34:	7ffb      	ldrb	r3, [r7, #31]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d146      	bne.n	8007ac8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007a48:	4413      	add	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fb4e 	bl	80070f2 <st_word>
			fs->wflag = 1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	70da      	strb	r2, [r3, #3]
			break;
 8007a5c:	e037      	b.n	8007ace <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	09db      	lsrs	r3, r3, #7
 8007a66:	4413      	add	r3, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fde8 	bl	8007640 <move_window>
 8007a70:	4603      	mov	r3, r0
 8007a72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a74:	7ffb      	ldrb	r3, [r7, #31]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d128      	bne.n	8007acc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007a8e:	4413      	add	r3, r2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fb0b 	bl	80070ac <ld_dword>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007a9c:	4323      	orrs	r3, r4
 8007a9e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007aae:	4413      	add	r3, r2
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fb38 	bl	8007128 <st_dword>
			fs->wflag = 1;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	70da      	strb	r2, [r3, #3]
			break;
 8007abe:	e006      	b.n	8007ace <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ac0:	bf00      	nop
 8007ac2:	e004      	b.n	8007ace <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007acc:	bf00      	nop
		}
	}
	return res;
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3724      	adds	r7, #36	@ 0x24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd90      	pop	{r4, r7, pc}

08007ad8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d904      	bls.n	8007afe <remove_chain+0x26>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d301      	bcc.n	8007b02 <remove_chain+0x2a>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e04b      	b.n	8007b9a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00c      	beq.n	8007b22 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	69b8      	ldr	r0, [r7, #24]
 8007b10:	f7ff fef8 	bl	8007904 <put_fat>
 8007b14:	4603      	mov	r3, r0
 8007b16:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b18:	7ffb      	ldrb	r3, [r7, #31]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <remove_chain+0x4a>
 8007b1e:	7ffb      	ldrb	r3, [r7, #31]
 8007b20:	e03b      	b.n	8007b9a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fe46 	bl	80077b6 <get_fat>
 8007b2a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d031      	beq.n	8007b96 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <remove_chain+0x64>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e02e      	b.n	8007b9a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d101      	bne.n	8007b48 <remove_chain+0x70>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e028      	b.n	8007b9a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b48:	2200      	movs	r2, #0
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f7ff fed9 	bl	8007904 <put_fat>
 8007b52:	4603      	mov	r3, r0
 8007b54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b56:	7ffb      	ldrb	r3, [r7, #31]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <remove_chain+0x88>
 8007b5c:	7ffb      	ldrb	r3, [r7, #31]
 8007b5e:	e01c      	b.n	8007b9a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	3b02      	subs	r3, #2
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d20b      	bcs.n	8007b86 <remove_chain+0xae>
			fs->free_clst++;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	791b      	ldrb	r3, [r3, #4]
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d3c6      	bcc.n	8007b22 <remove_chain+0x4a>
 8007b94:	e000      	b.n	8007b98 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b96:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b088      	sub	sp, #32
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10d      	bne.n	8007bd4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <create_chain+0x2c>
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d31b      	bcc.n	8007c06 <create_chain+0x64>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	e018      	b.n	8007c06 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff fded 	bl	80077b6 <get_fat>
 8007bdc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d801      	bhi.n	8007be8 <create_chain+0x46>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e070      	b.n	8007cca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d101      	bne.n	8007bf4 <create_chain+0x52>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	e06a      	b.n	8007cca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d201      	bcs.n	8007c02 <create_chain+0x60>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	e063      	b.n	8007cca <create_chain+0x128>
		scl = clst;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d307      	bcc.n	8007c2a <create_chain+0x88>
				ncl = 2;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d901      	bls.n	8007c2a <create_chain+0x88>
 8007c26:	2300      	movs	r3, #0
 8007c28:	e04f      	b.n	8007cca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c2a:	69f9      	ldr	r1, [r7, #28]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fdc2 	bl	80077b6 <get_fat>
 8007c32:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d003      	beq.n	8007c48 <create_chain+0xa6>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d101      	bne.n	8007c4c <create_chain+0xaa>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	e03e      	b.n	8007cca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c4c:	69fa      	ldr	r2, [r7, #28]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d1da      	bne.n	8007c0a <create_chain+0x68>
 8007c54:	2300      	movs	r3, #0
 8007c56:	e038      	b.n	8007cca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c58:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	69f9      	ldr	r1, [r7, #28]
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f7ff fe4f 	bl	8007904 <put_fat>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <create_chain+0xe2>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f7ff fe42 	bl	8007904 <put_fat>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d116      	bne.n	8007cb8 <create_chain+0x116>
		fs->last_clst = ncl;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	3b02      	subs	r3, #2
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d804      	bhi.n	8007ca8 <create_chain+0x106>
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	1e5a      	subs	r2, r3, #1
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	791b      	ldrb	r3, [r3, #4]
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	711a      	strb	r2, [r3, #4]
 8007cb6:	e007      	b.n	8007cc8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d102      	bne.n	8007cc4 <create_chain+0x122>
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc2:	e000      	b.n	8007cc6 <create_chain+0x124>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cc8:	69fb      	ldr	r3, [r7, #28]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	0a5b      	lsrs	r3, r3, #9
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	8952      	ldrh	r2, [r2, #10]
 8007cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	613a      	str	r2, [r7, #16]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <clmt_clust+0x3a>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e010      	b.n	8007d2e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d307      	bcc.n	8007d24 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d22:	e7e9      	b.n	8007cf8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	4413      	add	r3, r2
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d50:	d204      	bcs.n	8007d5c <dir_sdi+0x22>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e063      	b.n	8007e28 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <dir_sdi+0x46>
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d902      	bls.n	8007d80 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	8912      	ldrh	r2, [r2, #8]
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d301      	bcc.n	8007d96 <dir_sdi+0x5c>
 8007d92:	2302      	movs	r3, #2
 8007d94:	e048      	b.n	8007e28 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	61da      	str	r2, [r3, #28]
 8007d9e:	e029      	b.n	8007df4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	895b      	ldrh	r3, [r3, #10]
 8007da4:	025b      	lsls	r3, r3, #9
 8007da6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007da8:	e019      	b.n	8007dde <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6979      	ldr	r1, [r7, #20]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fd01 	bl	80077b6 <get_fat>
 8007db4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d101      	bne.n	8007dc2 <dir_sdi+0x88>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e032      	b.n	8007e28 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d904      	bls.n	8007dd2 <dir_sdi+0x98>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d301      	bcc.n	8007dd6 <dir_sdi+0x9c>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e028      	b.n	8007e28 <dir_sdi+0xee>
			ofs -= csz;
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d2e1      	bcs.n	8007daa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	6938      	ldr	r0, [r7, #16]
 8007dea:	f7ff fcc5 	bl	8007778 <clust2sect>
 8007dee:	4602      	mov	r2, r0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <dir_sdi+0xcc>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e010      	b.n	8007e28 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	0a5b      	lsrs	r3, r3, #9
 8007e0e:	441a      	add	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e20:	441a      	add	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	3320      	adds	r3, #32
 8007e46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <dir_next+0x28>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e56:	d301      	bcc.n	8007e5c <dir_next+0x2c>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	e0aa      	b.n	8007fb2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 8098 	bne.w	8007f98 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	8912      	ldrh	r2, [r2, #8]
 8007e82:	4293      	cmp	r3, r2
 8007e84:	f0c0 8088 	bcc.w	8007f98 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	61da      	str	r2, [r3, #28]
 8007e8e:	2304      	movs	r3, #4
 8007e90:	e08f      	b.n	8007fb2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	0a5b      	lsrs	r3, r3, #9
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	8952      	ldrh	r2, [r2, #10]
 8007e9a:	3a01      	subs	r2, #1
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d17a      	bne.n	8007f98 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7ff fc83 	bl	80077b6 <get_fat>
 8007eb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d801      	bhi.n	8007ebc <dir_next+0x8c>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e07a      	b.n	8007fb2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d101      	bne.n	8007ec8 <dir_next+0x98>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e074      	b.n	8007fb2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d358      	bcc.n	8007f84 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	61da      	str	r2, [r3, #28]
 8007ede:	2304      	movs	r3, #4
 8007ee0:	e067      	b.n	8007fb2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7ff fe59 	bl	8007ba2 <create_chain>
 8007ef0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <dir_next+0xcc>
 8007ef8:	2307      	movs	r3, #7
 8007efa:	e05a      	b.n	8007fb2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <dir_next+0xd6>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e055      	b.n	8007fb2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0c:	d101      	bne.n	8007f12 <dir_next+0xe2>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e04f      	b.n	8007fb2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fb50 	bl	80075b8 <sync_window>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <dir_next+0xf2>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e047      	b.n	8007fb2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3334      	adds	r3, #52	@ 0x34
 8007f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff f948 	bl	80071c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff fc1d 	bl	8007778 <clust2sect>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f44:	e012      	b.n	8007f6c <dir_next+0x13c>
						fs->wflag = 1;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff fb33 	bl	80075b8 <sync_window>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <dir_next+0x12c>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e02a      	b.n	8007fb2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	895b      	ldrh	r3, [r3, #10]
 8007f70:	461a      	mov	r2, r3
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d3e6      	bcc.n	8007f46 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f8a:	6979      	ldr	r1, [r7, #20]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fbf3 	bl	8007778 <clust2sect>
 8007f92:	4602      	mov	r2, r0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	441a      	add	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff feb4 	bl	8007d3a <dir_sdi>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d12b      	bne.n	8008034 <dir_alloc+0x7a>
		n = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fb2a 	bl	8007640 <move_window>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d11d      	bne.n	8008032 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2be5      	cmp	r3, #229	@ 0xe5
 8007ffe:	d004      	beq.n	800800a <dir_alloc+0x50>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3301      	adds	r3, #1
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d102      	bne.n	800801e <dir_alloc+0x64>
 8008018:	e00c      	b.n	8008034 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800801e:	2101      	movs	r1, #1
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff ff05 	bl	8007e30 <dir_next>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0d7      	beq.n	8007fe0 <dir_alloc+0x26>
 8008030:	e000      	b.n	8008034 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008032:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d101      	bne.n	800803e <dir_alloc+0x84>
 800803a:	2307      	movs	r3, #7
 800803c:	75fb      	strb	r3, [r7, #23]
	return res;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	331a      	adds	r3, #26
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff f810 	bl	800707c <ld_word>
 800805c:	4603      	mov	r3, r0
 800805e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d109      	bne.n	800807c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff f805 	bl	800707c <ld_word>
 8008072:	4603      	mov	r3, r0
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800807c:	68fb      	ldr	r3, [r7, #12]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	331a      	adds	r3, #26
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	b292      	uxth	r2, r2
 800809a:	4611      	mov	r1, r2
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff f828 	bl	80070f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d109      	bne.n	80080be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f103 0214 	add.w	r2, r3, #20
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7ff f81a 	bl	80070f2 <st_word>
	}
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fe2f 	bl	8007d3a <dir_sdi>
 80080dc:	4603      	mov	r3, r0
 80080de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <dir_find+0x24>
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	e03e      	b.n	8008168 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6938      	ldr	r0, [r7, #16]
 80080f2:	f7ff faa5 	bl	8007640 <move_window>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d12f      	bne.n	8008160 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <dir_find+0x4e>
 800810e:	2304      	movs	r3, #4
 8008110:	75fb      	strb	r3, [r7, #23]
 8008112:	e028      	b.n	8008166 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	330b      	adds	r3, #11
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	330b      	adds	r3, #11
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <dir_find+0x86>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a18      	ldr	r0, [r3, #32]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3324      	adds	r3, #36	@ 0x24
 800813e:	220b      	movs	r2, #11
 8008140:	4619      	mov	r1, r3
 8008142:	f7ff f859 	bl	80071f8 <mem_cmp>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff fe6e 	bl	8007e30 <dir_next>
 8008154:	4603      	mov	r3, r0
 8008156:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0c5      	beq.n	80080ea <dir_find+0x24>
 800815e:	e002      	b.n	8008166 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008164:	bf00      	nop

	return res;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800817e:	2101      	movs	r1, #1
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ff1a 	bl	8007fba <dir_alloc>
 8008186:	4603      	mov	r3, r0
 8008188:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d11c      	bne.n	80081ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	4619      	mov	r1, r3
 8008196:	68b8      	ldr	r0, [r7, #8]
 8008198:	f7ff fa52 	bl	8007640 <move_window>
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d111      	bne.n	80081ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	2220      	movs	r2, #32
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff f807 	bl	80071c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a18      	ldr	r0, [r3, #32]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3324      	adds	r3, #36	@ 0x24
 80081bc:	220b      	movs	r2, #11
 80081be:	4619      	mov	r1, r3
 80081c0:	f7fe ffde 	bl	8007180 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2201      	movs	r2, #1
 80081c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3324      	adds	r3, #36	@ 0x24
 80081e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081ea:	220b      	movs	r2, #11
 80081ec:	2120      	movs	r1, #32
 80081ee:	68b8      	ldr	r0, [r7, #8]
 80081f0:	f7fe ffe7 	bl	80071c2 <mem_set>
	si = i = 0; ni = 8;
 80081f4:	2300      	movs	r3, #0
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	2308      	movs	r3, #8
 80081fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	61fa      	str	r2, [r7, #28]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800820e:	7efb      	ldrb	r3, [r7, #27]
 8008210:	2b20      	cmp	r3, #32
 8008212:	d94e      	bls.n	80082b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008214:	7efb      	ldrb	r3, [r7, #27]
 8008216:	2b2f      	cmp	r3, #47	@ 0x2f
 8008218:	d006      	beq.n	8008228 <create_name+0x54>
 800821a:	7efb      	ldrb	r3, [r7, #27]
 800821c:	2b5c      	cmp	r3, #92	@ 0x5c
 800821e:	d110      	bne.n	8008242 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008220:	e002      	b.n	8008228 <create_name+0x54>
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	3301      	adds	r3, #1
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	4413      	add	r3, r2
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b2f      	cmp	r3, #47	@ 0x2f
 8008232:	d0f6      	beq.n	8008222 <create_name+0x4e>
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b5c      	cmp	r3, #92	@ 0x5c
 800823e:	d0f0      	beq.n	8008222 <create_name+0x4e>
			break;
 8008240:	e038      	b.n	80082b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008242:	7efb      	ldrb	r3, [r7, #27]
 8008244:	2b2e      	cmp	r3, #46	@ 0x2e
 8008246:	d003      	beq.n	8008250 <create_name+0x7c>
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	429a      	cmp	r2, r3
 800824e:	d30c      	bcc.n	800826a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d002      	beq.n	800825c <create_name+0x88>
 8008256:	7efb      	ldrb	r3, [r7, #27]
 8008258:	2b2e      	cmp	r3, #46	@ 0x2e
 800825a:	d001      	beq.n	8008260 <create_name+0x8c>
 800825c:	2306      	movs	r3, #6
 800825e:	e044      	b.n	80082ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008260:	2308      	movs	r3, #8
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	230b      	movs	r3, #11
 8008266:	617b      	str	r3, [r7, #20]
			continue;
 8008268:	e022      	b.n	80082b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800826a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800826e:	2b00      	cmp	r3, #0
 8008270:	da04      	bge.n	800827c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008272:	7efb      	ldrb	r3, [r7, #27]
 8008274:	3b80      	subs	r3, #128	@ 0x80
 8008276:	4a1f      	ldr	r2, [pc, #124]	@ (80082f4 <create_name+0x120>)
 8008278:	5cd3      	ldrb	r3, [r2, r3]
 800827a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800827c:	7efb      	ldrb	r3, [r7, #27]
 800827e:	4619      	mov	r1, r3
 8008280:	481d      	ldr	r0, [pc, #116]	@ (80082f8 <create_name+0x124>)
 8008282:	f7fe ffe0 	bl	8007246 <chk_chr>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <create_name+0xbc>
 800828c:	2306      	movs	r3, #6
 800828e:	e02c      	b.n	80082ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008290:	7efb      	ldrb	r3, [r7, #27]
 8008292:	2b60      	cmp	r3, #96	@ 0x60
 8008294:	d905      	bls.n	80082a2 <create_name+0xce>
 8008296:	7efb      	ldrb	r3, [r7, #27]
 8008298:	2b7a      	cmp	r3, #122	@ 0x7a
 800829a:	d802      	bhi.n	80082a2 <create_name+0xce>
 800829c:	7efb      	ldrb	r3, [r7, #27]
 800829e:	3b20      	subs	r3, #32
 80082a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	613a      	str	r2, [r7, #16]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	7efa      	ldrb	r2, [r7, #27]
 80082ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80082b0:	e7a6      	b.n	8008200 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	441a      	add	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <create_name+0xf4>
 80082c4:	2306      	movs	r3, #6
 80082c6:	e010      	b.n	80082ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2be5      	cmp	r3, #229	@ 0xe5
 80082ce:	d102      	bne.n	80082d6 <create_name+0x102>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2205      	movs	r2, #5
 80082d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80082d6:	7efb      	ldrb	r3, [r7, #27]
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d801      	bhi.n	80082e0 <create_name+0x10c>
 80082dc:	2204      	movs	r2, #4
 80082de:	e000      	b.n	80082e2 <create_name+0x10e>
 80082e0:	2200      	movs	r2, #0
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	330b      	adds	r3, #11
 80082e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3720      	adds	r7, #32
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	0800e3d8 	.word	0x0800e3d8
 80082f8:	0800e26c 	.word	0x0800e26c

080082fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008310:	e002      	b.n	8008318 <follow_path+0x1c>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b2f      	cmp	r3, #47	@ 0x2f
 800831e:	d0f8      	beq.n	8008312 <follow_path+0x16>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b5c      	cmp	r3, #92	@ 0x5c
 8008326:	d0f4      	beq.n	8008312 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2200      	movs	r2, #0
 800832c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b1f      	cmp	r3, #31
 8008334:	d80a      	bhi.n	800834c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2280      	movs	r2, #128	@ 0x80
 800833a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800833e:	2100      	movs	r1, #0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff fcfa 	bl	8007d3a <dir_sdi>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
 800834a:	e043      	b.n	80083d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800834c:	463b      	mov	r3, r7
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ff3f 	bl	80081d4 <create_name>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d134      	bne.n	80083ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff feb0 	bl	80080c6 <dir_find>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008370:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d127      	bne.n	80083ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d122      	bne.n	80083ce <follow_path+0xd2>
 8008388:	2305      	movs	r3, #5
 800838a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800838c:	e01f      	b.n	80083ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	f003 0304 	and.w	r3, r3, #4
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11c      	bne.n	80083d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	799b      	ldrb	r3, [r3, #6]
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80083a4:	2305      	movs	r3, #5
 80083a6:	75fb      	strb	r3, [r7, #23]
 80083a8:	e014      	b.n	80083d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b8:	4413      	add	r3, r2
 80083ba:	4619      	mov	r1, r3
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fe43 	bl	8008048 <ld_clust>
 80083c2:	4602      	mov	r2, r0
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083c8:	e7c0      	b.n	800834c <follow_path+0x50>
			if (res != FR_OK) break;
 80083ca:	bf00      	nop
 80083cc:	e002      	b.n	80083d4 <follow_path+0xd8>
				break;
 80083ce:	bf00      	nop
 80083d0:	e000      	b.n	80083d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083d2:	bf00      	nop
			}
		}
	}

	return res;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d031      	beq.n	8008458 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e002      	b.n	8008402 <get_ldnumber+0x24>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3301      	adds	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b20      	cmp	r3, #32
 8008408:	d903      	bls.n	8008412 <get_ldnumber+0x34>
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008410:	d1f4      	bne.n	80083fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b3a      	cmp	r3, #58	@ 0x3a
 8008418:	d11c      	bne.n	8008454 <get_ldnumber+0x76>
			tp = *path;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	60fa      	str	r2, [r7, #12]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	3b30      	subs	r3, #48	@ 0x30
 800842a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b09      	cmp	r3, #9
 8008430:	d80e      	bhi.n	8008450 <get_ldnumber+0x72>
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	429a      	cmp	r2, r3
 8008438:	d10a      	bne.n	8008450 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d107      	bne.n	8008450 <get_ldnumber+0x72>
					vol = (int)i;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3301      	adds	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	e002      	b.n	800845a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008458:	693b      	ldr	r3, [r7, #16]
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	70da      	strb	r2, [r3, #3]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff f8dc 	bl	8007640 <move_window>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <check_fs+0x2a>
 800848e:	2304      	movs	r3, #4
 8008490:	e038      	b.n	8008504 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3334      	adds	r3, #52	@ 0x34
 8008496:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fdee 	bl	800707c <ld_word>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d001      	beq.n	80084b0 <check_fs+0x48>
 80084ac:	2303      	movs	r3, #3
 80084ae:	e029      	b.n	8008504 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084b6:	2be9      	cmp	r3, #233	@ 0xe9
 80084b8:	d009      	beq.n	80084ce <check_fs+0x66>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084c0:	2beb      	cmp	r3, #235	@ 0xeb
 80084c2:	d11e      	bne.n	8008502 <check_fs+0x9a>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80084ca:	2b90      	cmp	r3, #144	@ 0x90
 80084cc:	d119      	bne.n	8008502 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3334      	adds	r3, #52	@ 0x34
 80084d2:	3336      	adds	r3, #54	@ 0x36
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fde9 	bl	80070ac <ld_dword>
 80084da:	4603      	mov	r3, r0
 80084dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80084e0:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <check_fs+0xa4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <check_fs+0x82>
 80084e6:	2300      	movs	r3, #0
 80084e8:	e00c      	b.n	8008504 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3334      	adds	r3, #52	@ 0x34
 80084ee:	3352      	adds	r3, #82	@ 0x52
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fddb 	bl	80070ac <ld_dword>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4a05      	ldr	r2, [pc, #20]	@ (8008510 <check_fs+0xa8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d101      	bne.n	8008502 <check_fs+0x9a>
 80084fe:	2300      	movs	r3, #0
 8008500:	e000      	b.n	8008504 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008502:	2302      	movs	r3, #2
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	00544146 	.word	0x00544146
 8008510:	33544146 	.word	0x33544146

08008514 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b096      	sub	sp, #88	@ 0x58
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff ff58 	bl	80083de <get_ldnumber>
 800852e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008532:	2b00      	cmp	r3, #0
 8008534:	da01      	bge.n	800853a <find_volume+0x26>
 8008536:	230b      	movs	r3, #11
 8008538:	e235      	b.n	80089a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800853a:	4aa5      	ldr	r2, [pc, #660]	@ (80087d0 <find_volume+0x2bc>)
 800853c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008542:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <find_volume+0x3a>
 800854a:	230c      	movs	r3, #12
 800854c:	e22b      	b.n	80089a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800854e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008550:	f7fe fe94 	bl	800727c <lock_fs>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <find_volume+0x4a>
 800855a:	230f      	movs	r3, #15
 800855c:	e223      	b.n	80089a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008562:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	f023 0301 	bic.w	r3, r3, #1
 800856a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01a      	beq.n	80085aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	785b      	ldrb	r3, [r3, #1]
 8008578:	4618      	mov	r0, r3
 800857a:	f7fe fcdf 	bl	8006f3c <disk_status>
 800857e:	4603      	mov	r3, r0
 8008580:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008584:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10c      	bne.n	80085aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <find_volume+0x92>
 8008596:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80085a2:	230a      	movs	r3, #10
 80085a4:	e1ff      	b.n	80089a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80085a6:	2300      	movs	r3, #0
 80085a8:	e1fd      	b.n	80089a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fcd7 	bl	8006f70 <disk_initialize>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80085d4:	2303      	movs	r3, #3
 80085d6:	e1e6      	b.n	80089a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <find_volume+0xda>
 80085de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085e2:	f003 0304 	and.w	r3, r3, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80085ea:	230a      	movs	r3, #10
 80085ec:	e1db      	b.n	80089a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80085f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80085f6:	f7ff ff37 	bl	8008468 <check_fs>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008600:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008604:	2b02      	cmp	r3, #2
 8008606:	d149      	bne.n	800869c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008608:	2300      	movs	r3, #0
 800860a:	643b      	str	r3, [r7, #64]	@ 0x40
 800860c:	e01e      	b.n	800864c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008610:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800861c:	4413      	add	r3, r2
 800861e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	3304      	adds	r3, #4
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d006      	beq.n	8008638 <find_volume+0x124>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	3308      	adds	r3, #8
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fd3c 	bl	80070ac <ld_dword>
 8008634:	4602      	mov	r2, r0
 8008636:	e000      	b.n	800863a <find_volume+0x126>
 8008638:	2200      	movs	r2, #0
 800863a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	3358      	adds	r3, #88	@ 0x58
 8008640:	443b      	add	r3, r7
 8008642:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008648:	3301      	adds	r3, #1
 800864a:	643b      	str	r3, [r7, #64]	@ 0x40
 800864c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800864e:	2b03      	cmp	r3, #3
 8008650:	d9dd      	bls.n	800860e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008652:	2300      	movs	r3, #0
 8008654:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <find_volume+0x14e>
 800865c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800865e:	3b01      	subs	r3, #1
 8008660:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	3358      	adds	r3, #88	@ 0x58
 8008668:	443b      	add	r3, r7
 800866a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800866e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008672:	2b00      	cmp	r3, #0
 8008674:	d005      	beq.n	8008682 <find_volume+0x16e>
 8008676:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008678:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800867a:	f7ff fef5 	bl	8008468 <check_fs>
 800867e:	4603      	mov	r3, r0
 8008680:	e000      	b.n	8008684 <find_volume+0x170>
 8008682:	2303      	movs	r3, #3
 8008684:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008688:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800868c:	2b01      	cmp	r3, #1
 800868e:	d905      	bls.n	800869c <find_volume+0x188>
 8008690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008692:	3301      	adds	r3, #1
 8008694:	643b      	str	r3, [r7, #64]	@ 0x40
 8008696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008698:	2b03      	cmp	r3, #3
 800869a:	d9e2      	bls.n	8008662 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800869c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d101      	bne.n	80086a8 <find_volume+0x194>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e17e      	b.n	80089a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d901      	bls.n	80086b4 <find_volume+0x1a0>
 80086b0:	230d      	movs	r3, #13
 80086b2:	e178      	b.n	80089a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	3334      	adds	r3, #52	@ 0x34
 80086b8:	330b      	adds	r3, #11
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fcde 	bl	800707c <ld_word>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c6:	d001      	beq.n	80086cc <find_volume+0x1b8>
 80086c8:	230d      	movs	r3, #13
 80086ca:	e16c      	b.n	80089a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ce:	3334      	adds	r3, #52	@ 0x34
 80086d0:	3316      	adds	r3, #22
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fcd2 	bl	800707c <ld_word>
 80086d8:	4603      	mov	r3, r0
 80086da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80086dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <find_volume+0x1dc>
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	3334      	adds	r3, #52	@ 0x34
 80086e6:	3324      	adds	r3, #36	@ 0x24
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fcdf 	bl	80070ac <ld_dword>
 80086ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d005      	beq.n	8008714 <find_volume+0x200>
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	789b      	ldrb	r3, [r3, #2]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d001      	beq.n	8008714 <find_volume+0x200>
 8008710:	230d      	movs	r3, #13
 8008712:	e148      	b.n	80089a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	461a      	mov	r2, r3
 800871a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008728:	461a      	mov	r2, r3
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	895b      	ldrh	r3, [r3, #10]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <find_volume+0x234>
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	895b      	ldrh	r3, [r3, #10]
 800873a:	461a      	mov	r2, r3
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	895b      	ldrh	r3, [r3, #10]
 8008740:	3b01      	subs	r3, #1
 8008742:	4013      	ands	r3, r2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <find_volume+0x238>
 8008748:	230d      	movs	r3, #13
 800874a:	e12c      	b.n	80089a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	3334      	adds	r3, #52	@ 0x34
 8008750:	3311      	adds	r3, #17
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fc92 	bl	800707c <ld_word>
 8008758:	4603      	mov	r3, r0
 800875a:	461a      	mov	r2, r3
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	891b      	ldrh	r3, [r3, #8]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <find_volume+0x25e>
 800876e:	230d      	movs	r3, #13
 8008770:	e119      	b.n	80089a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	3334      	adds	r3, #52	@ 0x34
 8008776:	3313      	adds	r3, #19
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe fc7f 	bl	800707c <ld_word>
 800877e:	4603      	mov	r3, r0
 8008780:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <find_volume+0x282>
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	3334      	adds	r3, #52	@ 0x34
 800878c:	3320      	adds	r3, #32
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fc8c 	bl	80070ac <ld_dword>
 8008794:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008798:	3334      	adds	r3, #52	@ 0x34
 800879a:	330e      	adds	r3, #14
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fc6d 	bl	800707c <ld_word>
 80087a2:	4603      	mov	r3, r0
 80087a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <find_volume+0x29c>
 80087ac:	230d      	movs	r3, #13
 80087ae:	e0fa      	b.n	80089a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80087b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80087b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b4:	4413      	add	r3, r2
 80087b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087b8:	8912      	ldrh	r2, [r2, #8]
 80087ba:	0912      	lsrs	r2, r2, #4
 80087bc:	b292      	uxth	r2, r2
 80087be:	4413      	add	r3, r2
 80087c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d204      	bcs.n	80087d4 <find_volume+0x2c0>
 80087ca:	230d      	movs	r3, #13
 80087cc:	e0eb      	b.n	80089a6 <find_volume+0x492>
 80087ce:	bf00      	nop
 80087d0:	20000a54 	.word	0x20000a54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087dc:	8952      	ldrh	r2, [r2, #10]
 80087de:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <find_volume+0x2da>
 80087ea:	230d      	movs	r3, #13
 80087ec:	e0db      	b.n	80089a6 <find_volume+0x492>
		fmt = FS_FAT32;
 80087ee:	2303      	movs	r3, #3
 80087f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d802      	bhi.n	8008804 <find_volume+0x2f0>
 80087fe:	2302      	movs	r3, #2
 8008800:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800880a:	4293      	cmp	r3, r2
 800880c:	d802      	bhi.n	8008814 <find_volume+0x300>
 800880e:	2301      	movs	r3, #1
 8008810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	1c9a      	adds	r2, r3, #2
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008820:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008822:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008826:	441a      	add	r2, r3
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800882c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	441a      	add	r2, r3
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008836:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800883a:	2b03      	cmp	r3, #3
 800883c:	d11e      	bne.n	800887c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	3334      	adds	r3, #52	@ 0x34
 8008842:	332a      	adds	r3, #42	@ 0x2a
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fc19 	bl	800707c <ld_word>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <find_volume+0x340>
 8008850:	230d      	movs	r3, #13
 8008852:	e0a8      	b.n	80089a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	891b      	ldrh	r3, [r3, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <find_volume+0x34c>
 800885c:	230d      	movs	r3, #13
 800885e:	e0a2      	b.n	80089a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	3334      	adds	r3, #52	@ 0x34
 8008864:	332c      	adds	r3, #44	@ 0x2c
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fc20 	bl	80070ac <ld_dword>
 800886c:	4602      	mov	r2, r0
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	647b      	str	r3, [r7, #68]	@ 0x44
 800887a:	e01f      	b.n	80088bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800887c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887e:	891b      	ldrh	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <find_volume+0x374>
 8008884:	230d      	movs	r3, #13
 8008886:	e08e      	b.n	80089a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800888c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800888e:	441a      	add	r2, r3
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008894:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008898:	2b02      	cmp	r3, #2
 800889a:	d103      	bne.n	80088a4 <find_volume+0x390>
 800889c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	e00a      	b.n	80088ba <find_volume+0x3a6>
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	4613      	mov	r3, r2
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	4413      	add	r3, r2
 80088ae:	085a      	lsrs	r2, r3, #1
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80088ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	69da      	ldr	r2, [r3, #28]
 80088c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80088c6:	0a5b      	lsrs	r3, r3, #9
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d201      	bcs.n	80088d0 <find_volume+0x3bc>
 80088cc:	230d      	movs	r3, #13
 80088ce:	e06a      	b.n	80089a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	615a      	str	r2, [r3, #20]
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	2280      	movs	r2, #128	@ 0x80
 80088e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80088e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d149      	bne.n	8008982 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	3334      	adds	r3, #52	@ 0x34
 80088f2:	3330      	adds	r3, #48	@ 0x30
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fbc1 	bl	800707c <ld_word>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d140      	bne.n	8008982 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008902:	3301      	adds	r3, #1
 8008904:	4619      	mov	r1, r3
 8008906:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008908:	f7fe fe9a 	bl	8007640 <move_window>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d137      	bne.n	8008982 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	2200      	movs	r2, #0
 8008916:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	3334      	adds	r3, #52	@ 0x34
 800891c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fbab 	bl	800707c <ld_word>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800892e:	429a      	cmp	r2, r3
 8008930:	d127      	bne.n	8008982 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	3334      	adds	r3, #52	@ 0x34
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fbb8 	bl	80070ac <ld_dword>
 800893c:	4603      	mov	r3, r0
 800893e:	4a1c      	ldr	r2, [pc, #112]	@ (80089b0 <find_volume+0x49c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d11e      	bne.n	8008982 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008946:	3334      	adds	r3, #52	@ 0x34
 8008948:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fbad 	bl	80070ac <ld_dword>
 8008952:	4603      	mov	r3, r0
 8008954:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <find_volume+0x4a0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d113      	bne.n	8008982 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800895a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895c:	3334      	adds	r3, #52	@ 0x34
 800895e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fba2 	bl	80070ac <ld_dword>
 8008968:	4602      	mov	r2, r0
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	3334      	adds	r3, #52	@ 0x34
 8008972:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fb98 	bl	80070ac <ld_dword>
 800897c:	4602      	mov	r2, r0
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008988:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800898a:	4b0b      	ldr	r3, [pc, #44]	@ (80089b8 <find_volume+0x4a4>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	3301      	adds	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <find_volume+0x4a4>)
 8008994:	801a      	strh	r2, [r3, #0]
 8008996:	4b08      	ldr	r3, [pc, #32]	@ (80089b8 <find_volume+0x4a4>)
 8008998:	881a      	ldrh	r2, [r3, #0]
 800899a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800899e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089a0:	f7fe fde6 	bl	8007570 <clear_lock>
#endif
	return FR_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3758      	adds	r7, #88	@ 0x58
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	41615252 	.word	0x41615252
 80089b4:	61417272 	.word	0x61417272
 80089b8:	20000a58 	.word	0x20000a58

080089bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089c6:	2309      	movs	r3, #9
 80089c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02e      	beq.n	8008a2e <validate+0x72>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02a      	beq.n	8008a2e <validate+0x72>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d025      	beq.n	8008a2e <validate+0x72>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	889a      	ldrh	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d11e      	bne.n	8008a2e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fc41 	bl	800727c <lock_fs>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d014      	beq.n	8008a2a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fa98 	bl	8006f3c <disk_status>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <validate+0x60>
				res = FR_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	e008      	b.n	8008a2e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2100      	movs	r1, #0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fc40 	bl	80072a8 <unlock_fs>
 8008a28:	e001      	b.n	8008a2e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008a2a:	230f      	movs	r3, #15
 8008a2c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <validate+0x7e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	e000      	b.n	8008a3c <validate+0x80>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	6013      	str	r3, [r2, #0]
	return res;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fcbb 	bl	80083de <get_ldnumber>
 8008a68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	da01      	bge.n	8008a74 <f_mount+0x28>
 8008a70:	230b      	movs	r3, #11
 8008a72:	e048      	b.n	8008b06 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a74:	4a26      	ldr	r2, [pc, #152]	@ (8008b10 <f_mount+0xc4>)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00f      	beq.n	8008aa4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a84:	69b8      	ldr	r0, [r7, #24]
 8008a86:	f7fe fd73 	bl	8007570 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fd90 	bl	80095b4 <ff_del_syncobj>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <f_mount+0x52>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e033      	b.n	8008b06 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00f      	beq.n	8008aca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f000 fd5f 	bl	800957e <ff_cre_syncobj>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <f_mount+0x7e>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e01d      	b.n	8008b06 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4910      	ldr	r1, [pc, #64]	@ (8008b10 <f_mount+0xc4>)
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <f_mount+0x94>
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d001      	beq.n	8008ae4 <f_mount+0x98>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e010      	b.n	8008b06 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008ae4:	f107 010c 	add.w	r1, r7, #12
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	2200      	movs	r2, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fd10 	bl	8008514 <find_volume>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	7dfa      	ldrb	r2, [r7, #23]
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fbd2 	bl	80072a8 <unlock_fs>
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000a54 	.word	0x20000a54

08008b14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b098      	sub	sp, #96	@ 0x60
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <f_open+0x18>
 8008b28:	2309      	movs	r3, #9
 8008b2a:	e1b0      	b.n	8008e8e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	f107 0110 	add.w	r1, r7, #16
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff fce8 	bl	8008514 <find_volume>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 818d 	bne.w	8008e6e <f_open+0x35a>
		dj.obj.fs = fs;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	f107 0314 	add.w	r3, r7, #20
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fbcb 	bl	80082fc <follow_path>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d118      	bne.n	8008ba6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da03      	bge.n	8008b86 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b7e:	2306      	movs	r3, #6
 8008b80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008b84:	e00f      	b.n	8008ba6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	bf8c      	ite	hi
 8008b8c:	2301      	movhi	r3, #1
 8008b8e:	2300      	movls	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f107 0314 	add.w	r3, r7, #20
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fba0 	bl	80072e0 <chk_lock>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	f003 031c 	and.w	r3, r3, #28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d07f      	beq.n	8008cb0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d017      	beq.n	8008be8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d10e      	bne.n	8008bde <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008bc0:	f7fe fbea 	bl	8007398 <enq_lock>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <f_open+0xc4>
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff face 	bl	8008170 <dir_register>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	e000      	b.n	8008bda <f_open+0xc6>
 8008bd8:	2312      	movs	r3, #18
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	71fb      	strb	r3, [r7, #7]
 8008be6:	e010      	b.n	8008c0a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008be8:	7ebb      	ldrb	r3, [r7, #26]
 8008bea:	f003 0311 	and.w	r3, r3, #17
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <f_open+0xe6>
					res = FR_DENIED;
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008bf8:	e007      	b.n	8008c0a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <f_open+0xf6>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d168      	bne.n	8008ce4 <f_open+0x1d0>
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d063      	beq.n	8008ce4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008c1c:	f7fd fe78 	bl	8006910 <get_fattime>
 8008c20:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	330e      	adds	r3, #14
 8008c26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fa7d 	bl	8007128 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	3316      	adds	r3, #22
 8008c32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fa77 	bl	8007128 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	330b      	adds	r3, #11
 8008c3e:	2220      	movs	r2, #32
 8008c40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff f9fd 	bl	8008048 <ld_clust>
 8008c4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008c54:	2200      	movs	r2, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fa15 	bl	8008086 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	331c      	adds	r3, #28
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fa60 	bl	8007128 <st_dword>
					fs->wflag = 1;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d037      	beq.n	8008ce4 <f_open+0x1d0>
						dw = fs->winsect;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c78:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c7a:	f107 0314 	add.w	r3, r7, #20
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe ff28 	bl	8007ad8 <remove_chain>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d126      	bne.n	8008ce4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fcd0 	bl	8007640 <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008caa:	3a01      	subs	r2, #1
 8008cac:	611a      	str	r2, [r3, #16]
 8008cae:	e019      	b.n	8008ce4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d115      	bne.n	8008ce4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008cb8:	7ebb      	ldrb	r3, [r7, #26]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <f_open+0x1b6>
					res = FR_NO_FILE;
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008cc8:	e00c      	b.n	8008ce4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <f_open+0x1d0>
 8008cd4:	7ebb      	ldrb	r3, [r7, #26]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <f_open+0x1d0>
						res = FR_DENIED;
 8008cde:	2307      	movs	r3, #7
 8008ce0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d126      	bne.n	8008d3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	bf8c      	ite	hi
 8008d12:	2301      	movhi	r3, #1
 8008d14:	2300      	movls	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f107 0314 	add.w	r3, r7, #20
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fb5b 	bl	80073dc <inc_lock>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <f_open+0x226>
 8008d34:	2302      	movs	r3, #2
 8008d36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 8095 	bne.w	8008e6e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f97c 	bl	8008048 <ld_clust>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d58:	331c      	adds	r3, #28
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe f9a6 	bl	80070ac <ld_dword>
 8008d60:	4602      	mov	r2, r0
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	88da      	ldrh	r2, [r3, #6]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	79fa      	ldrb	r2, [r7, #7]
 8008d7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3330      	adds	r3, #48	@ 0x30
 8008d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fa10 	bl	80071c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d060      	beq.n	8008e6e <f_open+0x35a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d05c      	beq.n	8008e6e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	895b      	ldrh	r3, [r3, #10]
 8008dc0:	025b      	lsls	r3, r3, #9
 8008dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dd0:	e016      	b.n	8008e00 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fced 	bl	80077b6 <get_fat>
 8008ddc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d802      	bhi.n	8008dea <f_open+0x2d6>
 8008de4:	2302      	movs	r3, #2
 8008de6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008dea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d102      	bne.n	8008df8 <f_open+0x2e4>
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008df8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <f_open+0x2fc>
 8008e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d8e0      	bhi.n	8008dd2 <f_open+0x2be>
				}
				fp->clust = clst;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008e16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d127      	bne.n	8008e6e <f_open+0x35a>
 8008e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d022      	beq.n	8008e6e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fca3 	bl	8007778 <clust2sect>
 8008e32:	6478      	str	r0, [r7, #68]	@ 0x44
 8008e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d103      	bne.n	8008e42 <f_open+0x32e>
						res = FR_INT_ERR;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e40:	e015      	b.n	8008e6e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e44:	0a5a      	lsrs	r2, r3, #9
 8008e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e48:	441a      	add	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	7858      	ldrb	r0, [r3, #1]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f7fe f8af 	bl	8006fc0 <disk_read>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <f_open+0x35a>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <f_open+0x368>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fa0f 	bl	80072a8 <unlock_fs>
 8008e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3760      	adds	r7, #96	@ 0x60
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b08c      	sub	sp, #48	@ 0x30
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f107 0210 	add.w	r2, r7, #16
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fd80 	bl	80089bc <validate>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d107      	bne.n	8008eda <f_write+0x44>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	7d5b      	ldrb	r3, [r3, #21]
 8008ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <f_write+0x58>
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f9e0 	bl	80072a8 <unlock_fs>
 8008ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eec:	e173      	b.n	80091d6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7d1b      	ldrb	r3, [r3, #20]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <f_write+0x72>
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2107      	movs	r1, #7
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f9d2 	bl	80072a8 <unlock_fs>
 8008f04:	2307      	movs	r3, #7
 8008f06:	e166      	b.n	80091d6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	441a      	add	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	f080 814b 	bcs.w	80091b0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008f22:	e145      	b.n	80091b0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8101 	bne.w	8009134 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	0a5b      	lsrs	r3, r3, #9
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	8952      	ldrh	r2, [r2, #10]
 8008f3c:	3a01      	subs	r2, #1
 8008f3e:	4013      	ands	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d14d      	bne.n	8008fe4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10c      	bne.n	8008f6a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d11a      	bne.n	8008f92 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fe1e 	bl	8007ba2 <create_chain>
 8008f66:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008f68:	e013      	b.n	8008f92 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d007      	beq.n	8008f82 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	4619      	mov	r1, r3
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7fe feaa 	bl	8007cd2 <clmt_clust>
 8008f7e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008f80:	e007      	b.n	8008f92 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fe fe09 	bl	8007ba2 <create_chain>
 8008f90:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8110 	beq.w	80091ba <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d109      	bne.n	8008fb4 <f_write+0x11e>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	755a      	strb	r2, [r3, #21]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f97c 	bl	80072a8 <unlock_fs>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e110      	b.n	80091d6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d109      	bne.n	8008fd0 <f_write+0x13a>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	755a      	strb	r2, [r3, #21]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe f96e 	bl	80072a8 <unlock_fs>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e102      	b.n	80091d6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fd4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <f_write+0x14e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fe2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	7d1b      	ldrb	r3, [r3, #20]
 8008fe8:	b25b      	sxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da1d      	bge.n	800902a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	7858      	ldrb	r0, [r3, #1]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f7fd ffff 	bl	8007000 <disk_write>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <f_write+0x186>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	755a      	strb	r2, [r3, #21]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2101      	movs	r1, #1
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe f948 	bl	80072a8 <unlock_fs>
 8009018:	2301      	movs	r3, #1
 800901a:	e0dc      	b.n	80091d6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
 8009020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009024:	b2da      	uxtb	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fe fba0 	bl	8007778 <clust2sect>
 8009038:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <f_write+0x1be>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2202      	movs	r2, #2
 8009044:	755a      	strb	r2, [r3, #21]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2102      	movs	r1, #2
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe f92c 	bl	80072a8 <unlock_fs>
 8009050:	2302      	movs	r3, #2
 8009052:	e0c0      	b.n	80091d6 <f_write+0x340>
			sect += csect;
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	4413      	add	r3, r2
 800905a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	0a5b      	lsrs	r3, r3, #9
 8009060:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d041      	beq.n	80090ec <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	4413      	add	r3, r2
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	8952      	ldrh	r2, [r2, #10]
 8009072:	4293      	cmp	r3, r2
 8009074:	d905      	bls.n	8009082 <f_write+0x1ec>
					cc = fs->csize - csect;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	895b      	ldrh	r3, [r3, #10]
 800907a:	461a      	mov	r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	7858      	ldrb	r0, [r3, #1]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	69f9      	ldr	r1, [r7, #28]
 800908c:	f7fd ffb8 	bl	8007000 <disk_write>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <f_write+0x214>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	755a      	strb	r2, [r3, #21]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2101      	movs	r1, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe f901 	bl	80072a8 <unlock_fs>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e095      	b.n	80091d6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1a      	ldr	r2, [r3, #32]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	6a3a      	ldr	r2, [r7, #32]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d915      	bls.n	80090e4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a1a      	ldr	r2, [r3, #32]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	025b      	lsls	r3, r3, #9
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090d0:	4619      	mov	r1, r3
 80090d2:	f7fe f855 	bl	8007180 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	025b      	lsls	r3, r3, #9
 80090e8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80090ea:	e044      	b.n	8009176 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a1b      	ldr	r3, [r3, #32]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d01b      	beq.n	800912e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090fe:	429a      	cmp	r2, r3
 8009100:	d215      	bcs.n	800912e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	7858      	ldrb	r0, [r3, #1]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800910c:	2301      	movs	r3, #1
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	f7fd ff56 	bl	8006fc0 <disk_read>
 8009114:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	755a      	strb	r2, [r3, #21]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2101      	movs	r1, #1
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe f8bf 	bl	80072a8 <unlock_fs>
 800912a:	2301      	movs	r3, #1
 800912c:	e053      	b.n	80091d6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	429a      	cmp	r2, r3
 8009148:	d901      	bls.n	800914e <f_write+0x2b8>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	4413      	add	r3, r2
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	69f9      	ldr	r1, [r7, #28]
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe f80c 	bl	8007180 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	7d1b      	ldrb	r3, [r3, #20]
 800916c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009170:	b2da      	uxtb	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	4413      	add	r3, r2
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	619a      	str	r2, [r3, #24]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	429a      	cmp	r2, r3
 8009194:	bf38      	it	cc
 8009196:	461a      	movcc	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	60da      	str	r2, [r3, #12]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	441a      	add	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f47f aeb6 	bne.w	8008f24 <f_write+0x8e>
 80091b8:	e000      	b.n	80091bc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7d1b      	ldrb	r3, [r3, #20]
 80091c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe f86a 	bl	80072a8 <unlock_fs>
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3730      	adds	r7, #48	@ 0x30
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f107 0208 	add.w	r2, r7, #8
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff fbe4 	bl	80089bc <validate>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d16d      	bne.n	80092da <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7d1b      	ldrb	r3, [r3, #20]
 8009202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	d067      	beq.n	80092da <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	b25b      	sxtb	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	da1a      	bge.n	800924a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	7858      	ldrb	r0, [r3, #1]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1a      	ldr	r2, [r3, #32]
 8009222:	2301      	movs	r3, #1
 8009224:	f7fd feec 	bl	8007000 <disk_write>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d006      	beq.n	800923c <f_sync+0x5e>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2101      	movs	r1, #1
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe f838 	bl	80072a8 <unlock_fs>
 8009238:	2301      	movs	r3, #1
 800923a:	e055      	b.n	80092e8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7d1b      	ldrb	r3, [r3, #20]
 8009240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009244:	b2da      	uxtb	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800924a:	f7fd fb61 	bl	8006910 <get_fattime>
 800924e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7fe f9f1 	bl	8007640 <move_window>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d138      	bne.n	80092da <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	330b      	adds	r3, #11
 8009272:	781a      	ldrb	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	330b      	adds	r3, #11
 8009278:	f042 0220 	orr.w	r2, r2, #32
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	461a      	mov	r2, r3
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f7fe fefb 	bl	8008086 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f103 021c 	add.w	r2, r3, #28
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fd ff43 	bl	8007128 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3316      	adds	r3, #22
 80092a6:	6939      	ldr	r1, [r7, #16]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd ff3d 	bl	8007128 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3312      	adds	r3, #18
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fd ff1c 	bl	80070f2 <st_word>
					fs->wflag = 1;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2201      	movs	r2, #1
 80092be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe f9ea 	bl	800769c <sync_fs>
 80092c8:	4603      	mov	r3, r0
 80092ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7d1b      	ldrb	r3, [r3, #20]
 80092d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	7dfa      	ldrb	r2, [r7, #23]
 80092de:	4611      	mov	r1, r2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fd ffe1 	bl	80072a8 <unlock_fs>
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff ff70 	bl	80091de <f_sync>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d11d      	bne.n	8009344 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f107 0208 	add.w	r2, r7, #8
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fb53 	bl	80089bc <validate>
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d111      	bne.n	8009344 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe f8e7 	bl	80074f8 <dec_lock>
 800932a:	4603      	mov	r3, r0
 800932c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d102      	bne.n	800933a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f7fd ffb2 	bl	80072a8 <unlock_fs>
#endif
		}
	}
	return res;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b092      	sub	sp, #72	@ 0x48
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800935a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800935e:	f107 030c 	add.w	r3, r7, #12
 8009362:	2200      	movs	r2, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff f8d5 	bl	8008514 <find_volume>
 800936a:	4603      	mov	r3, r0
 800936c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009370:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 8099 	bne.w	80094ac <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800937a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	3b02      	subs	r3, #2
 800938a:	429a      	cmp	r2, r3
 800938c:	d804      	bhi.n	8009398 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	695a      	ldr	r2, [r3, #20]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	e089      	b.n	80094ac <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800939c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d128      	bne.n	80093f6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80093a4:	2302      	movs	r3, #2
 80093a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80093ac:	f107 0314 	add.w	r3, r7, #20
 80093b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe f9ff 	bl	80077b6 <get_fat>
 80093b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c0:	d103      	bne.n	80093ca <f_getfree+0x7c>
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093c8:	e063      	b.n	8009492 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80093ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d103      	bne.n	80093d8 <f_getfree+0x8a>
 80093d0:	2302      	movs	r3, #2
 80093d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093d6:	e05c      	b.n	8009492 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80093d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <f_getfree+0x96>
 80093de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093e0:	3301      	adds	r3, #1
 80093e2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80093e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e6:	3301      	adds	r3, #1
 80093e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3db      	bcc.n	80093ac <f_getfree+0x5e>
 80093f4:	e04d      	b.n	8009492 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	637b      	str	r3, [r7, #52]	@ 0x34
 8009406:	2300      	movs	r3, #0
 8009408:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800940a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940c:	2b00      	cmp	r3, #0
 800940e:	d113      	bne.n	8009438 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009418:	4619      	mov	r1, r3
 800941a:	f7fe f911 	bl	8007640 <move_window>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009424:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009428:	2b00      	cmp	r3, #0
 800942a:	d131      	bne.n	8009490 <f_getfree+0x142>
							p = fs->win;
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	3334      	adds	r3, #52	@ 0x34
 8009430:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d10f      	bne.n	8009460 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009442:	f7fd fe1b 	bl	800707c <ld_word>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d102      	bne.n	8009452 <f_getfree+0x104>
 800944c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800944e:	3301      	adds	r3, #1
 8009450:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009454:	3302      	adds	r3, #2
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30
 8009458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945a:	3b02      	subs	r3, #2
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
 800945e:	e010      	b.n	8009482 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009462:	f7fd fe23 	bl	80070ac <ld_dword>
 8009466:	4603      	mov	r3, r0
 8009468:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <f_getfree+0x128>
 8009470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009472:	3301      	adds	r3, #1
 8009474:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	3304      	adds	r3, #4
 800947a:	633b      	str	r3, [r7, #48]	@ 0x30
 800947c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947e:	3b04      	subs	r3, #4
 8009480:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	3b01      	subs	r3, #1
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1bd      	bne.n	800940a <f_getfree+0xbc>
 800948e:	e000      	b.n	8009492 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009490:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009496:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800949c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	791a      	ldrb	r2, [r3, #4]
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	f042 0201 	orr.w	r2, r2, #1
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80094ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ae:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd fef7 	bl	80072a8 <unlock_fs>
 80094ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3748      	adds	r7, #72	@ 0x48
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80094de:	4b1f      	ldr	r3, [pc, #124]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 80094e0:	7a5b      	ldrb	r3, [r3, #9]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d131      	bne.n	800954c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094e8:	4b1c      	ldr	r3, [pc, #112]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 80094ea:	7a5b      	ldrb	r3, [r3, #9]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	461a      	mov	r2, r3
 80094f0:	4b1a      	ldr	r3, [pc, #104]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 80094f2:	2100      	movs	r1, #0
 80094f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80094f6:	4b19      	ldr	r3, [pc, #100]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 80094f8:	7a5b      	ldrb	r3, [r3, #9]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	4a17      	ldr	r2, [pc, #92]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009506:	4b15      	ldr	r3, [pc, #84]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 8009508:	7a5b      	ldrb	r3, [r3, #9]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	461a      	mov	r2, r3
 800950e:	4b13      	ldr	r3, [pc, #76]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 8009510:	4413      	add	r3, r2
 8009512:	79fa      	ldrb	r2, [r7, #7]
 8009514:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009516:	4b11      	ldr	r3, [pc, #68]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 8009518:	7a5b      	ldrb	r3, [r3, #9]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	b2d1      	uxtb	r1, r2
 8009520:	4a0e      	ldr	r2, [pc, #56]	@ (800955c <FATFS_LinkDriverEx+0x94>)
 8009522:	7251      	strb	r1, [r2, #9]
 8009524:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009526:	7dbb      	ldrb	r3, [r7, #22]
 8009528:	3330      	adds	r3, #48	@ 0x30
 800952a:	b2da      	uxtb	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	3301      	adds	r3, #1
 8009534:	223a      	movs	r2, #58	@ 0x3a
 8009536:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	3302      	adds	r3, #2
 800953c:	222f      	movs	r2, #47	@ 0x2f
 800953e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3303      	adds	r3, #3
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
}
 800954e:	4618      	mov	r0, r3
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000a7c 	.word	0x20000a7c

08009560 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800956a:	2200      	movs	r2, #0
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff ffaa 	bl	80094c8 <FATFS_LinkDriverEx>
 8009574:	4603      	mov	r3, r0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	4603      	mov	r3, r0
 8009586:	6039      	str	r1, [r7, #0]
 8009588:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800958a:	2200      	movs	r2, #0
 800958c:	2101      	movs	r1, #1
 800958e:	2001      	movs	r0, #1
 8009590:	f000 f9ae 	bl	80098f0 <osSemaphoreNew>
 8009594:	4602      	mov	r2, r0
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bf14      	ite	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	2300      	moveq	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	60fb      	str	r3, [r7, #12]

    return ret;
 80095aa:	68fb      	ldr	r3, [r7, #12]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fab7 	bl	8009b30 <osSemaphoreDelete>
#endif
    return 1;
 80095c2:	2301      	movs	r3, #1
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80095d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa11 	bl	8009a04 <osSemaphoreAcquire>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80095e8:	2301      	movs	r3, #1
 80095ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80095ec:	68fb      	ldr	r3, [r7, #12]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa52 	bl	8009aa8 <osSemaphoreRelease>
#endif
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <__NVIC_SetPriority>:
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	6039      	str	r1, [r7, #0]
 8009616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800961c:	2b00      	cmp	r3, #0
 800961e:	db0a      	blt.n	8009636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	b2da      	uxtb	r2, r3
 8009624:	490c      	ldr	r1, [pc, #48]	@ (8009658 <__NVIC_SetPriority+0x4c>)
 8009626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800962a:	0112      	lsls	r2, r2, #4
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	440b      	add	r3, r1
 8009630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009634:	e00a      	b.n	800964c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	b2da      	uxtb	r2, r3
 800963a:	4908      	ldr	r1, [pc, #32]	@ (800965c <__NVIC_SetPriority+0x50>)
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	f003 030f 	and.w	r3, r3, #15
 8009642:	3b04      	subs	r3, #4
 8009644:	0112      	lsls	r2, r2, #4
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	440b      	add	r3, r1
 800964a:	761a      	strb	r2, [r3, #24]
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	e000e100 	.word	0xe000e100
 800965c:	e000ed00 	.word	0xe000ed00

08009660 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009664:	4b05      	ldr	r3, [pc, #20]	@ (800967c <SysTick_Handler+0x1c>)
 8009666:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009668:	f002 fd2a 	bl	800c0c0 <xTaskGetSchedulerState>
 800966c:	4603      	mov	r3, r0
 800966e:	2b01      	cmp	r3, #1
 8009670:	d001      	beq.n	8009676 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009672:	f003 fcc9 	bl	800d008 <xPortSysTickHandler>
  }
}
 8009676:	bf00      	nop
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	e000e010 	.word	0xe000e010

08009680 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009684:	2100      	movs	r1, #0
 8009686:	f06f 0004 	mvn.w	r0, #4
 800968a:	f7ff ffbf 	bl	800960c <__NVIC_SetPriority>
#endif
}
 800968e:	bf00      	nop
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969a:	f3ef 8305 	mrs	r3, IPSR
 800969e:	603b      	str	r3, [r7, #0]
  return(result);
 80096a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096a6:	f06f 0305 	mvn.w	r3, #5
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e00c      	b.n	80096c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096ae:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <osKernelInitialize+0x44>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d105      	bne.n	80096c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096b6:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <osKernelInitialize+0x44>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096bc:	2300      	movs	r3, #0
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	e002      	b.n	80096c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096c2:	f04f 33ff 	mov.w	r3, #4294967295
 80096c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096c8:	687b      	ldr	r3, [r7, #4]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000a88 	.word	0x20000a88

080096dc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80096e2:	f002 fced 	bl	800c0c0 <xTaskGetSchedulerState>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <osKernelGetState+0x1a>
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d105      	bne.n	80096fc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80096f0:	2302      	movs	r3, #2
 80096f2:	607b      	str	r3, [r7, #4]
      break;
 80096f4:	e00c      	b.n	8009710 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80096f6:	2303      	movs	r3, #3
 80096f8:	607b      	str	r3, [r7, #4]
      break;
 80096fa:	e009      	b.n	8009710 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80096fc:	4b07      	ldr	r3, [pc, #28]	@ (800971c <osKernelGetState+0x40>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d102      	bne.n	800970a <osKernelGetState+0x2e>
        state = osKernelReady;
 8009704:	2301      	movs	r3, #1
 8009706:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009708:	e001      	b.n	800970e <osKernelGetState+0x32>
        state = osKernelInactive;
 800970a:	2300      	movs	r3, #0
 800970c:	607b      	str	r3, [r7, #4]
      break;
 800970e:	bf00      	nop
  }

  return (state);
 8009710:	687b      	ldr	r3, [r7, #4]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20000a88 	.word	0x20000a88

08009720 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009726:	f3ef 8305 	mrs	r3, IPSR
 800972a:	603b      	str	r3, [r7, #0]
  return(result);
 800972c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009732:	f06f 0305 	mvn.w	r3, #5
 8009736:	607b      	str	r3, [r7, #4]
 8009738:	e010      	b.n	800975c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800973a:	4b0b      	ldr	r3, [pc, #44]	@ (8009768 <osKernelStart+0x48>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d109      	bne.n	8009756 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009742:	f7ff ff9d 	bl	8009680 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009746:	4b08      	ldr	r3, [pc, #32]	@ (8009768 <osKernelStart+0x48>)
 8009748:	2202      	movs	r2, #2
 800974a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800974c:	f001 feb8 	bl	800b4c0 <vTaskStartScheduler>
      stat = osOK;
 8009750:	2300      	movs	r3, #0
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	e002      	b.n	800975c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009756:	f04f 33ff 	mov.w	r3, #4294967295
 800975a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800975c:	687b      	ldr	r3, [r7, #4]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000a88 	.word	0x20000a88

0800976c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009772:	f3ef 8305 	mrs	r3, IPSR
 8009776:	603b      	str	r3, [r7, #0]
  return(result);
 8009778:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800977e:	f001 ffcd 	bl	800b71c <xTaskGetTickCountFromISR>
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	e002      	b.n	800978c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009786:	f001 ffb9 	bl	800b6fc <xTaskGetTickCount>
 800978a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800978c:	687b      	ldr	r3, [r7, #4]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009796:	b580      	push	{r7, lr}
 8009798:	b08e      	sub	sp, #56	@ 0x38
 800979a:	af04      	add	r7, sp, #16
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a6:	f3ef 8305 	mrs	r3, IPSR
 80097aa:	617b      	str	r3, [r7, #20]
  return(result);
 80097ac:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d17e      	bne.n	80098b0 <osThreadNew+0x11a>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d07b      	beq.n	80098b0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097b8:	2380      	movs	r3, #128	@ 0x80
 80097ba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097bc:	2318      	movs	r3, #24
 80097be:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d045      	beq.n	800985c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <osThreadNew+0x48>
        name = attr->name;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <osThreadNew+0x6e>
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2b38      	cmp	r3, #56	@ 0x38
 80097f6:	d805      	bhi.n	8009804 <osThreadNew+0x6e>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <osThreadNew+0x72>
        return (NULL);
 8009804:	2300      	movs	r3, #0
 8009806:	e054      	b.n	80098b2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	089b      	lsrs	r3, r3, #2
 8009816:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00e      	beq.n	800983e <osThreadNew+0xa8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2bab      	cmp	r3, #171	@ 0xab
 8009826:	d90a      	bls.n	800983e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <osThreadNew+0xa8>
        mem = 1;
 8009838:	2301      	movs	r3, #1
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	e010      	b.n	8009860 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <osThreadNew+0xca>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d108      	bne.n	8009860 <osThreadNew+0xca>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d104      	bne.n	8009860 <osThreadNew+0xca>
          mem = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	e001      	b.n	8009860 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d110      	bne.n	8009888 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800986e:	9202      	str	r2, [sp, #8]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6a3a      	ldr	r2, [r7, #32]
 800987a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f001 fbc1 	bl	800b004 <xTaskCreateStatic>
 8009882:	4603      	mov	r3, r0
 8009884:	613b      	str	r3, [r7, #16]
 8009886:	e013      	b.n	80098b0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d110      	bne.n	80098b0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	b29a      	uxth	r2, r3
 8009892:	f107 0310 	add.w	r3, r7, #16
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f001 fc0f 	bl	800b0c4 <xTaskCreate>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d001      	beq.n	80098b0 <osThreadNew+0x11a>
            hTask = NULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098b0:	693b      	ldr	r3, [r7, #16]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3728      	adds	r7, #40	@ 0x28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c2:	f3ef 8305 	mrs	r3, IPSR
 80098c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80098c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <osDelay+0x1c>
    stat = osErrorISR;
 80098ce:	f06f 0305 	mvn.w	r3, #5
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	e007      	b.n	80098e6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 fd4f 	bl	800b384 <vTaskDelay>
    }
  }

  return (stat);
 80098e6:	68fb      	ldr	r3, [r7, #12]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009900:	f3ef 8305 	mrs	r3, IPSR
 8009904:	613b      	str	r3, [r7, #16]
  return(result);
 8009906:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009908:	2b00      	cmp	r3, #0
 800990a:	d175      	bne.n	80099f8 <osSemaphoreNew+0x108>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d072      	beq.n	80099f8 <osSemaphoreNew+0x108>
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d86e      	bhi.n	80099f8 <osSemaphoreNew+0x108>
    mem = -1;
 800991a:	f04f 33ff 	mov.w	r3, #4294967295
 800991e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d015      	beq.n	8009952 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <osSemaphoreNew+0x4c>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2b4f      	cmp	r3, #79	@ 0x4f
 8009934:	d902      	bls.n	800993c <osSemaphoreNew+0x4c>
        mem = 1;
 8009936:	2301      	movs	r3, #1
 8009938:	61bb      	str	r3, [r7, #24]
 800993a:	e00c      	b.n	8009956 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d108      	bne.n	8009956 <osSemaphoreNew+0x66>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <osSemaphoreNew+0x66>
          mem = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	e001      	b.n	8009956 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d04c      	beq.n	80099f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d128      	bne.n	80099b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d10a      	bne.n	8009980 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2203      	movs	r2, #3
 8009970:	9200      	str	r2, [sp, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	2001      	movs	r0, #1
 8009978:	f000 fb82 	bl	800a080 <xQueueGenericCreateStatic>
 800997c:	61f8      	str	r0, [r7, #28]
 800997e:	e005      	b.n	800998c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009980:	2203      	movs	r2, #3
 8009982:	2100      	movs	r1, #0
 8009984:	2001      	movs	r0, #1
 8009986:	f000 fbf8 	bl	800a17a <xQueueGenericCreate>
 800998a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d022      	beq.n	80099d8 <osSemaphoreNew+0xe8>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01f      	beq.n	80099d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009998:	2300      	movs	r3, #0
 800999a:	2200      	movs	r2, #0
 800999c:	2100      	movs	r1, #0
 800999e:	69f8      	ldr	r0, [r7, #28]
 80099a0:	f000 fcb8 	bl	800a314 <xQueueGenericSend>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d016      	beq.n	80099d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80099aa:	69f8      	ldr	r0, [r7, #28]
 80099ac:	f001 f956 	bl	800ac5c <vQueueDelete>
            hSemaphore = NULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	e010      	b.n	80099d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d108      	bne.n	80099ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 fc36 	bl	800a236 <xQueueCreateCountingSemaphoreStatic>
 80099ca:	61f8      	str	r0, [r7, #28]
 80099cc:	e004      	b.n	80099d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fc69 	bl	800a2a8 <xQueueCreateCountingSemaphore>
 80099d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00c      	beq.n	80099f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <osSemaphoreNew+0xfc>
          name = attr->name;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	e001      	b.n	80099f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80099f0:	6979      	ldr	r1, [r7, #20]
 80099f2:	69f8      	ldr	r0, [r7, #28]
 80099f4:	f001 fa7e 	bl	800aef4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80099f8:	69fb      	ldr	r3, [r7, #28]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009a1c:	f06f 0303 	mvn.w	r3, #3
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	e039      	b.n	8009a98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a24:	f3ef 8305 	mrs	r3, IPSR
 8009a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d022      	beq.n	8009a76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009a36:	f06f 0303 	mvn.w	r3, #3
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e02c      	b.n	8009a98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	461a      	mov	r2, r3
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6938      	ldr	r0, [r7, #16]
 8009a4c:	f001 f884 	bl	800ab58 <xQueueReceiveFromISR>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d003      	beq.n	8009a5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009a56:	f06f 0302 	mvn.w	r3, #2
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e01c      	b.n	8009a98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d019      	beq.n	8009a98 <osSemaphoreAcquire+0x94>
 8009a64:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa4 <osSemaphoreAcquire+0xa0>)
 8009a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	e010      	b.n	8009a98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6938      	ldr	r0, [r7, #16]
 8009a7a:	f000 ff5d 	bl	800a938 <xQueueSemaphoreTake>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d009      	beq.n	8009a98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009a8a:	f06f 0301 	mvn.w	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e002      	b.n	8009a98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009a92:	f06f 0302 	mvn.w	r3, #2
 8009a96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009a98:	697b      	ldr	r3, [r7, #20]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	e000ed04 	.word	0xe000ed04

08009aa8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009abe:	f06f 0303 	mvn.w	r3, #3
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e02c      	b.n	8009b20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac6:	f3ef 8305 	mrs	r3, IPSR
 8009aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8009acc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01a      	beq.n	8009b08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ad6:	f107 0308 	add.w	r3, r7, #8
 8009ada:	4619      	mov	r1, r3
 8009adc:	6938      	ldr	r0, [r7, #16]
 8009ade:	f000 fdb9 	bl	800a654 <xQueueGiveFromISR>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d003      	beq.n	8009af0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009ae8:	f06f 0302 	mvn.w	r3, #2
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e017      	b.n	8009b20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d014      	beq.n	8009b20 <osSemaphoreRelease+0x78>
 8009af6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <osSemaphoreRelease+0x84>)
 8009af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	e00b      	b.n	8009b20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6938      	ldr	r0, [r7, #16]
 8009b10:	f000 fc00 	bl	800a314 <xQueueGenericSend>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d002      	beq.n	8009b20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009b1a:	f06f 0302 	mvn.w	r3, #2
 8009b1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009b20:	697b      	ldr	r3, [r7, #20]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b3c:	f3ef 8305 	mrs	r3, IPSR
 8009b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b42:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009b48:	f06f 0305 	mvn.w	r3, #5
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e00e      	b.n	8009b6e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d103      	bne.n	8009b5e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009b56:	f06f 0303 	mvn.w	r3, #3
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e007      	b.n	8009b6e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009b5e:	6938      	ldr	r0, [r7, #16]
 8009b60:	f001 f9f2 	bl	800af48 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009b68:	6938      	ldr	r0, [r7, #16]
 8009b6a:	f001 f877 	bl	800ac5c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009b6e:	697b      	ldr	r3, [r7, #20]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	@ 0x28
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b88:	f3ef 8305 	mrs	r3, IPSR
 8009b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8009b8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d15f      	bne.n	8009c54 <osMessageQueueNew+0xdc>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d05c      	beq.n	8009c54 <osMessageQueueNew+0xdc>
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d059      	beq.n	8009c54 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d029      	beq.n	8009c00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d012      	beq.n	8009bda <osMessageQueueNew+0x62>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b4f      	cmp	r3, #79	@ 0x4f
 8009bba:	d90e      	bls.n	8009bda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	695a      	ldr	r2, [r3, #20]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d302      	bcc.n	8009bda <osMessageQueueNew+0x62>
        mem = 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e014      	b.n	8009c04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d110      	bne.n	8009c04 <osMessageQueueNew+0x8c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10c      	bne.n	8009c04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <osMessageQueueNew+0x8c>
          mem = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61bb      	str	r3, [r7, #24]
 8009bfe:	e001      	b.n	8009c04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d10b      	bne.n	8009c22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2100      	movs	r1, #0
 8009c14:	9100      	str	r1, [sp, #0]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fa31 	bl	800a080 <xQueueGenericCreateStatic>
 8009c1e:	61f8      	str	r0, [r7, #28]
 8009c20:	e008      	b.n	8009c34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c28:	2200      	movs	r2, #0
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 faa4 	bl	800a17a <xQueueGenericCreate>
 8009c32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00c      	beq.n	8009c54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	e001      	b.n	8009c4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	69f8      	ldr	r0, [r7, #28]
 8009c50:	f001 f950 	bl	800aef4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c54:	69fb      	ldr	r3, [r7, #28]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c78:	f3ef 8305 	mrs	r3, IPSR
 8009c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d028      	beq.n	8009cd6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <osMessageQueuePut+0x36>
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <osMessageQueuePut+0x36>
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c96:	f06f 0303 	mvn.w	r3, #3
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	e038      	b.n	8009d10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009ca2:	f107 0210 	add.w	r2, r7, #16
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	69b8      	ldr	r0, [r7, #24]
 8009cac:	f000 fc34 	bl	800a518 <xQueueGenericSendFromISR>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d003      	beq.n	8009cbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009cb6:	f06f 0302 	mvn.w	r3, #2
 8009cba:	61fb      	str	r3, [r7, #28]
 8009cbc:	e028      	b.n	8009d10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d025      	beq.n	8009d10 <osMessageQueuePut+0xb0>
 8009cc4:	4b15      	ldr	r3, [pc, #84]	@ (8009d1c <osMessageQueuePut+0xbc>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	e01c      	b.n	8009d10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <osMessageQueuePut+0x82>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d103      	bne.n	8009cea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009ce2:	f06f 0303 	mvn.w	r3, #3
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	e012      	b.n	8009d10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cea:	2300      	movs	r3, #0
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	69b8      	ldr	r0, [r7, #24]
 8009cf2:	f000 fb0f 	bl	800a314 <xQueueGenericSend>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d009      	beq.n	8009d10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009d02:	f06f 0301 	mvn.w	r3, #1
 8009d06:	61fb      	str	r3, [r7, #28]
 8009d08:	e002      	b.n	8009d10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009d0a:	f06f 0302 	mvn.w	r3, #2
 8009d0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d10:	69fb      	ldr	r3, [r7, #28]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d36:	f3ef 8305 	mrs	r3, IPSR
 8009d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d028      	beq.n	8009d94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <osMessageQueueGet+0x34>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <osMessageQueueGet+0x34>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009d54:	f06f 0303 	mvn.w	r3, #3
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	e037      	b.n	8009dcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d60:	f107 0310 	add.w	r3, r7, #16
 8009d64:	461a      	mov	r2, r3
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	69b8      	ldr	r0, [r7, #24]
 8009d6a:	f000 fef5 	bl	800ab58 <xQueueReceiveFromISR>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d003      	beq.n	8009d7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009d74:	f06f 0302 	mvn.w	r3, #2
 8009d78:	61fb      	str	r3, [r7, #28]
 8009d7a:	e027      	b.n	8009dcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d024      	beq.n	8009dcc <osMessageQueueGet+0xac>
 8009d82:	4b15      	ldr	r3, [pc, #84]	@ (8009dd8 <osMessageQueueGet+0xb8>)
 8009d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	e01b      	b.n	8009dcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <osMessageQueueGet+0x80>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009da0:	f06f 0303 	mvn.w	r3, #3
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	e011      	b.n	8009dcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	69b8      	ldr	r0, [r7, #24]
 8009dae:	f000 fce1 	bl	800a774 <xQueueReceive>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d009      	beq.n	8009dcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009dbe:	f06f 0301 	mvn.w	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e002      	b.n	8009dcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009dc6:	f06f 0302 	mvn.w	r3, #2
 8009dca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009dcc:	69fb      	ldr	r3, [r7, #28]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3720      	adds	r7, #32
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4a07      	ldr	r2, [pc, #28]	@ (8009e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	4a06      	ldr	r2, [pc, #24]	@ (8009e0c <vApplicationGetIdleTaskMemory+0x30>)
 8009df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2280      	movs	r2, #128	@ 0x80
 8009df8:	601a      	str	r2, [r3, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20000a8c 	.word	0x20000a8c
 8009e0c:	20000b38 	.word	0x20000b38

08009e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4a07      	ldr	r2, [pc, #28]	@ (8009e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8009e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4a06      	ldr	r2, [pc, #24]	@ (8009e40 <vApplicationGetTimerTaskMemory+0x30>)
 8009e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e2e:	601a      	str	r2, [r3, #0]
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	20000d38 	.word	0x20000d38
 8009e40:	20000de4 	.word	0x20000de4

08009e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f103 0208 	add.w	r2, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f103 0208 	add.w	r2, r3, #8
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f103 0208 	add.w	r2, r3, #8
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	601a      	str	r2, [r3, #0]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efc:	d103      	bne.n	8009f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e00c      	b.n	8009f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e002      	b.n	8009f14 <vListInsert+0x2e>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d2f6      	bcs.n	8009f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	601a      	str	r2, [r3, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6892      	ldr	r2, [r2, #8]
 8009f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6852      	ldr	r2, [r2, #4]
 8009f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d103      	bne.n	8009f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	1e5a      	subs	r2, r3, #1
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10b      	bne.n	8009fd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	e7fd      	b.n	8009fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fd8:	f002 ff86 	bl	800cee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fe8:	fb01 f303 	mul.w	r3, r1, r3
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a008:	3b01      	subs	r3, #1
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a00e:	fb01 f303 	mul.w	r3, r1, r3
 800a012:	441a      	add	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	22ff      	movs	r2, #255	@ 0xff
 800a01c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	22ff      	movs	r2, #255	@ 0xff
 800a024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d114      	bne.n	800a058 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01a      	beq.n	800a06c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3310      	adds	r3, #16
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fda4 	bl	800bb88 <xTaskRemoveFromEventList>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d012      	beq.n	800a06c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a046:	4b0d      	ldr	r3, [pc, #52]	@ (800a07c <xQueueGenericReset+0xd0>)
 800a048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	e009      	b.n	800a06c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3310      	adds	r3, #16
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fef1 	bl	8009e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3324      	adds	r3, #36	@ 0x24
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff feec 	bl	8009e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a06c:	f002 ff6e 	bl	800cf4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a070:	2301      	movs	r3, #1
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	@ 0x38
 800a084:	af02      	add	r7, sp, #8
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <xQueueGenericCreateStatic+0x56>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <xQueueGenericCreateStatic+0x5a>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <xQueueGenericCreateStatic+0x5c>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10b      	bne.n	800a0f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	623b      	str	r3, [r7, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	bf00      	nop
 800a0f6:	e7fd      	b.n	800a0f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <xQueueGenericCreateStatic+0x84>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <xQueueGenericCreateStatic+0x88>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <xQueueGenericCreateStatic+0x8a>
 800a108:	2300      	movs	r3, #0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	61fb      	str	r3, [r7, #28]
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a126:	2350      	movs	r3, #80	@ 0x50
 800a128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b50      	cmp	r3, #80	@ 0x50
 800a12e:	d00b      	beq.n	800a148 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61bb      	str	r3, [r7, #24]
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00d      	beq.n	800a170 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a15c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f840 	bl	800a1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a172:	4618      	mov	r0, r3
 800a174:	3730      	adds	r7, #48	@ 0x30
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b08a      	sub	sp, #40	@ 0x28
 800a17e:	af02      	add	r7, sp, #8
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	4613      	mov	r3, r2
 800a186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	613b      	str	r3, [r7, #16]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	3350      	adds	r3, #80	@ 0x50
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 ffb9 	bl	800d12c <pvPortMalloc>
 800a1ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	3350      	adds	r3, #80	@ 0x50
 800a1ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1d4:	79fa      	ldrb	r2, [r7, #7]
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f805 	bl	800a1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3720      	adds	r7, #32
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d103      	bne.n	800a20c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	e002      	b.n	800a212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a21e:	2101      	movs	r1, #1
 800a220:	69b8      	ldr	r0, [r7, #24]
 800a222:	f7ff fec3 	bl	8009fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a236:	b580      	push	{r7, lr}
 800a238:	b08a      	sub	sp, #40	@ 0x28
 800a23a:	af02      	add	r7, sp, #8
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61bb      	str	r3, [r7, #24]
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	e7fd      	b.n	800a25c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	429a      	cmp	r2, r3
 800a266:	d90b      	bls.n	800a280 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	617b      	str	r3, [r7, #20]
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	e7fd      	b.n	800a27c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a280:	2302      	movs	r3, #2
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fef8 	bl	800a080 <xQueueGenericCreateStatic>
 800a290:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a29e:	69fb      	ldr	r3, [r7, #28]
	}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	613b      	str	r3, [r7, #16]
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d90b      	bls.n	800a2f0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	60fb      	str	r3, [r7, #12]
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	e7fd      	b.n	800a2ec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7ff ff40 	bl	800a17a <xQueueGenericCreate>
 800a2fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a308:	697b      	ldr	r3, [r7, #20]
	}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08e      	sub	sp, #56	@ 0x38
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a322:	2300      	movs	r3, #0
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <xQueueGenericSend+0x34>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <xQueueGenericSend+0x42>
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueGenericSend+0x46>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSend+0x48>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <xQueueGenericSend+0x64>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSend+0x72>
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <xQueueGenericSend+0x76>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericSend+0x78>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <xQueueGenericSend+0x94>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	e7fd      	b.n	800a3a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3a8:	f001 fe8a 	bl	800c0c0 <xTaskGetSchedulerState>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <xQueueGenericSend+0xa4>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <xQueueGenericSend+0xa8>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e000      	b.n	800a3be <xQueueGenericSend+0xaa>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <xQueueGenericSend+0xc6>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	61fb      	str	r3, [r7, #28]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3da:	f002 fd85 	bl	800cee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d302      	bcc.n	800a3f0 <xQueueGenericSend+0xdc>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d129      	bne.n	800a444 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f6:	f000 fc6d 	bl	800acd4 <prvCopyDataToQueue>
 800a3fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d010      	beq.n	800a426 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	3324      	adds	r3, #36	@ 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 fbbd 	bl	800bb88 <xTaskRemoveFromEventList>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d013      	beq.n	800a43c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a414:	4b3f      	ldr	r3, [pc, #252]	@ (800a514 <xQueueGenericSend+0x200>)
 800a416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	e00a      	b.n	800a43c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d007      	beq.n	800a43c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a42c:	4b39      	ldr	r3, [pc, #228]	@ (800a514 <xQueueGenericSend+0x200>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a43c:	f002 fd86 	bl	800cf4c <vPortExitCritical>
				return pdPASS;
 800a440:	2301      	movs	r3, #1
 800a442:	e063      	b.n	800a50c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a44a:	f002 fd7f 	bl	800cf4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a44e:	2300      	movs	r3, #0
 800a450:	e05c      	b.n	800a50c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a458:	f107 0314 	add.w	r3, r7, #20
 800a45c:	4618      	mov	r0, r3
 800a45e:	f001 fbf7 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a462:	2301      	movs	r3, #1
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a466:	f002 fd71 	bl	800cf4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a46a:	f001 f89b 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a46e:	f002 fd3b 	bl	800cee8 <vPortEnterCritical>
 800a472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a478:	b25b      	sxtb	r3, r3
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d103      	bne.n	800a488 <xQueueGenericSend+0x174>
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a48e:	b25b      	sxtb	r3, r3
 800a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a494:	d103      	bne.n	800a49e <xQueueGenericSend+0x18a>
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a49e:	f002 fd55 	bl	800cf4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4a2:	1d3a      	adds	r2, r7, #4
 800a4a4:	f107 0314 	add.w	r3, r7, #20
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f001 fbe6 	bl	800bc7c <xTaskCheckForTimeOut>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d124      	bne.n	800a500 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b8:	f000 fd04 	bl	800aec4 <prvIsQueueFull>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d018      	beq.n	800a4f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 fb0a 	bl	800bae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4d2:	f000 fc8f 	bl	800adf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4d6:	f001 f873 	bl	800b5c0 <xTaskResumeAll>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f47f af7c 	bne.w	800a3da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a514 <xQueueGenericSend+0x200>)
 800a4e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	e772      	b.n	800a3da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f6:	f000 fc7d 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4fa:	f001 f861 	bl	800b5c0 <xTaskResumeAll>
 800a4fe:	e76c      	b.n	800a3da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a502:	f000 fc77 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a506:	f001 f85b 	bl	800b5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a50a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3738      	adds	r7, #56	@ 0x38
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	e000ed04 	.word	0xe000ed04

0800a518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b090      	sub	sp, #64	@ 0x40
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10b      	bne.n	800a548 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <xQueueGenericSendFromISR+0x3e>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <xQueueGenericSendFromISR+0x42>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <xQueueGenericSendFromISR+0x44>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10b      	bne.n	800a578 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	e7fd      	b.n	800a574 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d103      	bne.n	800a586 <xQueueGenericSendFromISR+0x6e>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d101      	bne.n	800a58a <xQueueGenericSendFromISR+0x72>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericSendFromISR+0x74>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10b      	bne.n	800a5a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a8:	f002 fd7e 	bl	800d0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61fa      	str	r2, [r7, #28]
 800a5c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d302      	bcc.n	800a5da <xQueueGenericSendFromISR+0xc2>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d12f      	bne.n	800a63a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	68b9      	ldr	r1, [r7, #8]
 800a5ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5f0:	f000 fb70 	bl	800acd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d112      	bne.n	800a624 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a602:	2b00      	cmp	r3, #0
 800a604:	d016      	beq.n	800a634 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	3324      	adds	r3, #36	@ 0x24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fabc 	bl	800bb88 <xTaskRemoveFromEventList>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00e      	beq.n	800a634 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e007      	b.n	800a634 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a624:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a628:	3301      	adds	r3, #1
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	b25a      	sxtb	r2, r3
 800a62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a634:	2301      	movs	r3, #1
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a638:	e001      	b.n	800a63e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a648:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3740      	adds	r7, #64	@ 0x40
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08e      	sub	sp, #56	@ 0x38
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	623b      	str	r3, [r7, #32]
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00b      	beq.n	800a6a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61fb      	str	r3, [r7, #28]
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <xQueueGiveFromISR+0x5c>
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <xQueueGiveFromISR+0x60>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e000      	b.n	800a6b6 <xQueueGiveFromISR+0x62>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10b      	bne.n	800a6d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	61bb      	str	r3, [r7, #24]
}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	e7fd      	b.n	800a6ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6d2:	f002 fce9 	bl	800d0a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a6d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	617a      	str	r2, [r7, #20]
 800a6ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d22b      	bcs.n	800a75a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a714:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71c:	d112      	bne.n	800a744 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d016      	beq.n	800a754 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	3324      	adds	r3, #36	@ 0x24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fa2c 	bl	800bb88 <xTaskRemoveFromEventList>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00e      	beq.n	800a754 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2201      	movs	r2, #1
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	e007      	b.n	800a754 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a748:	3301      	adds	r3, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	b25a      	sxtb	r2, r3
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a754:	2301      	movs	r3, #1
 800a756:	637b      	str	r3, [r7, #52]	@ 0x34
 800a758:	e001      	b.n	800a75e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f383 8811 	msr	BASEPRI, r3
}
 800a768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3738      	adds	r7, #56	@ 0x38
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08c      	sub	sp, #48	@ 0x30
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a780:	2300      	movs	r3, #0
 800a782:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10b      	bne.n	800a7a6 <xQueueReceive+0x32>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	623b      	str	r3, [r7, #32]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d103      	bne.n	800a7b4 <xQueueReceive+0x40>
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <xQueueReceive+0x44>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e000      	b.n	800a7ba <xQueueReceive+0x46>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <xQueueReceive+0x62>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	61fb      	str	r3, [r7, #28]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7d6:	f001 fc73 	bl	800c0c0 <xTaskGetSchedulerState>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <xQueueReceive+0x72>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <xQueueReceive+0x76>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <xQueueReceive+0x78>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10b      	bne.n	800a808 <xQueueReceive+0x94>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	61bb      	str	r3, [r7, #24]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a808:	f002 fb6e 	bl	800cee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a810:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01f      	beq.n	800a858 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a81c:	f000 fac4 	bl	800ada8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	1e5a      	subs	r2, r3, #1
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00f      	beq.n	800a850 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	3310      	adds	r3, #16
 800a834:	4618      	mov	r0, r3
 800a836:	f001 f9a7 	bl	800bb88 <xTaskRemoveFromEventList>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d007      	beq.n	800a850 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a840:	4b3c      	ldr	r3, [pc, #240]	@ (800a934 <xQueueReceive+0x1c0>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a850:	f002 fb7c 	bl	800cf4c <vPortExitCritical>
				return pdPASS;
 800a854:	2301      	movs	r3, #1
 800a856:	e069      	b.n	800a92c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a85e:	f002 fb75 	bl	800cf4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a862:	2300      	movs	r3, #0
 800a864:	e062      	b.n	800a92c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a86c:	f107 0310 	add.w	r3, r7, #16
 800a870:	4618      	mov	r0, r3
 800a872:	f001 f9ed 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a876:	2301      	movs	r3, #1
 800a878:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a87a:	f002 fb67 	bl	800cf4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a87e:	f000 fe91 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a882:	f002 fb31 	bl	800cee8 <vPortEnterCritical>
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d103      	bne.n	800a89c <xQueueReceive+0x128>
 800a894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d103      	bne.n	800a8b2 <xQueueReceive+0x13e>
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b2:	f002 fb4b 	bl	800cf4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8b6:	1d3a      	adds	r2, r7, #4
 800a8b8:	f107 0310 	add.w	r3, r7, #16
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 f9dc 	bl	800bc7c <xTaskCheckForTimeOut>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d123      	bne.n	800a912 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8cc:	f000 fae4 	bl	800ae98 <prvIsQueueEmpty>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d017      	beq.n	800a906 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d8:	3324      	adds	r3, #36	@ 0x24
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 f900 	bl	800bae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8e6:	f000 fa85 	bl	800adf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8ea:	f000 fe69 	bl	800b5c0 <xTaskResumeAll>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d189      	bne.n	800a808 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a934 <xQueueReceive+0x1c0>)
 800a8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	e780      	b.n	800a808 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a908:	f000 fa74 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a90c:	f000 fe58 	bl	800b5c0 <xTaskResumeAll>
 800a910:	e77a      	b.n	800a808 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a914:	f000 fa6e 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a918:	f000 fe52 	bl	800b5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a91c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a91e:	f000 fabb 	bl	800ae98 <prvIsQueueEmpty>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	f43f af6f 	beq.w	800a808 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a92a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3730      	adds	r7, #48	@ 0x30
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	@ 0x38
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a942:	2300      	movs	r3, #0
 800a944:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	623b      	str	r3, [r7, #32]
}
 800a966:	bf00      	nop
 800a968:	bf00      	nop
 800a96a:	e7fd      	b.n	800a968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00b      	beq.n	800a98c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	61fb      	str	r3, [r7, #28]
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a98c:	f001 fb98 	bl	800c0c0 <xTaskGetSchedulerState>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <xQueueSemaphoreTake+0x64>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <xQueueSemaphoreTake+0x68>
 800a99c:	2301      	movs	r3, #1
 800a99e:	e000      	b.n	800a9a2 <xQueueSemaphoreTake+0x6a>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	61bb      	str	r3, [r7, #24]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9be:	f002 fa93 	bl	800cee8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d024      	beq.n	800aa18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	1e5a      	subs	r2, r3, #1
 800a9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d104      	bne.n	800a9e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9de:	f001 fd93 	bl	800c508 <pvTaskIncrementMutexHeldCount>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00f      	beq.n	800aa10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f2:	3310      	adds	r3, #16
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f8c7 	bl	800bb88 <xTaskRemoveFromEventList>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d007      	beq.n	800aa10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa00:	4b54      	ldr	r3, [pc, #336]	@ (800ab54 <xQueueSemaphoreTake+0x21c>)
 800aa02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa10:	f002 fa9c 	bl	800cf4c <vPortExitCritical>
				return pdPASS;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e098      	b.n	800ab4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d112      	bne.n	800aa44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	617b      	str	r3, [r7, #20]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa3c:	f002 fa86 	bl	800cf4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e082      	b.n	800ab4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa4a:	f107 030c 	add.w	r3, r7, #12
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 f8fe 	bl	800bc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa58:	f002 fa78 	bl	800cf4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa5c:	f000 fda2 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa60:	f002 fa42 	bl	800cee8 <vPortEnterCritical>
 800aa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d103      	bne.n	800aa7a <xQueueSemaphoreTake+0x142>
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa80:	b25b      	sxtb	r3, r3
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d103      	bne.n	800aa90 <xQueueSemaphoreTake+0x158>
 800aa88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa90:	f002 fa5c 	bl	800cf4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa94:	463a      	mov	r2, r7
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 f8ed 	bl	800bc7c <xTaskCheckForTimeOut>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d132      	bne.n	800ab0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaaa:	f000 f9f5 	bl	800ae98 <prvIsQueueEmpty>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d026      	beq.n	800ab02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aabc:	f002 fa14 	bl	800cee8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f001 fb19 	bl	800c0fc <xTaskPriorityInherit>
 800aaca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aacc:	f002 fa3e 	bl	800cf4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad2:	3324      	adds	r3, #36	@ 0x24
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f803 	bl	800bae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aae0:	f000 f988 	bl	800adf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aae4:	f000 fd6c 	bl	800b5c0 <xTaskResumeAll>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f47f af67 	bne.w	800a9be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aaf0:	4b18      	ldr	r3, [pc, #96]	@ (800ab54 <xQueueSemaphoreTake+0x21c>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	e75d      	b.n	800a9be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab04:	f000 f976 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab08:	f000 fd5a 	bl	800b5c0 <xTaskResumeAll>
 800ab0c:	e757      	b.n	800a9be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab10:	f000 f970 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab14:	f000 fd54 	bl	800b5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab1a:	f000 f9bd 	bl	800ae98 <prvIsQueueEmpty>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f43f af4c 	beq.w	800a9be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ab2c:	f002 f9dc 	bl	800cee8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab32:	f000 f8b7 	bl	800aca4 <prvGetDisinheritPriorityAfterTimeout>
 800ab36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fbb4 	bl	800c2ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab44:	f002 fa02 	bl	800cf4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3738      	adds	r7, #56	@ 0x38
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	@ 0x38
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	623b      	str	r3, [r7, #32]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <xQueueReceiveFromISR+0x3c>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <xQueueReceiveFromISR+0x40>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <xQueueReceiveFromISR+0x42>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	61fb      	str	r3, [r7, #28]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abb6:	f002 fa77 	bl	800d0a8 <vPortValidateInterruptPriority>
	__asm volatile
 800abba:	f3ef 8211 	mrs	r2, BASEPRI
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	61ba      	str	r2, [r7, #24]
 800abd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800abd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d02f      	beq.n	800ac42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800abe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abf0:	f000 f8da 	bl	800ada8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf6:	1e5a      	subs	r2, r3, #1
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800abfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac04:	d112      	bne.n	800ac2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d016      	beq.n	800ac3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	3310      	adds	r3, #16
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 ffb8 	bl	800bb88 <xTaskRemoveFromEventList>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00b      	beq.n	800ac3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	e007      	b.n	800ac3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac30:	3301      	adds	r3, #1
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	b25a      	sxtb	r2, r3
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac40:	e001      	b.n	800ac46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f383 8811 	msr	BASEPRI, r3
}
 800ac50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3738      	adds	r7, #56	@ 0x38
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <vQueueDelete+0x2a>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	60bb      	str	r3, [r7, #8]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f95e 	bl	800af48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f002 fb16 	bl	800d2c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e001      	b.n	800acc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800acc6:	68fb      	ldr	r3, [r7, #12]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10d      	bne.n	800ad0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d14d      	bne.n	800ad96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 fa64 	bl	800c1cc <xTaskPriorityDisinherit>
 800ad04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	609a      	str	r2, [r3, #8]
 800ad0c:	e043      	b.n	800ad96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d119      	bne.n	800ad48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6858      	ldr	r0, [r3, #4]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	f002 fd9c 	bl	800d85c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2c:	441a      	add	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d32b      	bcc.n	800ad96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	e026      	b.n	800ad96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68d8      	ldr	r0, [r3, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	461a      	mov	r2, r3
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	f002 fd82 	bl	800d85c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68da      	ldr	r2, [r3, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad60:	425b      	negs	r3, r3
 800ad62:	441a      	add	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d207      	bcs.n	800ad84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	441a      	add	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d105      	bne.n	800ad96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ad9e:	697b      	ldr	r3, [r7, #20]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d018      	beq.n	800adec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc2:	441a      	add	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	429a      	cmp	r2, r3
 800add2:	d303      	bcc.n	800addc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68d9      	ldr	r1, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade4:	461a      	mov	r2, r3
 800ade6:	6838      	ldr	r0, [r7, #0]
 800ade8:	f002 fd38 	bl	800d85c <memcpy>
	}
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800adfc:	f002 f874 	bl	800cee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae08:	e011      	b.n	800ae2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d012      	beq.n	800ae38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3324      	adds	r3, #36	@ 0x24
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 feb6 	bl	800bb88 <xTaskRemoveFromEventList>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae22:	f000 ff8f 	bl	800bd44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dce9      	bgt.n	800ae0a <prvUnlockQueue+0x16>
 800ae36:	e000      	b.n	800ae3a <prvUnlockQueue+0x46>
					break;
 800ae38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	22ff      	movs	r2, #255	@ 0xff
 800ae3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae42:	f002 f883 	bl	800cf4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae46:	f002 f84f 	bl	800cee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae52:	e011      	b.n	800ae78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d012      	beq.n	800ae82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3310      	adds	r3, #16
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fe91 	bl	800bb88 <xTaskRemoveFromEventList>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae6c:	f000 ff6a 	bl	800bd44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dce9      	bgt.n	800ae54 <prvUnlockQueue+0x60>
 800ae80:	e000      	b.n	800ae84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	22ff      	movs	r2, #255	@ 0xff
 800ae88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ae8c:	f002 f85e 	bl	800cf4c <vPortExitCritical>
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aea0:	f002 f822 	bl	800cee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aeac:	2301      	movs	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e001      	b.n	800aeb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aeb6:	f002 f849 	bl	800cf4c <vPortExitCritical>

	return xReturn;
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aecc:	f002 f80c 	bl	800cee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d102      	bne.n	800aee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	e001      	b.n	800aee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aee6:	f002 f831 	bl	800cf4c <vPortExitCritical>

	return xReturn;
 800aeea:	68fb      	ldr	r3, [r7, #12]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	e014      	b.n	800af2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af04:	4a0f      	ldr	r2, [pc, #60]	@ (800af44 <vQueueAddToRegistry+0x50>)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10b      	bne.n	800af28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af10:	490c      	ldr	r1, [pc, #48]	@ (800af44 <vQueueAddToRegistry+0x50>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af1a:	4a0a      	ldr	r2, [pc, #40]	@ (800af44 <vQueueAddToRegistry+0x50>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af26:	e006      	b.n	800af36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b07      	cmp	r3, #7
 800af32:	d9e7      	bls.n	800af04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	200011e4 	.word	0x200011e4

0800af48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	e016      	b.n	800af84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af56:	4a10      	ldr	r2, [pc, #64]	@ (800af98 <vQueueUnregisterQueue+0x50>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4413      	add	r3, r2
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	429a      	cmp	r2, r3
 800af64:	d10b      	bne.n	800af7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af66:	4a0c      	ldr	r2, [pc, #48]	@ (800af98 <vQueueUnregisterQueue+0x50>)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2100      	movs	r1, #0
 800af6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800af70:	4a09      	ldr	r2, [pc, #36]	@ (800af98 <vQueueUnregisterQueue+0x50>)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	4413      	add	r3, r2
 800af78:	2200      	movs	r2, #0
 800af7a:	605a      	str	r2, [r3, #4]
				break;
 800af7c:	e006      	b.n	800af8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b07      	cmp	r3, #7
 800af88:	d9e5      	bls.n	800af56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af8a:	bf00      	nop
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	200011e4 	.word	0x200011e4

0800af9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afac:	f001 ff9c 	bl	800cee8 <vPortEnterCritical>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afb6:	b25b      	sxtb	r3, r3
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbc:	d103      	bne.n	800afc6 <vQueueWaitForMessageRestricted+0x2a>
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d103      	bne.n	800afdc <vQueueWaitForMessageRestricted+0x40>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afdc:	f001 ffb6 	bl	800cf4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d106      	bne.n	800aff6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	3324      	adds	r3, #36	@ 0x24
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	68b9      	ldr	r1, [r7, #8]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 fd9d 	bl	800bb30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f7ff fefc 	bl	800adf4 <prvUnlockQueue>
	}
 800affc:	bf00      	nop
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08e      	sub	sp, #56	@ 0x38
 800b008:	af04      	add	r7, sp, #16
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10b      	bne.n	800b030 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	623b      	str	r3, [r7, #32]
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	e7fd      	b.n	800b02c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10b      	bne.n	800b04e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	61fb      	str	r3, [r7, #28]
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	e7fd      	b.n	800b04a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b04e:	23ac      	movs	r3, #172	@ 0xac
 800b050:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2bac      	cmp	r3, #172	@ 0xac
 800b056:	d00b      	beq.n	800b070 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	61bb      	str	r3, [r7, #24]
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	e7fd      	b.n	800b06c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b070:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01e      	beq.n	800b0b6 <xTaskCreateStatic+0xb2>
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01b      	beq.n	800b0b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b080:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b086:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b090:	2300      	movs	r3, #0
 800b092:	9303      	str	r3, [sp, #12]
 800b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b096:	9302      	str	r3, [sp, #8]
 800b098:	f107 0314 	add.w	r3, r7, #20
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	68b9      	ldr	r1, [r7, #8]
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 f851 	bl	800b150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0b0:	f000 f8f8 	bl	800b2a4 <prvAddNewTaskToReadyList>
 800b0b4:	e001      	b.n	800b0ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3728      	adds	r7, #40	@ 0x28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08c      	sub	sp, #48	@ 0x30
 800b0c8:	af04      	add	r7, sp, #16
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	603b      	str	r3, [r7, #0]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f827 	bl	800d12c <pvPortMalloc>
 800b0de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00e      	beq.n	800b104 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0e6:	20ac      	movs	r0, #172	@ 0xac
 800b0e8:	f002 f820 	bl	800d12c <pvPortMalloc>
 800b0ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0fa:	e005      	b.n	800b108 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0fc:	6978      	ldr	r0, [r7, #20]
 800b0fe:	f002 f8e3 	bl	800d2c8 <vPortFree>
 800b102:	e001      	b.n	800b108 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b104:	2300      	movs	r3, #0
 800b106:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d017      	beq.n	800b13e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b116:	88fa      	ldrh	r2, [r7, #6]
 800b118:	2300      	movs	r3, #0
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f80f 	bl	800b150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b132:	69f8      	ldr	r0, [r7, #28]
 800b134:	f000 f8b6 	bl	800b2a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b138:	2301      	movs	r3, #1
 800b13a:	61bb      	str	r3, [r7, #24]
 800b13c:	e002      	b.n	800b144 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b144:	69bb      	ldr	r3, [r7, #24]
	}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	461a      	mov	r2, r3
 800b168:	21a5      	movs	r1, #165	@ 0xa5
 800b16a:	f002 faaf 	bl	800d6cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b178:	3b01      	subs	r3, #1
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	f023 0307 	bic.w	r3, r3, #7
 800b186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00b      	beq.n	800b1aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	617b      	str	r3, [r7, #20]
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	e7fd      	b.n	800b1a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01f      	beq.n	800b1f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	e012      	b.n	800b1dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	7819      	ldrb	r1, [r3, #0]
 800b1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3334      	adds	r3, #52	@ 0x34
 800b1c6:	460a      	mov	r2, r1
 800b1c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d006      	beq.n	800b1e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b0f      	cmp	r3, #15
 800b1e0:	d9e9      	bls.n	800b1b6 <prvInitialiseNewTask+0x66>
 800b1e2:	e000      	b.n	800b1e6 <prvInitialiseNewTask+0x96>
			{
				break;
 800b1e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b1ee:	e003      	b.n	800b1f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	2b37      	cmp	r3, #55	@ 0x37
 800b1fc:	d901      	bls.n	800b202 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1fe:	2337      	movs	r3, #55	@ 0x37
 800b200:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b206:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b20c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	2200      	movs	r2, #0
 800b212:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b216:	3304      	adds	r3, #4
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe fe33 	bl	8009e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	3318      	adds	r3, #24
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe fe2e 	bl	8009e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b22c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b23c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	2200      	movs	r2, #0
 800b242:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b256:	3358      	adds	r3, #88	@ 0x58
 800b258:	224c      	movs	r2, #76	@ 0x4c
 800b25a:	2100      	movs	r1, #0
 800b25c:	4618      	mov	r0, r3
 800b25e:	f002 fa35 	bl	800d6cc <memset>
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	4a0c      	ldr	r2, [pc, #48]	@ (800b298 <prvInitialiseNewTask+0x148>)
 800b266:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	4a0c      	ldr	r2, [pc, #48]	@ (800b29c <prvInitialiseNewTask+0x14c>)
 800b26c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	4a0b      	ldr	r2, [pc, #44]	@ (800b2a0 <prvInitialiseNewTask+0x150>)
 800b272:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	69b8      	ldr	r0, [r7, #24]
 800b27a:	f001 fd07 	bl	800cc8c <pxPortInitialiseStack>
 800b27e:	4602      	mov	r2, r0
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b290:	bf00      	nop
 800b292:	3720      	adds	r7, #32
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20005480 	.word	0x20005480
 800b29c:	200054e8 	.word	0x200054e8
 800b2a0:	20005550 	.word	0x20005550

0800b2a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2ac:	f001 fe1c 	bl	800cee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ba:	4b2c      	ldr	r3, [pc, #176]	@ (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2c8:	4b27      	ldr	r3, [pc, #156]	@ (800b368 <prvAddNewTaskToReadyList+0xc4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d110      	bne.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2d0:	f000 fd5e 	bl	800bd90 <prvInitialiseTaskLists>
 800b2d4:	e00d      	b.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2d6:	4b26      	ldr	r3, [pc, #152]	@ (800b370 <prvAddNewTaskToReadyList+0xcc>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2de:	4b23      	ldr	r3, [pc, #140]	@ (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d802      	bhi.n	800b2f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2f2:	4b20      	ldr	r3, [pc, #128]	@ (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b374 <prvAddNewTaskToReadyList+0xd0>)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b308:	4b1b      	ldr	r3, [pc, #108]	@ (800b378 <prvAddNewTaskToReadyList+0xd4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d903      	bls.n	800b318 <prvAddNewTaskToReadyList+0x74>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b314:	4a18      	ldr	r2, [pc, #96]	@ (800b378 <prvAddNewTaskToReadyList+0xd4>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4a15      	ldr	r2, [pc, #84]	@ (800b37c <prvAddNewTaskToReadyList+0xd8>)
 800b326:	441a      	add	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7fe fdb5 	bl	8009e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b334:	f001 fe0a 	bl	800cf4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b338:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <prvAddNewTaskToReadyList+0xcc>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00e      	beq.n	800b35e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b340:	4b0a      	ldr	r3, [pc, #40]	@ (800b36c <prvAddNewTaskToReadyList+0xc8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d207      	bcs.n	800b35e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b34e:	4b0c      	ldr	r3, [pc, #48]	@ (800b380 <prvAddNewTaskToReadyList+0xdc>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	200016f8 	.word	0x200016f8
 800b36c:	20001224 	.word	0x20001224
 800b370:	20001704 	.word	0x20001704
 800b374:	20001714 	.word	0x20001714
 800b378:	20001700 	.word	0x20001700
 800b37c:	20001228 	.word	0x20001228
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d018      	beq.n	800b3c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b396:	4b14      	ldr	r3, [pc, #80]	@ (800b3e8 <vTaskDelay+0x64>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00b      	beq.n	800b3b6 <vTaskDelay+0x32>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	60bb      	str	r3, [r7, #8]
}
 800b3b0:	bf00      	nop
 800b3b2:	bf00      	nop
 800b3b4:	e7fd      	b.n	800b3b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3b6:	f000 f8f5 	bl	800b5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 f8b7 	bl	800c530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3c2:	f000 f8fd 	bl	800b5c0 <xTaskResumeAll>
 800b3c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d107      	bne.n	800b3de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3ce:	4b07      	ldr	r3, [pc, #28]	@ (800b3ec <vTaskDelay+0x68>)
 800b3d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20001720 	.word	0x20001720
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <eTaskGetState+0x2a>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	60bb      	str	r3, [r7, #8]
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	e7fd      	b.n	800b416 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b41a:	4b24      	ldr	r3, [pc, #144]	@ (800b4ac <eTaskGetState+0xbc>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	d102      	bne.n	800b42a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b424:	2300      	movs	r3, #0
 800b426:	77fb      	strb	r3, [r7, #31]
 800b428:	e03a      	b.n	800b4a0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800b42a:	f001 fd5d 	bl	800cee8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b434:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b0 <eTaskGetState+0xc0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b43a:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b4 <eTaskGetState+0xc4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b440:	f001 fd84 	bl	800cf4c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d003      	beq.n	800b454 <eTaskGetState+0x64>
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	429a      	cmp	r2, r3
 800b452:	d102      	bne.n	800b45a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b454:	2302      	movs	r3, #2
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e022      	b.n	800b4a0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	4a16      	ldr	r2, [pc, #88]	@ (800b4b8 <eTaskGetState+0xc8>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d112      	bne.n	800b488 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b01      	cmp	r3, #1
 800b474:	d102      	bne.n	800b47c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800b476:	2302      	movs	r3, #2
 800b478:	77fb      	strb	r3, [r7, #31]
 800b47a:	e011      	b.n	800b4a0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800b47c:	2303      	movs	r3, #3
 800b47e:	77fb      	strb	r3, [r7, #31]
 800b480:	e00e      	b.n	800b4a0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b482:	2302      	movs	r3, #2
 800b484:	77fb      	strb	r3, [r7, #31]
 800b486:	e00b      	b.n	800b4a0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	4a0c      	ldr	r2, [pc, #48]	@ (800b4bc <eTaskGetState+0xcc>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d002      	beq.n	800b496 <eTaskGetState+0xa6>
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b496:	2304      	movs	r3, #4
 800b498:	77fb      	strb	r3, [r7, #31]
 800b49a:	e001      	b.n	800b4a0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b49c:	2301      	movs	r3, #1
 800b49e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b4a0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3720      	adds	r7, #32
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20001224 	.word	0x20001224
 800b4b0:	200016b0 	.word	0x200016b0
 800b4b4:	200016b4 	.word	0x200016b4
 800b4b8:	200016e4 	.word	0x200016e4
 800b4bc:	200016cc 	.word	0x200016cc

0800b4c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	@ 0x28
 800b4c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ce:	463a      	mov	r2, r7
 800b4d0:	1d39      	adds	r1, r7, #4
 800b4d2:	f107 0308 	add.w	r3, r7, #8
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe fc80 	bl	8009ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	9202      	str	r2, [sp, #8]
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	460a      	mov	r2, r1
 800b4ee:	4925      	ldr	r1, [pc, #148]	@ (800b584 <vTaskStartScheduler+0xc4>)
 800b4f0:	4825      	ldr	r0, [pc, #148]	@ (800b588 <vTaskStartScheduler+0xc8>)
 800b4f2:	f7ff fd87 	bl	800b004 <xTaskCreateStatic>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4a24      	ldr	r2, [pc, #144]	@ (800b58c <vTaskStartScheduler+0xcc>)
 800b4fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4fc:	4b23      	ldr	r3, [pc, #140]	@ (800b58c <vTaskStartScheduler+0xcc>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b504:	2301      	movs	r3, #1
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	e001      	b.n	800b50e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d102      	bne.n	800b51a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b514:	f001 f860 	bl	800c5d8 <xTimerCreateTimerTask>
 800b518:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d11d      	bne.n	800b55c <vTaskStartScheduler+0x9c>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b534:	4b16      	ldr	r3, [pc, #88]	@ (800b590 <vTaskStartScheduler+0xd0>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3358      	adds	r3, #88	@ 0x58
 800b53a:	4a16      	ldr	r2, [pc, #88]	@ (800b594 <vTaskStartScheduler+0xd4>)
 800b53c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b53e:	4b16      	ldr	r3, [pc, #88]	@ (800b598 <vTaskStartScheduler+0xd8>)
 800b540:	f04f 32ff 	mov.w	r2, #4294967295
 800b544:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b546:	4b15      	ldr	r3, [pc, #84]	@ (800b59c <vTaskStartScheduler+0xdc>)
 800b548:	2201      	movs	r2, #1
 800b54a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b54c:	4b14      	ldr	r3, [pc, #80]	@ (800b5a0 <vTaskStartScheduler+0xe0>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b552:	f7f5 f80d 	bl	8000570 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b556:	f001 fc23 	bl	800cda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b55a:	e00f      	b.n	800b57c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d10b      	bne.n	800b57c <vTaskStartScheduler+0xbc>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	60fb      	str	r3, [r7, #12]
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	e7fd      	b.n	800b578 <vTaskStartScheduler+0xb8>
}
 800b57c:	bf00      	nop
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	0800e2b0 	.word	0x0800e2b0
 800b588:	0800bd5d 	.word	0x0800bd5d
 800b58c:	2000171c 	.word	0x2000171c
 800b590:	20001224 	.word	0x20001224
 800b594:	20000060 	.word	0x20000060
 800b598:	20001718 	.word	0x20001718
 800b59c:	20001704 	.word	0x20001704
 800b5a0:	200016fc 	.word	0x200016fc

0800b5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5a8:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <vTaskSuspendAll+0x18>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a03      	ldr	r2, [pc, #12]	@ (800b5bc <vTaskSuspendAll+0x18>)
 800b5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5b2:	bf00      	nop
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20001720 	.word	0x20001720

0800b5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ce:	4b42      	ldr	r3, [pc, #264]	@ (800b6d8 <xTaskResumeAll+0x118>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10b      	bne.n	800b5ee <xTaskResumeAll+0x2e>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	603b      	str	r3, [r7, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5ee:	f001 fc7b 	bl	800cee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5f2:	4b39      	ldr	r3, [pc, #228]	@ (800b6d8 <xTaskResumeAll+0x118>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	4a37      	ldr	r2, [pc, #220]	@ (800b6d8 <xTaskResumeAll+0x118>)
 800b5fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5fc:	4b36      	ldr	r3, [pc, #216]	@ (800b6d8 <xTaskResumeAll+0x118>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d162      	bne.n	800b6ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b604:	4b35      	ldr	r3, [pc, #212]	@ (800b6dc <xTaskResumeAll+0x11c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d05e      	beq.n	800b6ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b60c:	e02f      	b.n	800b66e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60e:	4b34      	ldr	r3, [pc, #208]	@ (800b6e0 <xTaskResumeAll+0x120>)
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3318      	adds	r3, #24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fc9c 	bl	8009f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3304      	adds	r3, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fc97 	bl	8009f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b62e:	4b2d      	ldr	r3, [pc, #180]	@ (800b6e4 <xTaskResumeAll+0x124>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d903      	bls.n	800b63e <xTaskResumeAll+0x7e>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63a:	4a2a      	ldr	r2, [pc, #168]	@ (800b6e4 <xTaskResumeAll+0x124>)
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4a27      	ldr	r2, [pc, #156]	@ (800b6e8 <xTaskResumeAll+0x128>)
 800b64c:	441a      	add	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3304      	adds	r3, #4
 800b652:	4619      	mov	r1, r3
 800b654:	4610      	mov	r0, r2
 800b656:	f7fe fc22 	bl	8009e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65e:	4b23      	ldr	r3, [pc, #140]	@ (800b6ec <xTaskResumeAll+0x12c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	429a      	cmp	r2, r3
 800b666:	d302      	bcc.n	800b66e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b668:	4b21      	ldr	r3, [pc, #132]	@ (800b6f0 <xTaskResumeAll+0x130>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b66e:	4b1c      	ldr	r3, [pc, #112]	@ (800b6e0 <xTaskResumeAll+0x120>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1cb      	bne.n	800b60e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b67c:	f000 fd00 	bl	800c080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b680:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f4 <xTaskResumeAll+0x134>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d010      	beq.n	800b6ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b68c:	f000 f8e8 	bl	800b860 <xTaskIncrementTick>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b696:	4b16      	ldr	r3, [pc, #88]	@ (800b6f0 <xTaskResumeAll+0x130>)
 800b698:	2201      	movs	r2, #1
 800b69a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f1      	bne.n	800b68c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b6a8:	4b12      	ldr	r3, [pc, #72]	@ (800b6f4 <xTaskResumeAll+0x134>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6ae:	4b10      	ldr	r3, [pc, #64]	@ (800b6f0 <xTaskResumeAll+0x130>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d009      	beq.n	800b6ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b6f8 <xTaskResumeAll+0x138>)
 800b6bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6ca:	f001 fc3f 	bl	800cf4c <vPortExitCritical>

	return xAlreadyYielded;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001720 	.word	0x20001720
 800b6dc:	200016f8 	.word	0x200016f8
 800b6e0:	200016b8 	.word	0x200016b8
 800b6e4:	20001700 	.word	0x20001700
 800b6e8:	20001228 	.word	0x20001228
 800b6ec:	20001224 	.word	0x20001224
 800b6f0:	2000170c 	.word	0x2000170c
 800b6f4:	20001708 	.word	0x20001708
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b702:	4b05      	ldr	r3, [pc, #20]	@ (800b718 <xTaskGetTickCount+0x1c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b708:	687b      	ldr	r3, [r7, #4]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	200016fc 	.word	0x200016fc

0800b71c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b722:	f001 fcc1 	bl	800d0a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b726:	2300      	movs	r3, #0
 800b728:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b72a:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <xTaskGetTickCountFromISR+0x20>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b730:	683b      	ldr	r3, [r7, #0]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200016fc 	.word	0x200016fc

0800b740 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	2338      	movs	r3, #56	@ 0x38
 800b752:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800b754:	f7ff ff26 	bl	800b5a4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800b758:	4b3b      	ldr	r3, [pc, #236]	@ (800b848 <uxTaskGetSystemState+0x108>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d36a      	bcc.n	800b838 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	3b01      	subs	r3, #1
 800b766:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	4613      	mov	r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	461a      	mov	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	1898      	adds	r0, r3, r2
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4a32      	ldr	r2, [pc, #200]	@ (800b84c <uxTaskGetSystemState+0x10c>)
 800b784:	4413      	add	r3, r2
 800b786:	2201      	movs	r2, #1
 800b788:	4619      	mov	r1, r3
 800b78a:	f000 fbd5 	bl	800bf38 <prvListTasksWithinSingleList>
 800b78e:	4602      	mov	r2, r0
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	4413      	add	r3, r2
 800b794:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e2      	bne.n	800b762 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4a28      	ldr	r2, [pc, #160]	@ (800b850 <uxTaskGetSystemState+0x110>)
 800b7ae:	6811      	ldr	r1, [r2, #0]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 fbc0 	bl	800bf38 <prvListTasksWithinSingleList>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	4413      	add	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	4a20      	ldr	r2, [pc, #128]	@ (800b854 <uxTaskGetSystemState+0x114>)
 800b7d2:	6811      	ldr	r1, [r2, #0]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 fbae 	bl	800bf38 <prvListTasksWithinSingleList>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	2204      	movs	r2, #4
 800b7f6:	4918      	ldr	r1, [pc, #96]	@ (800b858 <uxTaskGetSystemState+0x118>)
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 fb9d 	bl	800bf38 <prvListTasksWithinSingleList>
 800b7fe:	4602      	mov	r2, r0
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	4413      	add	r3, r2
 800b804:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4613      	mov	r3, r2
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	461a      	mov	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4413      	add	r3, r2
 800b816:	2203      	movs	r2, #3
 800b818:	4910      	ldr	r1, [pc, #64]	@ (800b85c <uxTaskGetSystemState+0x11c>)
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fb8c 	bl	800bf38 <prvListTasksWithinSingleList>
 800b820:	4602      	mov	r2, r0
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	4413      	add	r3, r2
 800b826:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b82e:	f7f4 feab 	bl	8000588 <getRunTimeCounterValue>
 800b832:	4602      	mov	r2, r0
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800b838:	f7ff fec2 	bl	800b5c0 <xTaskResumeAll>

		return uxTask;
 800b83c:	697b      	ldr	r3, [r7, #20]
	}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200016f8 	.word	0x200016f8
 800b84c:	20001228 	.word	0x20001228
 800b850:	200016b0 	.word	0x200016b0
 800b854:	200016b4 	.word	0x200016b4
 800b858:	200016cc 	.word	0x200016cc
 800b85c:	200016e4 	.word	0x200016e4

0800b860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86a:	4b53      	ldr	r3, [pc, #332]	@ (800b9b8 <xTaskIncrementTick+0x158>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f040 8096 	bne.w	800b9a0 <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b874:	4b51      	ldr	r3, [pc, #324]	@ (800b9bc <xTaskIncrementTick+0x15c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b87c:	4a4f      	ldr	r2, [pc, #316]	@ (800b9bc <xTaskIncrementTick+0x15c>)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d121      	bne.n	800b8cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b888:	4b4d      	ldr	r3, [pc, #308]	@ (800b9c0 <xTaskIncrementTick+0x160>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	603b      	str	r3, [r7, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <xTaskIncrementTick+0x46>
 800b8aa:	4b45      	ldr	r3, [pc, #276]	@ (800b9c0 <xTaskIncrementTick+0x160>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	4b44      	ldr	r3, [pc, #272]	@ (800b9c4 <xTaskIncrementTick+0x164>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a42      	ldr	r2, [pc, #264]	@ (800b9c0 <xTaskIncrementTick+0x160>)
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	4a42      	ldr	r2, [pc, #264]	@ (800b9c4 <xTaskIncrementTick+0x164>)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	4b42      	ldr	r3, [pc, #264]	@ (800b9c8 <xTaskIncrementTick+0x168>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	4a40      	ldr	r2, [pc, #256]	@ (800b9c8 <xTaskIncrementTick+0x168>)
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	f000 fbda 	bl	800c080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8cc:	4b3f      	ldr	r3, [pc, #252]	@ (800b9cc <xTaskIncrementTick+0x16c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d349      	bcc.n	800b96a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8d6:	4b3a      	ldr	r3, [pc, #232]	@ (800b9c0 <xTaskIncrementTick+0x160>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b9cc <xTaskIncrementTick+0x16c>)
 800b8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e6:	601a      	str	r2, [r3, #0]
					break;
 800b8e8:	e03f      	b.n	800b96a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ea:	4b35      	ldr	r3, [pc, #212]	@ (800b9c0 <xTaskIncrementTick+0x160>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d203      	bcs.n	800b90a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b902:	4a32      	ldr	r2, [pc, #200]	@ (800b9cc <xTaskIncrementTick+0x16c>)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b908:	e02f      	b.n	800b96a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fb22 	bl	8009f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d004      	beq.n	800b926 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	3318      	adds	r3, #24
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fb19 	bl	8009f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4b29      	ldr	r3, [pc, #164]	@ (800b9d0 <xTaskIncrementTick+0x170>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d903      	bls.n	800b93a <xTaskIncrementTick+0xda>
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b936:	4a26      	ldr	r2, [pc, #152]	@ (800b9d0 <xTaskIncrementTick+0x170>)
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4a23      	ldr	r2, [pc, #140]	@ (800b9d4 <xTaskIncrementTick+0x174>)
 800b948:	441a      	add	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f7fe faa4 	bl	8009e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b95a:	4b1f      	ldr	r3, [pc, #124]	@ (800b9d8 <xTaskIncrementTick+0x178>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b960:	429a      	cmp	r2, r3
 800b962:	d3b8      	bcc.n	800b8d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b968:	e7b5      	b.n	800b8d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b96a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9d8 <xTaskIncrementTick+0x178>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b970:	4918      	ldr	r1, [pc, #96]	@ (800b9d4 <xTaskIncrementTick+0x174>)
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	440b      	add	r3, r1
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d901      	bls.n	800b986 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800b986:	4b15      	ldr	r3, [pc, #84]	@ (800b9dc <xTaskIncrementTick+0x17c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 800b98e:	f7f4 febb 	bl	8000708 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b992:	4b13      	ldr	r3, [pc, #76]	@ (800b9e0 <xTaskIncrementTick+0x180>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 800b99a:	2301      	movs	r3, #1
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	e006      	b.n	800b9ae <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b9dc <xTaskIncrementTick+0x17c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b9dc <xTaskIncrementTick+0x17c>)
 800b9a8:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800b9aa:	f7f4 fead 	bl	8000708 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800b9ae:	697b      	ldr	r3, [r7, #20]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20001720 	.word	0x20001720
 800b9bc:	200016fc 	.word	0x200016fc
 800b9c0:	200016b0 	.word	0x200016b0
 800b9c4:	200016b4 	.word	0x200016b4
 800b9c8:	20001710 	.word	0x20001710
 800b9cc:	20001718 	.word	0x20001718
 800b9d0:	20001700 	.word	0x20001700
 800b9d4:	20001228 	.word	0x20001228
 800b9d8:	20001224 	.word	0x20001224
 800b9dc:	20001708 	.word	0x20001708
 800b9e0:	2000170c 	.word	0x2000170c

0800b9e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9ea:	4b36      	ldr	r3, [pc, #216]	@ (800bac4 <vTaskSwitchContext+0xe0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9f2:	4b35      	ldr	r3, [pc, #212]	@ (800bac8 <vTaskSwitchContext+0xe4>)
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9f8:	e060      	b.n	800babc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800b9fa:	4b33      	ldr	r3, [pc, #204]	@ (800bac8 <vTaskSwitchContext+0xe4>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ba00:	f7f4 fdc2 	bl	8000588 <getRunTimeCounterValue>
 800ba04:	4603      	mov	r3, r0
 800ba06:	4a31      	ldr	r2, [pc, #196]	@ (800bacc <vTaskSwitchContext+0xe8>)
 800ba08:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ba0a:	4b30      	ldr	r3, [pc, #192]	@ (800bacc <vTaskSwitchContext+0xe8>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	4b30      	ldr	r3, [pc, #192]	@ (800bad0 <vTaskSwitchContext+0xec>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d909      	bls.n	800ba2a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ba16:	4b2f      	ldr	r3, [pc, #188]	@ (800bad4 <vTaskSwitchContext+0xf0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ba1c:	4a2b      	ldr	r2, [pc, #172]	@ (800bacc <vTaskSwitchContext+0xe8>)
 800ba1e:	6810      	ldr	r0, [r2, #0]
 800ba20:	4a2b      	ldr	r2, [pc, #172]	@ (800bad0 <vTaskSwitchContext+0xec>)
 800ba22:	6812      	ldr	r2, [r2, #0]
 800ba24:	1a82      	subs	r2, r0, r2
 800ba26:	440a      	add	r2, r1
 800ba28:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ba2a:	4b28      	ldr	r3, [pc, #160]	@ (800bacc <vTaskSwitchContext+0xe8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a28      	ldr	r2, [pc, #160]	@ (800bad0 <vTaskSwitchContext+0xec>)
 800ba30:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba32:	4b29      	ldr	r3, [pc, #164]	@ (800bad8 <vTaskSwitchContext+0xf4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	e011      	b.n	800ba5e <vTaskSwitchContext+0x7a>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10b      	bne.n	800ba58 <vTaskSwitchContext+0x74>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	607b      	str	r3, [r7, #4]
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <vTaskSwitchContext+0x70>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	491f      	ldr	r1, [pc, #124]	@ (800badc <vTaskSwitchContext+0xf8>)
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4613      	mov	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0e3      	beq.n	800ba3a <vTaskSwitchContext+0x56>
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	4613      	mov	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4a17      	ldr	r2, [pc, #92]	@ (800badc <vTaskSwitchContext+0xf8>)
 800ba7e:	4413      	add	r3, r2
 800ba80:	60bb      	str	r3, [r7, #8]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	605a      	str	r2, [r3, #4]
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3308      	adds	r3, #8
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d104      	bne.n	800baa2 <vTaskSwitchContext+0xbe>
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	605a      	str	r2, [r3, #4]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	4a0a      	ldr	r2, [pc, #40]	@ (800bad4 <vTaskSwitchContext+0xf0>)
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	4a0a      	ldr	r2, [pc, #40]	@ (800bad8 <vTaskSwitchContext+0xf4>)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bab2:	4b08      	ldr	r3, [pc, #32]	@ (800bad4 <vTaskSwitchContext+0xf0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3358      	adds	r3, #88	@ 0x58
 800bab8:	4a09      	ldr	r2, [pc, #36]	@ (800bae0 <vTaskSwitchContext+0xfc>)
 800baba:	6013      	str	r3, [r2, #0]
}
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20001720 	.word	0x20001720
 800bac8:	2000170c 	.word	0x2000170c
 800bacc:	20001728 	.word	0x20001728
 800bad0:	20001724 	.word	0x20001724
 800bad4:	20001224 	.word	0x20001224
 800bad8:	20001700 	.word	0x20001700
 800badc:	20001228 	.word	0x20001228
 800bae0:	20000060 	.word	0x20000060

0800bae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10b      	bne.n	800bb0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	60fb      	str	r3, [r7, #12]
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	e7fd      	b.n	800bb08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb0c:	4b07      	ldr	r3, [pc, #28]	@ (800bb2c <vTaskPlaceOnEventList+0x48>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3318      	adds	r3, #24
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7fe f9e6 	bl	8009ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	6838      	ldr	r0, [r7, #0]
 800bb1e:	f000 fd07 	bl	800c530 <prvAddCurrentTaskToDelayedList>
}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20001224 	.word	0x20001224

0800bb30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10b      	bne.n	800bb5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	617b      	str	r3, [r7, #20]
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	e7fd      	b.n	800bb56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4619      	mov	r1, r3
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7fe f99b 	bl	8009e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	68b8      	ldr	r0, [r7, #8]
 800bb78:	f000 fcda 	bl	800c530 <prvAddCurrentTaskToDelayedList>
	}
 800bb7c:	bf00      	nop
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20001224 	.word	0x20001224

0800bb88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10b      	bne.n	800bbb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	60fb      	str	r3, [r7, #12]
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	e7fd      	b.n	800bbb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe f9cc 	bl	8009f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc38 <xTaskRemoveFromEventList+0xb0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d11d      	bne.n	800bc04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe f9c3 	bl	8009f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd6:	4b19      	ldr	r3, [pc, #100]	@ (800bc3c <xTaskRemoveFromEventList+0xb4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d903      	bls.n	800bbe6 <xTaskRemoveFromEventList+0x5e>
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe2:	4a16      	ldr	r2, [pc, #88]	@ (800bc3c <xTaskRemoveFromEventList+0xb4>)
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4a13      	ldr	r2, [pc, #76]	@ (800bc40 <xTaskRemoveFromEventList+0xb8>)
 800bbf4:	441a      	add	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f7fe f94e 	bl	8009e9e <vListInsertEnd>
 800bc02:	e005      	b.n	800bc10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	3318      	adds	r3, #24
 800bc08:	4619      	mov	r1, r3
 800bc0a:	480e      	ldr	r0, [pc, #56]	@ (800bc44 <xTaskRemoveFromEventList+0xbc>)
 800bc0c:	f7fe f947 	bl	8009e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc14:	4b0c      	ldr	r3, [pc, #48]	@ (800bc48 <xTaskRemoveFromEventList+0xc0>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d905      	bls.n	800bc2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc22:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <xTaskRemoveFromEventList+0xc4>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e001      	b.n	800bc2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc2e:	697b      	ldr	r3, [r7, #20]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20001720 	.word	0x20001720
 800bc3c:	20001700 	.word	0x20001700
 800bc40:	20001228 	.word	0x20001228
 800bc44:	200016b8 	.word	0x200016b8
 800bc48:	20001224 	.word	0x20001224
 800bc4c:	2000170c 	.word	0x2000170c

0800bc50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <vTaskInternalSetTimeOutState+0x24>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc60:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <vTaskInternalSetTimeOutState+0x28>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	605a      	str	r2, [r3, #4]
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	20001710 	.word	0x20001710
 800bc78:	200016fc 	.word	0x200016fc

0800bc7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10b      	bne.n	800bca4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	613b      	str	r3, [r7, #16]
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	60fb      	str	r3, [r7, #12]
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	e7fd      	b.n	800bcbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bcc2:	f001 f911 	bl	800cee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcc6:	4b1d      	ldr	r3, [pc, #116]	@ (800bd3c <xTaskCheckForTimeOut+0xc0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	69ba      	ldr	r2, [r7, #24]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcde:	d102      	bne.n	800bce6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61fb      	str	r3, [r7, #28]
 800bce4:	e023      	b.n	800bd2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <xTaskCheckForTimeOut+0xc4>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d007      	beq.n	800bd02 <xTaskCheckForTimeOut+0x86>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d302      	bcc.n	800bd02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	e015      	b.n	800bd2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d20b      	bcs.n	800bd24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1ad2      	subs	r2, r2, r3
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff ff99 	bl	800bc50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	e004      	b.n	800bd2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd2e:	f001 f90d 	bl	800cf4c <vPortExitCritical>

	return xReturn;
 800bd32:	69fb      	ldr	r3, [r7, #28]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200016fc 	.word	0x200016fc
 800bd40:	20001710 	.word	0x20001710

0800bd44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd48:	4b03      	ldr	r3, [pc, #12]	@ (800bd58 <vTaskMissedYield+0x14>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	2000170c 	.word	0x2000170c

0800bd5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd64:	f000 f854 	bl	800be10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd68:	4b07      	ldr	r3, [pc, #28]	@ (800bd88 <prvIdleTask+0x2c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d907      	bls.n	800bd80 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bd70:	4b06      	ldr	r3, [pc, #24]	@ (800bd8c <prvIdleTask+0x30>)
 800bd72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bd80:	f7f4 fc0e 	bl	80005a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bd84:	e7ee      	b.n	800bd64 <prvIdleTask+0x8>
 800bd86:	bf00      	nop
 800bd88:	20001228 	.word	0x20001228
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd96:	2300      	movs	r3, #0
 800bd98:	607b      	str	r3, [r7, #4]
 800bd9a:	e00c      	b.n	800bdb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4a12      	ldr	r2, [pc, #72]	@ (800bdf0 <prvInitialiseTaskLists+0x60>)
 800bda8:	4413      	add	r3, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f84a 	bl	8009e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	607b      	str	r3, [r7, #4]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b37      	cmp	r3, #55	@ 0x37
 800bdba:	d9ef      	bls.n	800bd9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdbc:	480d      	ldr	r0, [pc, #52]	@ (800bdf4 <prvInitialiseTaskLists+0x64>)
 800bdbe:	f7fe f841 	bl	8009e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdc2:	480d      	ldr	r0, [pc, #52]	@ (800bdf8 <prvInitialiseTaskLists+0x68>)
 800bdc4:	f7fe f83e 	bl	8009e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdc8:	480c      	ldr	r0, [pc, #48]	@ (800bdfc <prvInitialiseTaskLists+0x6c>)
 800bdca:	f7fe f83b 	bl	8009e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdce:	480c      	ldr	r0, [pc, #48]	@ (800be00 <prvInitialiseTaskLists+0x70>)
 800bdd0:	f7fe f838 	bl	8009e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdd4:	480b      	ldr	r0, [pc, #44]	@ (800be04 <prvInitialiseTaskLists+0x74>)
 800bdd6:	f7fe f835 	bl	8009e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdda:	4b0b      	ldr	r3, [pc, #44]	@ (800be08 <prvInitialiseTaskLists+0x78>)
 800bddc:	4a05      	ldr	r2, [pc, #20]	@ (800bdf4 <prvInitialiseTaskLists+0x64>)
 800bdde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bde0:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <prvInitialiseTaskLists+0x7c>)
 800bde2:	4a05      	ldr	r2, [pc, #20]	@ (800bdf8 <prvInitialiseTaskLists+0x68>)
 800bde4:	601a      	str	r2, [r3, #0]
}
 800bde6:	bf00      	nop
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20001228 	.word	0x20001228
 800bdf4:	20001688 	.word	0x20001688
 800bdf8:	2000169c 	.word	0x2000169c
 800bdfc:	200016b8 	.word	0x200016b8
 800be00:	200016cc 	.word	0x200016cc
 800be04:	200016e4 	.word	0x200016e4
 800be08:	200016b0 	.word	0x200016b0
 800be0c:	200016b4 	.word	0x200016b4

0800be10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be16:	e019      	b.n	800be4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be18:	f001 f866 	bl	800cee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1c:	4b10      	ldr	r3, [pc, #64]	@ (800be60 <prvCheckTasksWaitingTermination+0x50>)
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe f895 	bl	8009f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be2e:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <prvCheckTasksWaitingTermination+0x54>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3b01      	subs	r3, #1
 800be34:	4a0b      	ldr	r2, [pc, #44]	@ (800be64 <prvCheckTasksWaitingTermination+0x54>)
 800be36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be38:	4b0b      	ldr	r3, [pc, #44]	@ (800be68 <prvCheckTasksWaitingTermination+0x58>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	4a0a      	ldr	r2, [pc, #40]	@ (800be68 <prvCheckTasksWaitingTermination+0x58>)
 800be40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be42:	f001 f883 	bl	800cf4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f8e4 	bl	800c014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be4c:	4b06      	ldr	r3, [pc, #24]	@ (800be68 <prvCheckTasksWaitingTermination+0x58>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e1      	bne.n	800be18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	200016cc 	.word	0x200016cc
 800be64:	200016f8 	.word	0x200016f8
 800be68:	200016e0 	.word	0x200016e0

0800be6c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <vTaskGetInfo+0x1a>
 800be80:	4b2c      	ldr	r3, [pc, #176]	@ (800bf34 <vTaskGetInfo+0xc8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	e000      	b.n	800be88 <vTaskGetInfo+0x1c>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	2b05      	cmp	r3, #5
 800bec6:	d01a      	beq.n	800befe <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800bec8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf34 <vTaskGetInfo+0xc8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d103      	bne.n	800beda <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2200      	movs	r2, #0
 800bed6:	731a      	strb	r2, [r3, #12]
 800bed8:	e018      	b.n	800bf0c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	78fa      	ldrb	r2, [r7, #3]
 800bede:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d112      	bne.n	800bf0c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800bee6:	f7ff fb5d 	bl	800b5a4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d002      	beq.n	800bef8 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2202      	movs	r2, #2
 800bef6:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800bef8:	f7ff fb62 	bl	800b5c0 <xTaskResumeAll>
 800befc:	e006      	b.n	800bf0c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f7ff fa76 	bl	800b3f0 <eTaskGetState>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 f860 	bl	800bfdc <prvTaskCheckFreeStackSpace>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461a      	mov	r2, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800bf24:	e002      	b.n	800bf2c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	841a      	strh	r2, [r3, #32]
	}
 800bf2c:	bf00      	nop
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20001224 	.word	0x20001224

0800bf38 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08a      	sub	sp, #40	@ 0x28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	4613      	mov	r3, r2
 800bf44:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d03f      	beq.n	800bfd2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	623b      	str	r3, [r7, #32]
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	605a      	str	r2, [r3, #4]
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	3308      	adds	r3, #8
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d104      	bne.n	800bf76 <prvListTasksWithinSingleList+0x3e>
 800bf6c:	6a3b      	ldr	r3, [r7, #32]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	605a      	str	r2, [r3, #4]
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	605a      	str	r2, [r3, #4]
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	3308      	adds	r3, #8
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d104      	bne.n	800bfa2 <prvListTasksWithinSingleList+0x6a>
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	605a      	str	r2, [r3, #4]
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800bfaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfac:	4613      	mov	r3, r2
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	1899      	adds	r1, r3, r2
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	6978      	ldr	r0, [r7, #20]
 800bfc0:	f7ff ff54 	bl	800be6c <vTaskGetInfo>
				uxTask++;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d1d5      	bne.n	800bf7e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3728      	adds	r7, #40	@ 0x28
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bfe8:	e005      	b.n	800bff6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3301      	adds	r3, #1
 800bfee:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3301      	adds	r3, #1
 800bff4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	2ba5      	cmp	r3, #165	@ 0xa5
 800bffc:	d0f5      	beq.n	800bfea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	089b      	lsrs	r3, r3, #2
 800c002:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	b29b      	uxth	r3, r3
	}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3358      	adds	r3, #88	@ 0x58
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fb91 	bl	800d748 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d108      	bne.n	800c042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c034:	4618      	mov	r0, r3
 800c036:	f001 f947 	bl	800d2c8 <vPortFree>
				vPortFree( pxTCB );
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f944 	bl	800d2c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c040:	e019      	b.n	800c076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d103      	bne.n	800c054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 f93b 	bl	800d2c8 <vPortFree>
	}
 800c052:	e010      	b.n	800c076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d00b      	beq.n	800c076 <prvDeleteTCB+0x62>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	60fb      	str	r3, [r7, #12]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <prvDeleteTCB+0x5e>
	}
 800c076:	bf00      	nop
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c086:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x38>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d104      	bne.n	800c09a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <prvResetNextTaskUnblockTime+0x3c>)
 800c092:	f04f 32ff 	mov.w	r2, #4294967295
 800c096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c098:	e008      	b.n	800c0ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09a:	4b07      	ldr	r3, [pc, #28]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x38>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4a04      	ldr	r2, [pc, #16]	@ (800c0bc <prvResetNextTaskUnblockTime+0x3c>)
 800c0aa:	6013      	str	r3, [r2, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	200016b0 	.word	0x200016b0
 800c0bc:	20001718 	.word	0x20001718

0800c0c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f4 <xTaskGetSchedulerState+0x34>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	e008      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d4:	4b08      	ldr	r3, [pc, #32]	@ (800c0f8 <xTaskGetSchedulerState+0x38>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	e001      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0e6:	687b      	ldr	r3, [r7, #4]
	}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	20001704 	.word	0x20001704
 800c0f8:	20001720 	.word	0x20001720

0800c0fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d051      	beq.n	800c1b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c116:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d241      	bcs.n	800c1a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	db06      	blt.n	800c136 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c128:	4b25      	ldr	r3, [pc, #148]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	6959      	ldr	r1, [r3, #20]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a1f      	ldr	r2, [pc, #124]	@ (800c1c4 <xTaskPriorityInherit+0xc8>)
 800c148:	4413      	add	r3, r2
 800c14a:	4299      	cmp	r1, r3
 800c14c:	d122      	bne.n	800c194 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd ff00 	bl	8009f58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c158:	4b19      	ldr	r3, [pc, #100]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c166:	4b18      	ldr	r3, [pc, #96]	@ (800c1c8 <xTaskPriorityInherit+0xcc>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d903      	bls.n	800c176 <xTaskPriorityInherit+0x7a>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c172:	4a15      	ldr	r2, [pc, #84]	@ (800c1c8 <xTaskPriorityInherit+0xcc>)
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4a10      	ldr	r2, [pc, #64]	@ (800c1c4 <xTaskPriorityInherit+0xc8>)
 800c184:	441a      	add	r2, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	3304      	adds	r3, #4
 800c18a:	4619      	mov	r1, r3
 800c18c:	4610      	mov	r0, r2
 800c18e:	f7fd fe86 	bl	8009e9e <vListInsertEnd>
 800c192:	e004      	b.n	800c19e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c194:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	e008      	b.n	800c1b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d201      	bcs.n	800c1b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20001224 	.word	0x20001224
 800c1c4:	20001228 	.word	0x20001228
 800c1c8:	20001700 	.word	0x20001700

0800c1cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d058      	beq.n	800c294 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c2a0 <xTaskPriorityDisinherit+0xd4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d00b      	beq.n	800c204 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	60fb      	str	r3, [r7, #12]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60bb      	str	r3, [r7, #8]
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c228:	1e5a      	subs	r2, r3, #1
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c236:	429a      	cmp	r2, r3
 800c238:	d02c      	beq.n	800c294 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d128      	bne.n	800c294 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd fe86 	bl	8009f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c264:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <xTaskPriorityDisinherit+0xd8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d903      	bls.n	800c274 <xTaskPriorityDisinherit+0xa8>
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c270:	4a0c      	ldr	r2, [pc, #48]	@ (800c2a4 <xTaskPriorityDisinherit+0xd8>)
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4a09      	ldr	r2, [pc, #36]	@ (800c2a8 <xTaskPriorityDisinherit+0xdc>)
 800c282:	441a      	add	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3304      	adds	r3, #4
 800c288:	4619      	mov	r1, r3
 800c28a:	4610      	mov	r0, r2
 800c28c:	f7fd fe07 	bl	8009e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c290:	2301      	movs	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c294:	697b      	ldr	r3, [r7, #20]
	}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	20001224 	.word	0x20001224
 800c2a4:	20001700 	.word	0x20001700
 800c2a8:	20001228 	.word	0x20001228

0800c2ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d06c      	beq.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10b      	bne.n	800c2e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d902      	bls.n	800c2f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	61fb      	str	r3, [r7, #28]
 800c2f2:	e002      	b.n	800c2fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	429a      	cmp	r2, r3
 800c302:	d04c      	beq.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d147      	bne.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c30e:	4b26      	ldr	r3, [pc, #152]	@ (800c3a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	429a      	cmp	r2, r3
 800c316:	d10b      	bne.n	800c330 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	60bb      	str	r3, [r7, #8]
}
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
 800c32e:	e7fd      	b.n	800c32c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c334:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	db04      	blt.n	800c34e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	6959      	ldr	r1, [r3, #20]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	4613      	mov	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4a13      	ldr	r2, [pc, #76]	@ (800c3ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c35e:	4413      	add	r3, r2
 800c360:	4299      	cmp	r1, r3
 800c362:	d11c      	bne.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	3304      	adds	r3, #4
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fd fdf5 	bl	8009f58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c372:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d903      	bls.n	800c382 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37e:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c386:	4613      	mov	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4a07      	ldr	r2, [pc, #28]	@ (800c3ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c390:	441a      	add	r2, r3
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	3304      	adds	r3, #4
 800c396:	4619      	mov	r1, r3
 800c398:	4610      	mov	r0, r2
 800c39a:	f7fd fd80 	bl	8009e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c39e:	bf00      	nop
 800c3a0:	3720      	adds	r7, #32
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20001224 	.word	0x20001224
 800c3ac:	20001228 	.word	0x20001228
 800c3b0:	20001700 	.word	0x20001700

0800c3b4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f001 fa43 	bl	800d84c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7f3 ff02 	bl	80001d0 <strlen>
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	e007      	b.n	800c3e0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b0e      	cmp	r3, #14
 800c3e4:	d9f4      	bls.n	800c3d0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4413      	add	r3, r2
	}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c40e:	4b3a      	ldr	r3, [pc, #232]	@ (800c4f8 <vTaskGetRunTimeStats+0xf8>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c414:	4b38      	ldr	r3, [pc, #224]	@ (800c4f8 <vTaskGetRunTimeStats+0xf8>)
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	4613      	mov	r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fe83 	bl	800d12c <pvPortMalloc>
 800c426:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d05f      	beq.n	800c4ee <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800c42e:	f107 030c 	add.w	r3, r7, #12
 800c432:	461a      	mov	r2, r3
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	6978      	ldr	r0, [r7, #20]
 800c438:	f7ff f982 	bl	800b740 <uxTaskGetSystemState>
 800c43c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4a2e      	ldr	r2, [pc, #184]	@ (800c4fc <vTaskGetRunTimeStats+0xfc>)
 800c442:	fba2 2303 	umull	r2, r3, r2, r3
 800c446:	095b      	lsrs	r3, r3, #5
 800c448:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d04b      	beq.n	800c4e8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800c450:	2300      	movs	r3, #0
 800c452:	61fb      	str	r3, [r7, #28]
 800c454:	e044      	b.n	800c4e0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800c456:	69fa      	ldr	r2, [r7, #28]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	461a      	mov	r2, r3
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	4413      	add	r3, r2
 800c466:	699a      	ldr	r2, [r3, #24]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c46e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c470:	69fa      	ldr	r2, [r7, #28]
 800c472:	4613      	mov	r3, r2
 800c474:	00db      	lsls	r3, r3, #3
 800c476:	4413      	add	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	461a      	mov	r2, r3
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	4413      	add	r3, r2
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ff95 	bl	800c3b4 <prvWriteNameToBuffer>
 800c48a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00e      	beq.n	800c4b0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	4613      	mov	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	461a      	mov	r2, r3
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	699a      	ldr	r2, [r3, #24]
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	4916      	ldr	r1, [pc, #88]	@ (800c500 <vTaskGetRunTimeStats+0x100>)
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 f8b5 	bl	800d618 <siprintf>
 800c4ae:	e00d      	b.n	800c4cc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c4b0:	69fa      	ldr	r2, [r7, #28]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	4413      	add	r3, r2
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	490f      	ldr	r1, [pc, #60]	@ (800c504 <vTaskGetRunTimeStats+0x104>)
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 f8a6 	bl	800d618 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7f3 fe7f 	bl	80001d0 <strlen>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	61fb      	str	r3, [r7, #28]
 800c4e0:	69fa      	ldr	r2, [r7, #28]
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d3b6      	bcc.n	800c456 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c4e8:	6978      	ldr	r0, [r7, #20]
 800c4ea:	f000 feed 	bl	800d2c8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4ee:	bf00      	nop
 800c4f0:	3720      	adds	r7, #32
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	200016f8 	.word	0x200016f8
 800c4fc:	51eb851f 	.word	0x51eb851f
 800c500:	0800e2c8 	.word	0x0800e2c8
 800c504:	0800e2d4 	.word	0x0800e2d4

0800c508 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c50c:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c51a:	3201      	adds	r2, #1
 800c51c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c51e:	4b03      	ldr	r3, [pc, #12]	@ (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c520:	681b      	ldr	r3, [r3, #0]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	20001224 	.word	0x20001224

0800c530 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c53a:	4b21      	ldr	r3, [pc, #132]	@ (800c5c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c540:	4b20      	ldr	r3, [pc, #128]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3304      	adds	r3, #4
 800c546:	4618      	mov	r0, r3
 800c548:	f7fd fd06 	bl	8009f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c552:	d10a      	bne.n	800c56a <prvAddCurrentTaskToDelayedList+0x3a>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3304      	adds	r3, #4
 800c560:	4619      	mov	r1, r3
 800c562:	4819      	ldr	r0, [pc, #100]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c564:	f7fd fc9b 	bl	8009e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c568:	e026      	b.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4413      	add	r3, r2
 800c570:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c572:	4b14      	ldr	r3, [pc, #80]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d209      	bcs.n	800c596 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c582:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3304      	adds	r3, #4
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7fd fca9 	bl	8009ee6 <vListInsert>
}
 800c594:	e010      	b.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c596:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	f7fd fc9f 	bl	8009ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d202      	bcs.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5b2:	4a08      	ldr	r2, [pc, #32]	@ (800c5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6013      	str	r3, [r2, #0]
}
 800c5b8:	bf00      	nop
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	200016fc 	.word	0x200016fc
 800c5c4:	20001224 	.word	0x20001224
 800c5c8:	200016e4 	.word	0x200016e4
 800c5cc:	200016b4 	.word	0x200016b4
 800c5d0:	200016b0 	.word	0x200016b0
 800c5d4:	20001718 	.word	0x20001718

0800c5d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	@ 0x28
 800c5dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5e2:	f000 fb13 	bl	800cc0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c65c <xTimerCreateTimerTask+0x84>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d021      	beq.n	800c632 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5f6:	1d3a      	adds	r2, r7, #4
 800c5f8:	f107 0108 	add.w	r1, r7, #8
 800c5fc:	f107 030c 	add.w	r3, r7, #12
 800c600:	4618      	mov	r0, r3
 800c602:	f7fd fc05 	bl	8009e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	9202      	str	r2, [sp, #8]
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	2302      	movs	r3, #2
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	2300      	movs	r3, #0
 800c616:	460a      	mov	r2, r1
 800c618:	4911      	ldr	r1, [pc, #68]	@ (800c660 <xTimerCreateTimerTask+0x88>)
 800c61a:	4812      	ldr	r0, [pc, #72]	@ (800c664 <xTimerCreateTimerTask+0x8c>)
 800c61c:	f7fe fcf2 	bl	800b004 <xTaskCreateStatic>
 800c620:	4603      	mov	r3, r0
 800c622:	4a11      	ldr	r2, [pc, #68]	@ (800c668 <xTimerCreateTimerTask+0x90>)
 800c624:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c626:	4b10      	ldr	r3, [pc, #64]	@ (800c668 <xTimerCreateTimerTask+0x90>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c62e:	2301      	movs	r3, #1
 800c630:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10b      	bne.n	800c650 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	613b      	str	r3, [r7, #16]
}
 800c64a:	bf00      	nop
 800c64c:	bf00      	nop
 800c64e:	e7fd      	b.n	800c64c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c650:	697b      	ldr	r3, [r7, #20]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2000175c 	.word	0x2000175c
 800c660:	0800e2e0 	.word	0x0800e2e0
 800c664:	0800c7a5 	.word	0x0800c7a5
 800c668:	20001760 	.word	0x20001760

0800c66c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	@ 0x28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10b      	bne.n	800c69c <xTimerGenericCommand+0x30>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	623b      	str	r3, [r7, #32]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c69c:	4b19      	ldr	r3, [pc, #100]	@ (800c704 <xTimerGenericCommand+0x98>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d02a      	beq.n	800c6fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2b05      	cmp	r3, #5
 800c6b4:	dc18      	bgt.n	800c6e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6b6:	f7ff fd03 	bl	800c0c0 <xTaskGetSchedulerState>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d109      	bne.n	800c6d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6c0:	4b10      	ldr	r3, [pc, #64]	@ (800c704 <xTimerGenericCommand+0x98>)
 800c6c2:	6818      	ldr	r0, [r3, #0]
 800c6c4:	f107 0110 	add.w	r1, r7, #16
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6cc:	f7fd fe22 	bl	800a314 <xQueueGenericSend>
 800c6d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c6d2:	e012      	b.n	800c6fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c704 <xTimerGenericCommand+0x98>)
 800c6d6:	6818      	ldr	r0, [r3, #0]
 800c6d8:	f107 0110 	add.w	r1, r7, #16
 800c6dc:	2300      	movs	r3, #0
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f7fd fe18 	bl	800a314 <xQueueGenericSend>
 800c6e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c6e6:	e008      	b.n	800c6fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6e8:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <xTimerGenericCommand+0x98>)
 800c6ea:	6818      	ldr	r0, [r3, #0]
 800c6ec:	f107 0110 	add.w	r1, r7, #16
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	f7fd ff10 	bl	800a518 <xQueueGenericSendFromISR>
 800c6f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3728      	adds	r7, #40	@ 0x28
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	2000175c 	.word	0x2000175c

0800c708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b088      	sub	sp, #32
 800c70c:	af02      	add	r7, sp, #8
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c712:	4b23      	ldr	r3, [pc, #140]	@ (800c7a0 <prvProcessExpiredTimer+0x98>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	3304      	adds	r3, #4
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd fc19 	bl	8009f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d023      	beq.n	800c77c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	699a      	ldr	r2, [r3, #24]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	18d1      	adds	r1, r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	683a      	ldr	r2, [r7, #0]
 800c740:	6978      	ldr	r0, [r7, #20]
 800c742:	f000 f8d5 	bl	800c8f0 <prvInsertTimerInActiveList>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d020      	beq.n	800c78e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c74c:	2300      	movs	r3, #0
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	2300      	movs	r3, #0
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	2100      	movs	r1, #0
 800c756:	6978      	ldr	r0, [r7, #20]
 800c758:	f7ff ff88 	bl	800c66c <xTimerGenericCommand>
 800c75c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d114      	bne.n	800c78e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	60fb      	str	r3, [r7, #12]
}
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	e7fd      	b.n	800c778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c782:	f023 0301 	bic.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	6978      	ldr	r0, [r7, #20]
 800c794:	4798      	blx	r3
}
 800c796:	bf00      	nop
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20001754 	.word	0x20001754

0800c7a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7ac:	f107 0308 	add.w	r3, r7, #8
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f859 	bl	800c868 <prvGetNextExpireTime>
 800c7b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f805 	bl	800c7cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7c2:	f000 f8d7 	bl	800c974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7c6:	bf00      	nop
 800c7c8:	e7f0      	b.n	800c7ac <prvTimerTask+0x8>
	...

0800c7cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7d6:	f7fe fee5 	bl	800b5a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7da:	f107 0308 	add.w	r3, r7, #8
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 f866 	bl	800c8b0 <prvSampleTimeNow>
 800c7e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d130      	bne.n	800c84e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <prvProcessTimerOrBlockTask+0x3c>
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d806      	bhi.n	800c808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7fa:	f7fe fee1 	bl	800b5c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7fe:	68f9      	ldr	r1, [r7, #12]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff ff81 	bl	800c708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c806:	e024      	b.n	800c852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d008      	beq.n	800c820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c80e:	4b13      	ldr	r3, [pc, #76]	@ (800c85c <prvProcessTimerOrBlockTask+0x90>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <prvProcessTimerOrBlockTask+0x50>
 800c818:	2301      	movs	r3, #1
 800c81a:	e000      	b.n	800c81e <prvProcessTimerOrBlockTask+0x52>
 800c81c:	2300      	movs	r3, #0
 800c81e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c820:	4b0f      	ldr	r3, [pc, #60]	@ (800c860 <prvProcessTimerOrBlockTask+0x94>)
 800c822:	6818      	ldr	r0, [r3, #0]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4619      	mov	r1, r3
 800c82e:	f7fe fbb5 	bl	800af9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c832:	f7fe fec5 	bl	800b5c0 <xTaskResumeAll>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c83c:	4b09      	ldr	r3, [pc, #36]	@ (800c864 <prvProcessTimerOrBlockTask+0x98>)
 800c83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	f3bf 8f6f 	isb	sy
}
 800c84c:	e001      	b.n	800c852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c84e:	f7fe feb7 	bl	800b5c0 <xTaskResumeAll>
}
 800c852:	bf00      	nop
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001758 	.word	0x20001758
 800c860:	2000175c 	.word	0x2000175c
 800c864:	e000ed04 	.word	0xe000ed04

0800c868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c870:	4b0e      	ldr	r3, [pc, #56]	@ (800c8ac <prvGetNextExpireTime+0x44>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <prvGetNextExpireTime+0x16>
 800c87a:	2201      	movs	r2, #1
 800c87c:	e000      	b.n	800c880 <prvGetNextExpireTime+0x18>
 800c87e:	2200      	movs	r2, #0
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d105      	bne.n	800c898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c88c:	4b07      	ldr	r3, [pc, #28]	@ (800c8ac <prvGetNextExpireTime+0x44>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e001      	b.n	800c89c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c89c:	68fb      	ldr	r3, [r7, #12]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20001754 	.word	0x20001754

0800c8b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8b8:	f7fe ff20 	bl	800b6fc <xTaskGetTickCount>
 800c8bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8be:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ec <prvSampleTimeNow+0x3c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d205      	bcs.n	800c8d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8c8:	f000 f93a 	bl	800cb40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	e002      	b.n	800c8da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8da:	4a04      	ldr	r2, [pc, #16]	@ (800c8ec <prvSampleTimeNow+0x3c>)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	20001764 	.word	0x20001764

0800c8f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8fe:	2300      	movs	r3, #0
 800c900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	429a      	cmp	r2, r3
 800c914:	d812      	bhi.n	800c93c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	1ad2      	subs	r2, r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	429a      	cmp	r2, r3
 800c922:	d302      	bcc.n	800c92a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c924:	2301      	movs	r3, #1
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	e01b      	b.n	800c962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c92a:	4b10      	ldr	r3, [pc, #64]	@ (800c96c <prvInsertTimerInActiveList+0x7c>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3304      	adds	r3, #4
 800c932:	4619      	mov	r1, r3
 800c934:	4610      	mov	r0, r2
 800c936:	f7fd fad6 	bl	8009ee6 <vListInsert>
 800c93a:	e012      	b.n	800c962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	429a      	cmp	r2, r3
 800c942:	d206      	bcs.n	800c952 <prvInsertTimerInActiveList+0x62>
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d302      	bcc.n	800c952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c94c:	2301      	movs	r3, #1
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	e007      	b.n	800c962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c952:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <prvInsertTimerInActiveList+0x80>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3304      	adds	r3, #4
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f7fd fac2 	bl	8009ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c962:	697b      	ldr	r3, [r7, #20]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	20001758 	.word	0x20001758
 800c970:	20001754 	.word	0x20001754

0800c974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08e      	sub	sp, #56	@ 0x38
 800c978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97a:	e0ce      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da19      	bge.n	800c9b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c982:	1d3b      	adds	r3, r7, #4
 800c984:	3304      	adds	r3, #4
 800c986:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10b      	bne.n	800c9a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	61fb      	str	r3, [r7, #28]
}
 800c9a0:	bf00      	nop
 800c9a2:	bf00      	nop
 800c9a4:	e7fd      	b.n	800c9a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ac:	6850      	ldr	r0, [r2, #4]
 800c9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9b0:	6892      	ldr	r2, [r2, #8]
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f2c0 80ae 	blt.w	800cb1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fd fac2 	bl	8009f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9d4:	463b      	mov	r3, r7
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff ff6a 	bl	800c8b0 <prvSampleTimeNow>
 800c9dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b09      	cmp	r3, #9
 800c9e2:	f200 8097 	bhi.w	800cb14 <prvProcessReceivedCommands+0x1a0>
 800c9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ec <prvProcessReceivedCommands+0x78>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca15 	.word	0x0800ca15
 800c9f0:	0800ca15 	.word	0x0800ca15
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca8b 	.word	0x0800ca8b
 800c9fc:	0800ca9f 	.word	0x0800ca9f
 800ca00:	0800caeb 	.word	0x0800caeb
 800ca04:	0800ca15 	.word	0x0800ca15
 800ca08:	0800ca15 	.word	0x0800ca15
 800ca0c:	0800ca8b 	.word	0x0800ca8b
 800ca10:	0800ca9f 	.word	0x0800ca9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	18d1      	adds	r1, r2, r3
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca34:	f7ff ff5c 	bl	800c8f0 <prvInsertTimerInActiveList>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d06c      	beq.n	800cb18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d061      	beq.n	800cb18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca58:	699b      	ldr	r3, [r3, #24]
 800ca5a:	441a      	add	r2, r3
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	2300      	movs	r3, #0
 800ca62:	2100      	movs	r1, #0
 800ca64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca66:	f7ff fe01 	bl	800c66c <xTimerGenericCommand>
 800ca6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d152      	bne.n	800cb18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ca72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	61bb      	str	r3, [r7, #24]
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	e7fd      	b.n	800ca86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca90:	f023 0301 	bic.w	r3, r3, #1
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca9c:	e03d      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa4:	f043 0301 	orr.w	r3, r3, #1
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10b      	bne.n	800cad6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	617b      	str	r3, [r7, #20]
}
 800cad0:	bf00      	nop
 800cad2:	bf00      	nop
 800cad4:	e7fd      	b.n	800cad2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad8:	699a      	ldr	r2, [r3, #24]
 800cada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cadc:	18d1      	adds	r1, r2, r3
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cae4:	f7ff ff04 	bl	800c8f0 <prvInsertTimerInActiveList>
					break;
 800cae8:	e017      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800caea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d103      	bne.n	800cb00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800caf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cafa:	f000 fbe5 	bl	800d2c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cafe:	e00c      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb06:	f023 0301 	bic.w	r3, r3, #1
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb12:	e002      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cb14:	bf00      	nop
 800cb16:	e000      	b.n	800cb1a <prvProcessReceivedCommands+0x1a6>
					break;
 800cb18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb1a:	4b08      	ldr	r3, [pc, #32]	@ (800cb3c <prvProcessReceivedCommands+0x1c8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	1d39      	adds	r1, r7, #4
 800cb20:	2200      	movs	r2, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fd fe26 	bl	800a774 <xQueueReceive>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f47f af26 	bne.w	800c97c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cb30:	bf00      	nop
 800cb32:	bf00      	nop
 800cb34:	3730      	adds	r7, #48	@ 0x30
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	2000175c 	.word	0x2000175c

0800cb40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb46:	e049      	b.n	800cbdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb48:	4b2e      	ldr	r3, [pc, #184]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb52:	4b2c      	ldr	r3, [pc, #176]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fd f9f9 	bl	8009f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d02f      	beq.n	800cbdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	4413      	add	r3, r2
 800cb84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d90e      	bls.n	800cbac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb9a:	4b1a      	ldr	r3, [pc, #104]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4619      	mov	r1, r3
 800cba4:	4610      	mov	r0, r2
 800cba6:	f7fd f99e 	bl	8009ee6 <vListInsert>
 800cbaa:	e017      	b.n	800cbdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbac:	2300      	movs	r3, #0
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff fd58 	bl	800c66c <xTimerGenericCommand>
 800cbbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10b      	bne.n	800cbdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	603b      	str	r3, [r7, #0]
}
 800cbd6:	bf00      	nop
 800cbd8:	bf00      	nop
 800cbda:	e7fd      	b.n	800cbd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbdc:	4b09      	ldr	r3, [pc, #36]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1b0      	bne.n	800cb48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbe6:	4b07      	ldr	r3, [pc, #28]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbec:	4b06      	ldr	r3, [pc, #24]	@ (800cc08 <prvSwitchTimerLists+0xc8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a04      	ldr	r2, [pc, #16]	@ (800cc04 <prvSwitchTimerLists+0xc4>)
 800cbf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbf4:	4a04      	ldr	r2, [pc, #16]	@ (800cc08 <prvSwitchTimerLists+0xc8>)
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	6013      	str	r3, [r2, #0]
}
 800cbfa:	bf00      	nop
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20001754 	.word	0x20001754
 800cc08:	20001758 	.word	0x20001758

0800cc0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc12:	f000 f969 	bl	800cee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc16:	4b15      	ldr	r3, [pc, #84]	@ (800cc6c <prvCheckForValidListAndQueue+0x60>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d120      	bne.n	800cc60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc1e:	4814      	ldr	r0, [pc, #80]	@ (800cc70 <prvCheckForValidListAndQueue+0x64>)
 800cc20:	f7fd f910 	bl	8009e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc24:	4813      	ldr	r0, [pc, #76]	@ (800cc74 <prvCheckForValidListAndQueue+0x68>)
 800cc26:	f7fd f90d 	bl	8009e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc2a:	4b13      	ldr	r3, [pc, #76]	@ (800cc78 <prvCheckForValidListAndQueue+0x6c>)
 800cc2c:	4a10      	ldr	r2, [pc, #64]	@ (800cc70 <prvCheckForValidListAndQueue+0x64>)
 800cc2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc30:	4b12      	ldr	r3, [pc, #72]	@ (800cc7c <prvCheckForValidListAndQueue+0x70>)
 800cc32:	4a10      	ldr	r2, [pc, #64]	@ (800cc74 <prvCheckForValidListAndQueue+0x68>)
 800cc34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc36:	2300      	movs	r3, #0
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	4b11      	ldr	r3, [pc, #68]	@ (800cc80 <prvCheckForValidListAndQueue+0x74>)
 800cc3c:	4a11      	ldr	r2, [pc, #68]	@ (800cc84 <prvCheckForValidListAndQueue+0x78>)
 800cc3e:	2110      	movs	r1, #16
 800cc40:	200a      	movs	r0, #10
 800cc42:	f7fd fa1d 	bl	800a080 <xQueueGenericCreateStatic>
 800cc46:	4603      	mov	r3, r0
 800cc48:	4a08      	ldr	r2, [pc, #32]	@ (800cc6c <prvCheckForValidListAndQueue+0x60>)
 800cc4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc4c:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <prvCheckForValidListAndQueue+0x60>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d005      	beq.n	800cc60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc54:	4b05      	ldr	r3, [pc, #20]	@ (800cc6c <prvCheckForValidListAndQueue+0x60>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	490b      	ldr	r1, [pc, #44]	@ (800cc88 <prvCheckForValidListAndQueue+0x7c>)
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe f94a 	bl	800aef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc60:	f000 f974 	bl	800cf4c <vPortExitCritical>
}
 800cc64:	bf00      	nop
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000175c 	.word	0x2000175c
 800cc70:	2000172c 	.word	0x2000172c
 800cc74:	20001740 	.word	0x20001740
 800cc78:	20001754 	.word	0x20001754
 800cc7c:	20001758 	.word	0x20001758
 800cc80:	20001808 	.word	0x20001808
 800cc84:	20001768 	.word	0x20001768
 800cc88:	0800e2e8 	.word	0x0800e2e8

0800cc8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3b04      	subs	r3, #4
 800cc9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3b04      	subs	r3, #4
 800ccaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	f023 0201 	bic.w	r2, r3, #1
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3b04      	subs	r3, #4
 800ccba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccbc:	4a0c      	ldr	r2, [pc, #48]	@ (800ccf0 <pxPortInitialiseStack+0x64>)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3b14      	subs	r3, #20
 800ccc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3b04      	subs	r3, #4
 800ccd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f06f 0202 	mvn.w	r2, #2
 800ccda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3b20      	subs	r3, #32
 800cce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cce2:	68fb      	ldr	r3, [r7, #12]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	0800ccf5 	.word	0x0800ccf5

0800ccf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccfe:	4b13      	ldr	r3, [pc, #76]	@ (800cd4c <prvTaskExitError+0x58>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd06:	d00b      	beq.n	800cd20 <prvTaskExitError+0x2c>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	60fb      	str	r3, [r7, #12]
}
 800cd1a:	bf00      	nop
 800cd1c:	bf00      	nop
 800cd1e:	e7fd      	b.n	800cd1c <prvTaskExitError+0x28>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	60bb      	str	r3, [r7, #8]
}
 800cd32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd34:	bf00      	nop
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0fc      	beq.n	800cd36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd3c:	bf00      	nop
 800cd3e:	bf00      	nop
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	2000005c 	.word	0x2000005c

0800cd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd50:	4b07      	ldr	r3, [pc, #28]	@ (800cd70 <pxCurrentTCBConst2>)
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	f380 8809 	msr	PSP, r0
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	4770      	bx	lr
 800cd6c:	f3af 8000 	nop.w

0800cd70 <pxCurrentTCBConst2>:
 800cd70:	20001224 	.word	0x20001224
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd78:	4808      	ldr	r0, [pc, #32]	@ (800cd9c <prvPortStartFirstTask+0x24>)
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	6800      	ldr	r0, [r0, #0]
 800cd7e:	f380 8808 	msr	MSP, r0
 800cd82:	f04f 0000 	mov.w	r0, #0
 800cd86:	f380 8814 	msr	CONTROL, r0
 800cd8a:	b662      	cpsie	i
 800cd8c:	b661      	cpsie	f
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	df00      	svc	0
 800cd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd9a:	bf00      	nop
 800cd9c:	e000ed08 	.word	0xe000ed08

0800cda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cda6:	4b47      	ldr	r3, [pc, #284]	@ (800cec4 <xPortStartScheduler+0x124>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a47      	ldr	r2, [pc, #284]	@ (800cec8 <xPortStartScheduler+0x128>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d10b      	bne.n	800cdc8 <xPortStartScheduler+0x28>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	613b      	str	r3, [r7, #16]
}
 800cdc2:	bf00      	nop
 800cdc4:	bf00      	nop
 800cdc6:	e7fd      	b.n	800cdc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdc8:	4b3e      	ldr	r3, [pc, #248]	@ (800cec4 <xPortStartScheduler+0x124>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a3f      	ldr	r2, [pc, #252]	@ (800cecc <xPortStartScheduler+0x12c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d10b      	bne.n	800cdea <xPortStartScheduler+0x4a>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60fb      	str	r3, [r7, #12]
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdea:	4b39      	ldr	r3, [pc, #228]	@ (800ced0 <xPortStartScheduler+0x130>)
 800cdec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	22ff      	movs	r2, #255	@ 0xff
 800cdfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce04:	78fb      	ldrb	r3, [r7, #3]
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	4b31      	ldr	r3, [pc, #196]	@ (800ced4 <xPortStartScheduler+0x134>)
 800ce10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce12:	4b31      	ldr	r3, [pc, #196]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce14:	2207      	movs	r2, #7
 800ce16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce18:	e009      	b.n	800ce2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ce1a:	4b2f      	ldr	r3, [pc, #188]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	4a2d      	ldr	r2, [pc, #180]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce24:	78fb      	ldrb	r3, [r7, #3]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce2e:	78fb      	ldrb	r3, [r7, #3]
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce36:	2b80      	cmp	r3, #128	@ 0x80
 800ce38:	d0ef      	beq.n	800ce1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce3a:	4b27      	ldr	r3, [pc, #156]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f1c3 0307 	rsb	r3, r3, #7
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	d00b      	beq.n	800ce5e <xPortStartScheduler+0xbe>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	60bb      	str	r3, [r7, #8]
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	e7fd      	b.n	800ce5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	4a1c      	ldr	r2, [pc, #112]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce68:	4b1b      	ldr	r3, [pc, #108]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce70:	4a19      	ldr	r2, [pc, #100]	@ (800ced8 <xPortStartScheduler+0x138>)
 800ce72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce7c:	4b17      	ldr	r3, [pc, #92]	@ (800cedc <xPortStartScheduler+0x13c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a16      	ldr	r2, [pc, #88]	@ (800cedc <xPortStartScheduler+0x13c>)
 800ce82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce88:	4b14      	ldr	r3, [pc, #80]	@ (800cedc <xPortStartScheduler+0x13c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a13      	ldr	r2, [pc, #76]	@ (800cedc <xPortStartScheduler+0x13c>)
 800ce8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce94:	f000 f8da 	bl	800d04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce98:	4b11      	ldr	r3, [pc, #68]	@ (800cee0 <xPortStartScheduler+0x140>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce9e:	f000 f8f9 	bl	800d094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cea2:	4b10      	ldr	r3, [pc, #64]	@ (800cee4 <xPortStartScheduler+0x144>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a0f      	ldr	r2, [pc, #60]	@ (800cee4 <xPortStartScheduler+0x144>)
 800cea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ceac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ceae:	f7ff ff63 	bl	800cd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ceb2:	f7fe fd97 	bl	800b9e4 <vTaskSwitchContext>
	prvTaskExitError();
 800ceb6:	f7ff ff1d 	bl	800ccf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed00 	.word	0xe000ed00
 800cec8:	410fc271 	.word	0x410fc271
 800cecc:	410fc270 	.word	0x410fc270
 800ced0:	e000e400 	.word	0xe000e400
 800ced4:	20001858 	.word	0x20001858
 800ced8:	2000185c 	.word	0x2000185c
 800cedc:	e000ed20 	.word	0xe000ed20
 800cee0:	2000005c 	.word	0x2000005c
 800cee4:	e000ef34 	.word	0xe000ef34

0800cee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
	__asm volatile
 800ceee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	607b      	str	r3, [r7, #4]
}
 800cf00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf02:	4b10      	ldr	r3, [pc, #64]	@ (800cf44 <vPortEnterCritical+0x5c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	4a0e      	ldr	r2, [pc, #56]	@ (800cf44 <vPortEnterCritical+0x5c>)
 800cf0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf0c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf44 <vPortEnterCritical+0x5c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d110      	bne.n	800cf36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf14:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <vPortEnterCritical+0x60>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00b      	beq.n	800cf36 <vPortEnterCritical+0x4e>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	603b      	str	r3, [r7, #0]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <vPortEnterCritical+0x4a>
	}
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	2000005c 	.word	0x2000005c
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf52:	4b12      	ldr	r3, [pc, #72]	@ (800cf9c <vPortExitCritical+0x50>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10b      	bne.n	800cf72 <vPortExitCritical+0x26>
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	607b      	str	r3, [r7, #4]
}
 800cf6c:	bf00      	nop
 800cf6e:	bf00      	nop
 800cf70:	e7fd      	b.n	800cf6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf72:	4b0a      	ldr	r3, [pc, #40]	@ (800cf9c <vPortExitCritical+0x50>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	4a08      	ldr	r2, [pc, #32]	@ (800cf9c <vPortExitCritical+0x50>)
 800cf7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf7c:	4b07      	ldr	r3, [pc, #28]	@ (800cf9c <vPortExitCritical+0x50>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d105      	bne.n	800cf90 <vPortExitCritical+0x44>
 800cf84:	2300      	movs	r3, #0
 800cf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	f383 8811 	msr	BASEPRI, r3
}
 800cf8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	2000005c 	.word	0x2000005c

0800cfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfa0:	f3ef 8009 	mrs	r0, PSP
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	4b15      	ldr	r3, [pc, #84]	@ (800d000 <pxCurrentTCBConst>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	f01e 0f10 	tst.w	lr, #16
 800cfb0:	bf08      	it	eq
 800cfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	6010      	str	r0, [r2, #0]
 800cfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cfc4:	f380 8811 	msr	BASEPRI, r0
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f7fe fd08 	bl	800b9e4 <vTaskSwitchContext>
 800cfd4:	f04f 0000 	mov.w	r0, #0
 800cfd8:	f380 8811 	msr	BASEPRI, r0
 800cfdc:	bc09      	pop	{r0, r3}
 800cfde:	6819      	ldr	r1, [r3, #0]
 800cfe0:	6808      	ldr	r0, [r1, #0]
 800cfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe6:	f01e 0f10 	tst.w	lr, #16
 800cfea:	bf08      	it	eq
 800cfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cff0:	f380 8809 	msr	PSP, r0
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w

0800d000 <pxCurrentTCBConst>:
 800d000:	20001224 	.word	0x20001224
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d004:	bf00      	nop
 800d006:	bf00      	nop

0800d008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	607b      	str	r3, [r7, #4]
}
 800d020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d022:	f7fe fc1d 	bl	800b860 <xTaskIncrementTick>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d003      	beq.n	800d034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d02c:	4b06      	ldr	r3, [pc, #24]	@ (800d048 <xPortSysTickHandler+0x40>)
 800d02e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	2300      	movs	r3, #0
 800d036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	f383 8811 	msr	BASEPRI, r3
}
 800d03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	e000ed04 	.word	0xe000ed04

0800d04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d050:	4b0b      	ldr	r3, [pc, #44]	@ (800d080 <vPortSetupTimerInterrupt+0x34>)
 800d052:	2200      	movs	r2, #0
 800d054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d056:	4b0b      	ldr	r3, [pc, #44]	@ (800d084 <vPortSetupTimerInterrupt+0x38>)
 800d058:	2200      	movs	r2, #0
 800d05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d05c:	4b0a      	ldr	r3, [pc, #40]	@ (800d088 <vPortSetupTimerInterrupt+0x3c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0a      	ldr	r2, [pc, #40]	@ (800d08c <vPortSetupTimerInterrupt+0x40>)
 800d062:	fba2 2303 	umull	r2, r3, r2, r3
 800d066:	099b      	lsrs	r3, r3, #6
 800d068:	4a09      	ldr	r2, [pc, #36]	@ (800d090 <vPortSetupTimerInterrupt+0x44>)
 800d06a:	3b01      	subs	r3, #1
 800d06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d06e:	4b04      	ldr	r3, [pc, #16]	@ (800d080 <vPortSetupTimerInterrupt+0x34>)
 800d070:	2207      	movs	r2, #7
 800d072:	601a      	str	r2, [r3, #0]
}
 800d074:	bf00      	nop
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	e000e010 	.word	0xe000e010
 800d084:	e000e018 	.word	0xe000e018
 800d088:	20000050 	.word	0x20000050
 800d08c:	10624dd3 	.word	0x10624dd3
 800d090:	e000e014 	.word	0xe000e014

0800d094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d0a4 <vPortEnableVFP+0x10>
 800d098:	6801      	ldr	r1, [r0, #0]
 800d09a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d09e:	6001      	str	r1, [r0, #0]
 800d0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0a2:	bf00      	nop
 800d0a4:	e000ed88 	.word	0xe000ed88

0800d0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0ae:	f3ef 8305 	mrs	r3, IPSR
 800d0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b0f      	cmp	r3, #15
 800d0b8:	d915      	bls.n	800d0e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0ba:	4a18      	ldr	r2, [pc, #96]	@ (800d11c <vPortValidateInterruptPriority+0x74>)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4413      	add	r3, r2
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0c4:	4b16      	ldr	r3, [pc, #88]	@ (800d120 <vPortValidateInterruptPriority+0x78>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	7afa      	ldrb	r2, [r7, #11]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d20b      	bcs.n	800d0e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	607b      	str	r3, [r7, #4]
}
 800d0e0:	bf00      	nop
 800d0e2:	bf00      	nop
 800d0e4:	e7fd      	b.n	800d0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d124 <vPortValidateInterruptPriority+0x7c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d128 <vPortValidateInterruptPriority+0x80>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d90b      	bls.n	800d10e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	603b      	str	r3, [r7, #0]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <vPortValidateInterruptPriority+0x62>
	}
 800d10e:	bf00      	nop
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	e000e3f0 	.word	0xe000e3f0
 800d120:	20001858 	.word	0x20001858
 800d124:	e000ed0c 	.word	0xe000ed0c
 800d128:	2000185c 	.word	0x2000185c

0800d12c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08a      	sub	sp, #40	@ 0x28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d134:	2300      	movs	r3, #0
 800d136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d138:	f7fe fa34 	bl	800b5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d13c:	4b5c      	ldr	r3, [pc, #368]	@ (800d2b0 <pvPortMalloc+0x184>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d101      	bne.n	800d148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d144:	f000 f924 	bl	800d390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d148:	4b5a      	ldr	r3, [pc, #360]	@ (800d2b4 <pvPortMalloc+0x188>)
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4013      	ands	r3, r2
 800d150:	2b00      	cmp	r3, #0
 800d152:	f040 8095 	bne.w	800d280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d01e      	beq.n	800d19a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d15c:	2208      	movs	r2, #8
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4413      	add	r3, r2
 800d162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f003 0307 	and.w	r3, r3, #7
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d015      	beq.n	800d19a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f023 0307 	bic.w	r3, r3, #7
 800d174:	3308      	adds	r3, #8
 800d176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f003 0307 	and.w	r3, r3, #7
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00b      	beq.n	800d19a <pvPortMalloc+0x6e>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	617b      	str	r3, [r7, #20]
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	e7fd      	b.n	800d196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d06f      	beq.n	800d280 <pvPortMalloc+0x154>
 800d1a0:	4b45      	ldr	r3, [pc, #276]	@ (800d2b8 <pvPortMalloc+0x18c>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d86a      	bhi.n	800d280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1aa:	4b44      	ldr	r3, [pc, #272]	@ (800d2bc <pvPortMalloc+0x190>)
 800d1ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1ae:	4b43      	ldr	r3, [pc, #268]	@ (800d2bc <pvPortMalloc+0x190>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1b4:	e004      	b.n	800d1c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d903      	bls.n	800d1d2 <pvPortMalloc+0xa6>
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1f1      	bne.n	800d1b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1d2:	4b37      	ldr	r3, [pc, #220]	@ (800d2b0 <pvPortMalloc+0x184>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d051      	beq.n	800d280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2208      	movs	r2, #8
 800d1e2:	4413      	add	r3, r2
 800d1e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	1ad2      	subs	r2, r2, r3
 800d1f6:	2308      	movs	r3, #8
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d920      	bls.n	800d240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	f003 0307 	and.w	r3, r3, #7
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <pvPortMalloc+0xfc>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	613b      	str	r3, [r7, #16]
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	e7fd      	b.n	800d224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d23a:	69b8      	ldr	r0, [r7, #24]
 800d23c:	f000 f90a 	bl	800d454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d240:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b8 <pvPortMalloc+0x18c>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2b8 <pvPortMalloc+0x18c>)
 800d24c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d24e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b8 <pvPortMalloc+0x18c>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c0 <pvPortMalloc+0x194>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d203      	bcs.n	800d262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d25a:	4b17      	ldr	r3, [pc, #92]	@ (800d2b8 <pvPortMalloc+0x18c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a18      	ldr	r2, [pc, #96]	@ (800d2c0 <pvPortMalloc+0x194>)
 800d260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	685a      	ldr	r2, [r3, #4]
 800d266:	4b13      	ldr	r3, [pc, #76]	@ (800d2b4 <pvPortMalloc+0x188>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	431a      	orrs	r2, r3
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d276:	4b13      	ldr	r3, [pc, #76]	@ (800d2c4 <pvPortMalloc+0x198>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3301      	adds	r3, #1
 800d27c:	4a11      	ldr	r2, [pc, #68]	@ (800d2c4 <pvPortMalloc+0x198>)
 800d27e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d280:	f7fe f99e 	bl	800b5c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00b      	beq.n	800d2a6 <pvPortMalloc+0x17a>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	60fb      	str	r3, [r7, #12]
}
 800d2a0:	bf00      	nop
 800d2a2:	bf00      	nop
 800d2a4:	e7fd      	b.n	800d2a2 <pvPortMalloc+0x176>
	return pvReturn;
 800d2a6:	69fb      	ldr	r3, [r7, #28]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3728      	adds	r7, #40	@ 0x28
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20005468 	.word	0x20005468
 800d2b4:	2000547c 	.word	0x2000547c
 800d2b8:	2000546c 	.word	0x2000546c
 800d2bc:	20005460 	.word	0x20005460
 800d2c0:	20005470 	.word	0x20005470
 800d2c4:	20005474 	.word	0x20005474

0800d2c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d04f      	beq.n	800d37a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2da:	2308      	movs	r3, #8
 800d2dc:	425b      	negs	r3, r3
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	4b25      	ldr	r3, [pc, #148]	@ (800d384 <vPortFree+0xbc>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10b      	bne.n	800d30e <vPortFree+0x46>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60fb      	str	r3, [r7, #12]
}
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00b      	beq.n	800d32e <vPortFree+0x66>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	60bb      	str	r3, [r7, #8]
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	e7fd      	b.n	800d32a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	4b14      	ldr	r3, [pc, #80]	@ (800d384 <vPortFree+0xbc>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4013      	ands	r3, r2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01e      	beq.n	800d37a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d11a      	bne.n	800d37a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	685a      	ldr	r2, [r3, #4]
 800d348:	4b0e      	ldr	r3, [pc, #56]	@ (800d384 <vPortFree+0xbc>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	43db      	mvns	r3, r3
 800d34e:	401a      	ands	r2, r3
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d354:	f7fe f926 	bl	800b5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	4b0a      	ldr	r3, [pc, #40]	@ (800d388 <vPortFree+0xc0>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4413      	add	r3, r2
 800d362:	4a09      	ldr	r2, [pc, #36]	@ (800d388 <vPortFree+0xc0>)
 800d364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d366:	6938      	ldr	r0, [r7, #16]
 800d368:	f000 f874 	bl	800d454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d36c:	4b07      	ldr	r3, [pc, #28]	@ (800d38c <vPortFree+0xc4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3301      	adds	r3, #1
 800d372:	4a06      	ldr	r2, [pc, #24]	@ (800d38c <vPortFree+0xc4>)
 800d374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d376:	f7fe f923 	bl	800b5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d37a:	bf00      	nop
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	2000547c 	.word	0x2000547c
 800d388:	2000546c 	.word	0x2000546c
 800d38c:	20005478 	.word	0x20005478

0800d390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d396:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d39a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d39c:	4b27      	ldr	r3, [pc, #156]	@ (800d43c <prvHeapInit+0xac>)
 800d39e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00c      	beq.n	800d3c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f023 0307 	bic.w	r3, r3, #7
 800d3b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	4a1f      	ldr	r2, [pc, #124]	@ (800d43c <prvHeapInit+0xac>)
 800d3c0:	4413      	add	r3, r2
 800d3c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d440 <prvHeapInit+0xb0>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d440 <prvHeapInit+0xb0>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	4413      	add	r3, r2
 800d3da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3dc:	2208      	movs	r2, #8
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1a9b      	subs	r3, r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f023 0307 	bic.w	r3, r3, #7
 800d3ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	4a15      	ldr	r2, [pc, #84]	@ (800d444 <prvHeapInit+0xb4>)
 800d3f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3f2:	4b14      	ldr	r3, [pc, #80]	@ (800d444 <prvHeapInit+0xb4>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3fa:	4b12      	ldr	r3, [pc, #72]	@ (800d444 <prvHeapInit+0xb4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	1ad2      	subs	r2, r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d410:	4b0c      	ldr	r3, [pc, #48]	@ (800d444 <prvHeapInit+0xb4>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	4a0a      	ldr	r2, [pc, #40]	@ (800d448 <prvHeapInit+0xb8>)
 800d41e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4a09      	ldr	r2, [pc, #36]	@ (800d44c <prvHeapInit+0xbc>)
 800d426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d428:	4b09      	ldr	r3, [pc, #36]	@ (800d450 <prvHeapInit+0xc0>)
 800d42a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d42e:	601a      	str	r2, [r3, #0]
}
 800d430:	bf00      	nop
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	20001860 	.word	0x20001860
 800d440:	20005460 	.word	0x20005460
 800d444:	20005468 	.word	0x20005468
 800d448:	20005470 	.word	0x20005470
 800d44c:	2000546c 	.word	0x2000546c
 800d450:	2000547c 	.word	0x2000547c

0800d454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d45c:	4b28      	ldr	r3, [pc, #160]	@ (800d500 <prvInsertBlockIntoFreeList+0xac>)
 800d45e:	60fb      	str	r3, [r7, #12]
 800d460:	e002      	b.n	800d468 <prvInsertBlockIntoFreeList+0x14>
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d8f7      	bhi.n	800d462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	4413      	add	r3, r2
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d108      	bne.n	800d496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	441a      	add	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	441a      	add	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d118      	bne.n	800d4dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4b15      	ldr	r3, [pc, #84]	@ (800d504 <prvInsertBlockIntoFreeList+0xb0>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d00d      	beq.n	800d4d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	441a      	add	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	e008      	b.n	800d4e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d504 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e003      	b.n	800d4e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d002      	beq.n	800d4f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4f2:	bf00      	nop
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	20005460 	.word	0x20005460
 800d504:	20005468 	.word	0x20005468

0800d508 <atoi>:
 800d508:	220a      	movs	r2, #10
 800d50a:	2100      	movs	r1, #0
 800d50c:	f000 b87a 	b.w	800d604 <strtol>

0800d510 <_strtol_l.constprop.0>:
 800d510:	2b24      	cmp	r3, #36	@ 0x24
 800d512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d516:	4686      	mov	lr, r0
 800d518:	4690      	mov	r8, r2
 800d51a:	d801      	bhi.n	800d520 <_strtol_l.constprop.0+0x10>
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d106      	bne.n	800d52e <_strtol_l.constprop.0+0x1e>
 800d520:	f000 f968 	bl	800d7f4 <__errno>
 800d524:	2316      	movs	r3, #22
 800d526:	6003      	str	r3, [r0, #0]
 800d528:	2000      	movs	r0, #0
 800d52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52e:	4834      	ldr	r0, [pc, #208]	@ (800d600 <_strtol_l.constprop.0+0xf0>)
 800d530:	460d      	mov	r5, r1
 800d532:	462a      	mov	r2, r5
 800d534:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d538:	5d06      	ldrb	r6, [r0, r4]
 800d53a:	f016 0608 	ands.w	r6, r6, #8
 800d53e:	d1f8      	bne.n	800d532 <_strtol_l.constprop.0+0x22>
 800d540:	2c2d      	cmp	r4, #45	@ 0x2d
 800d542:	d12d      	bne.n	800d5a0 <_strtol_l.constprop.0+0x90>
 800d544:	782c      	ldrb	r4, [r5, #0]
 800d546:	2601      	movs	r6, #1
 800d548:	1c95      	adds	r5, r2, #2
 800d54a:	f033 0210 	bics.w	r2, r3, #16
 800d54e:	d109      	bne.n	800d564 <_strtol_l.constprop.0+0x54>
 800d550:	2c30      	cmp	r4, #48	@ 0x30
 800d552:	d12a      	bne.n	800d5aa <_strtol_l.constprop.0+0x9a>
 800d554:	782a      	ldrb	r2, [r5, #0]
 800d556:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d55a:	2a58      	cmp	r2, #88	@ 0x58
 800d55c:	d125      	bne.n	800d5aa <_strtol_l.constprop.0+0x9a>
 800d55e:	786c      	ldrb	r4, [r5, #1]
 800d560:	2310      	movs	r3, #16
 800d562:	3502      	adds	r5, #2
 800d564:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d568:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d56c:	2200      	movs	r2, #0
 800d56e:	fbbc f9f3 	udiv	r9, ip, r3
 800d572:	4610      	mov	r0, r2
 800d574:	fb03 ca19 	mls	sl, r3, r9, ip
 800d578:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d57c:	2f09      	cmp	r7, #9
 800d57e:	d81b      	bhi.n	800d5b8 <_strtol_l.constprop.0+0xa8>
 800d580:	463c      	mov	r4, r7
 800d582:	42a3      	cmp	r3, r4
 800d584:	dd27      	ble.n	800d5d6 <_strtol_l.constprop.0+0xc6>
 800d586:	1c57      	adds	r7, r2, #1
 800d588:	d007      	beq.n	800d59a <_strtol_l.constprop.0+0x8a>
 800d58a:	4581      	cmp	r9, r0
 800d58c:	d320      	bcc.n	800d5d0 <_strtol_l.constprop.0+0xc0>
 800d58e:	d101      	bne.n	800d594 <_strtol_l.constprop.0+0x84>
 800d590:	45a2      	cmp	sl, r4
 800d592:	db1d      	blt.n	800d5d0 <_strtol_l.constprop.0+0xc0>
 800d594:	fb00 4003 	mla	r0, r0, r3, r4
 800d598:	2201      	movs	r2, #1
 800d59a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d59e:	e7eb      	b.n	800d578 <_strtol_l.constprop.0+0x68>
 800d5a0:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5a2:	bf04      	itt	eq
 800d5a4:	782c      	ldrbeq	r4, [r5, #0]
 800d5a6:	1c95      	addeq	r5, r2, #2
 800d5a8:	e7cf      	b.n	800d54a <_strtol_l.constprop.0+0x3a>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1da      	bne.n	800d564 <_strtol_l.constprop.0+0x54>
 800d5ae:	2c30      	cmp	r4, #48	@ 0x30
 800d5b0:	bf0c      	ite	eq
 800d5b2:	2308      	moveq	r3, #8
 800d5b4:	230a      	movne	r3, #10
 800d5b6:	e7d5      	b.n	800d564 <_strtol_l.constprop.0+0x54>
 800d5b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d5bc:	2f19      	cmp	r7, #25
 800d5be:	d801      	bhi.n	800d5c4 <_strtol_l.constprop.0+0xb4>
 800d5c0:	3c37      	subs	r4, #55	@ 0x37
 800d5c2:	e7de      	b.n	800d582 <_strtol_l.constprop.0+0x72>
 800d5c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d5c8:	2f19      	cmp	r7, #25
 800d5ca:	d804      	bhi.n	800d5d6 <_strtol_l.constprop.0+0xc6>
 800d5cc:	3c57      	subs	r4, #87	@ 0x57
 800d5ce:	e7d8      	b.n	800d582 <_strtol_l.constprop.0+0x72>
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d4:	e7e1      	b.n	800d59a <_strtol_l.constprop.0+0x8a>
 800d5d6:	1c53      	adds	r3, r2, #1
 800d5d8:	d108      	bne.n	800d5ec <_strtol_l.constprop.0+0xdc>
 800d5da:	2322      	movs	r3, #34	@ 0x22
 800d5dc:	f8ce 3000 	str.w	r3, [lr]
 800d5e0:	4660      	mov	r0, ip
 800d5e2:	f1b8 0f00 	cmp.w	r8, #0
 800d5e6:	d0a0      	beq.n	800d52a <_strtol_l.constprop.0+0x1a>
 800d5e8:	1e69      	subs	r1, r5, #1
 800d5ea:	e006      	b.n	800d5fa <_strtol_l.constprop.0+0xea>
 800d5ec:	b106      	cbz	r6, 800d5f0 <_strtol_l.constprop.0+0xe0>
 800d5ee:	4240      	negs	r0, r0
 800d5f0:	f1b8 0f00 	cmp.w	r8, #0
 800d5f4:	d099      	beq.n	800d52a <_strtol_l.constprop.0+0x1a>
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	d1f6      	bne.n	800d5e8 <_strtol_l.constprop.0+0xd8>
 800d5fa:	f8c8 1000 	str.w	r1, [r8]
 800d5fe:	e794      	b.n	800d52a <_strtol_l.constprop.0+0x1a>
 800d600:	0800e459 	.word	0x0800e459

0800d604 <strtol>:
 800d604:	4613      	mov	r3, r2
 800d606:	460a      	mov	r2, r1
 800d608:	4601      	mov	r1, r0
 800d60a:	4802      	ldr	r0, [pc, #8]	@ (800d614 <strtol+0x10>)
 800d60c:	6800      	ldr	r0, [r0, #0]
 800d60e:	f7ff bf7f 	b.w	800d510 <_strtol_l.constprop.0>
 800d612:	bf00      	nop
 800d614:	20000060 	.word	0x20000060

0800d618 <siprintf>:
 800d618:	b40e      	push	{r1, r2, r3}
 800d61a:	b500      	push	{lr}
 800d61c:	b09c      	sub	sp, #112	@ 0x70
 800d61e:	ab1d      	add	r3, sp, #116	@ 0x74
 800d620:	9002      	str	r0, [sp, #8]
 800d622:	9006      	str	r0, [sp, #24]
 800d624:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d628:	4809      	ldr	r0, [pc, #36]	@ (800d650 <siprintf+0x38>)
 800d62a:	9107      	str	r1, [sp, #28]
 800d62c:	9104      	str	r1, [sp, #16]
 800d62e:	4909      	ldr	r1, [pc, #36]	@ (800d654 <siprintf+0x3c>)
 800d630:	f853 2b04 	ldr.w	r2, [r3], #4
 800d634:	9105      	str	r1, [sp, #20]
 800d636:	6800      	ldr	r0, [r0, #0]
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	a902      	add	r1, sp, #8
 800d63c:	f000 fa70 	bl	800db20 <_svfiprintf_r>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	2200      	movs	r2, #0
 800d644:	701a      	strb	r2, [r3, #0]
 800d646:	b01c      	add	sp, #112	@ 0x70
 800d648:	f85d eb04 	ldr.w	lr, [sp], #4
 800d64c:	b003      	add	sp, #12
 800d64e:	4770      	bx	lr
 800d650:	20000060 	.word	0x20000060
 800d654:	ffff0208 	.word	0xffff0208

0800d658 <_vsniprintf_r>:
 800d658:	b530      	push	{r4, r5, lr}
 800d65a:	4614      	mov	r4, r2
 800d65c:	2c00      	cmp	r4, #0
 800d65e:	b09b      	sub	sp, #108	@ 0x6c
 800d660:	4605      	mov	r5, r0
 800d662:	461a      	mov	r2, r3
 800d664:	da05      	bge.n	800d672 <_vsniprintf_r+0x1a>
 800d666:	238b      	movs	r3, #139	@ 0x8b
 800d668:	6003      	str	r3, [r0, #0]
 800d66a:	f04f 30ff 	mov.w	r0, #4294967295
 800d66e:	b01b      	add	sp, #108	@ 0x6c
 800d670:	bd30      	pop	{r4, r5, pc}
 800d672:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d676:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d67a:	bf14      	ite	ne
 800d67c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d680:	4623      	moveq	r3, r4
 800d682:	9302      	str	r3, [sp, #8]
 800d684:	9305      	str	r3, [sp, #20]
 800d686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d68a:	9100      	str	r1, [sp, #0]
 800d68c:	9104      	str	r1, [sp, #16]
 800d68e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d692:	4669      	mov	r1, sp
 800d694:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d696:	f000 fa43 	bl	800db20 <_svfiprintf_r>
 800d69a:	1c43      	adds	r3, r0, #1
 800d69c:	bfbc      	itt	lt
 800d69e:	238b      	movlt	r3, #139	@ 0x8b
 800d6a0:	602b      	strlt	r3, [r5, #0]
 800d6a2:	2c00      	cmp	r4, #0
 800d6a4:	d0e3      	beq.n	800d66e <_vsniprintf_r+0x16>
 800d6a6:	9b00      	ldr	r3, [sp, #0]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]
 800d6ac:	e7df      	b.n	800d66e <_vsniprintf_r+0x16>
	...

0800d6b0 <vsniprintf>:
 800d6b0:	b507      	push	{r0, r1, r2, lr}
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	460a      	mov	r2, r1
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	4803      	ldr	r0, [pc, #12]	@ (800d6c8 <vsniprintf+0x18>)
 800d6bc:	6800      	ldr	r0, [r0, #0]
 800d6be:	f7ff ffcb 	bl	800d658 <_vsniprintf_r>
 800d6c2:	b003      	add	sp, #12
 800d6c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6c8:	20000060 	.word	0x20000060

0800d6cc <memset>:
 800d6cc:	4402      	add	r2, r0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d100      	bne.n	800d6d6 <memset+0xa>
 800d6d4:	4770      	bx	lr
 800d6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6da:	e7f9      	b.n	800d6d0 <memset+0x4>

0800d6dc <strchr>:
 800d6dc:	b2c9      	uxtb	r1, r1
 800d6de:	4603      	mov	r3, r0
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e6:	b112      	cbz	r2, 800d6ee <strchr+0x12>
 800d6e8:	428a      	cmp	r2, r1
 800d6ea:	d1f9      	bne.n	800d6e0 <strchr+0x4>
 800d6ec:	4770      	bx	lr
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	bf18      	it	ne
 800d6f2:	2000      	movne	r0, #0
 800d6f4:	4770      	bx	lr

0800d6f6 <strncpy>:
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	3901      	subs	r1, #1
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	b132      	cbz	r2, 800d70c <strncpy+0x16>
 800d6fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d702:	f803 4b01 	strb.w	r4, [r3], #1
 800d706:	3a01      	subs	r2, #1
 800d708:	2c00      	cmp	r4, #0
 800d70a:	d1f7      	bne.n	800d6fc <strncpy+0x6>
 800d70c:	441a      	add	r2, r3
 800d70e:	2100      	movs	r1, #0
 800d710:	4293      	cmp	r3, r2
 800d712:	d100      	bne.n	800d716 <strncpy+0x20>
 800d714:	bd10      	pop	{r4, pc}
 800d716:	f803 1b01 	strb.w	r1, [r3], #1
 800d71a:	e7f9      	b.n	800d710 <strncpy+0x1a>

0800d71c <strstr>:
 800d71c:	780a      	ldrb	r2, [r1, #0]
 800d71e:	b570      	push	{r4, r5, r6, lr}
 800d720:	b96a      	cbnz	r2, 800d73e <strstr+0x22>
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	429a      	cmp	r2, r3
 800d726:	d109      	bne.n	800d73c <strstr+0x20>
 800d728:	460c      	mov	r4, r1
 800d72a:	4605      	mov	r5, r0
 800d72c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d730:	2b00      	cmp	r3, #0
 800d732:	d0f6      	beq.n	800d722 <strstr+0x6>
 800d734:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d738:	429e      	cmp	r6, r3
 800d73a:	d0f7      	beq.n	800d72c <strstr+0x10>
 800d73c:	3001      	adds	r0, #1
 800d73e:	7803      	ldrb	r3, [r0, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1ef      	bne.n	800d724 <strstr+0x8>
 800d744:	4618      	mov	r0, r3
 800d746:	e7ec      	b.n	800d722 <strstr+0x6>

0800d748 <_reclaim_reent>:
 800d748:	4b29      	ldr	r3, [pc, #164]	@ (800d7f0 <_reclaim_reent+0xa8>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4283      	cmp	r3, r0
 800d74e:	b570      	push	{r4, r5, r6, lr}
 800d750:	4604      	mov	r4, r0
 800d752:	d04b      	beq.n	800d7ec <_reclaim_reent+0xa4>
 800d754:	69c3      	ldr	r3, [r0, #28]
 800d756:	b1ab      	cbz	r3, 800d784 <_reclaim_reent+0x3c>
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	b16b      	cbz	r3, 800d778 <_reclaim_reent+0x30>
 800d75c:	2500      	movs	r5, #0
 800d75e:	69e3      	ldr	r3, [r4, #28]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	5959      	ldr	r1, [r3, r5]
 800d764:	2900      	cmp	r1, #0
 800d766:	d13b      	bne.n	800d7e0 <_reclaim_reent+0x98>
 800d768:	3504      	adds	r5, #4
 800d76a:	2d80      	cmp	r5, #128	@ 0x80
 800d76c:	d1f7      	bne.n	800d75e <_reclaim_reent+0x16>
 800d76e:	69e3      	ldr	r3, [r4, #28]
 800d770:	4620      	mov	r0, r4
 800d772:	68d9      	ldr	r1, [r3, #12]
 800d774:	f000 f880 	bl	800d878 <_free_r>
 800d778:	69e3      	ldr	r3, [r4, #28]
 800d77a:	6819      	ldr	r1, [r3, #0]
 800d77c:	b111      	cbz	r1, 800d784 <_reclaim_reent+0x3c>
 800d77e:	4620      	mov	r0, r4
 800d780:	f000 f87a 	bl	800d878 <_free_r>
 800d784:	6961      	ldr	r1, [r4, #20]
 800d786:	b111      	cbz	r1, 800d78e <_reclaim_reent+0x46>
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 f875 	bl	800d878 <_free_r>
 800d78e:	69e1      	ldr	r1, [r4, #28]
 800d790:	b111      	cbz	r1, 800d798 <_reclaim_reent+0x50>
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f870 	bl	800d878 <_free_r>
 800d798:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d79a:	b111      	cbz	r1, 800d7a2 <_reclaim_reent+0x5a>
 800d79c:	4620      	mov	r0, r4
 800d79e:	f000 f86b 	bl	800d878 <_free_r>
 800d7a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7a4:	b111      	cbz	r1, 800d7ac <_reclaim_reent+0x64>
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f000 f866 	bl	800d878 <_free_r>
 800d7ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d7ae:	b111      	cbz	r1, 800d7b6 <_reclaim_reent+0x6e>
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 f861 	bl	800d878 <_free_r>
 800d7b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d7b8:	b111      	cbz	r1, 800d7c0 <_reclaim_reent+0x78>
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f000 f85c 	bl	800d878 <_free_r>
 800d7c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d7c2:	b111      	cbz	r1, 800d7ca <_reclaim_reent+0x82>
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f000 f857 	bl	800d878 <_free_r>
 800d7ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d7cc:	b111      	cbz	r1, 800d7d4 <_reclaim_reent+0x8c>
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 f852 	bl	800d878 <_free_r>
 800d7d4:	6a23      	ldr	r3, [r4, #32]
 800d7d6:	b14b      	cbz	r3, 800d7ec <_reclaim_reent+0xa4>
 800d7d8:	4620      	mov	r0, r4
 800d7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7de:	4718      	bx	r3
 800d7e0:	680e      	ldr	r6, [r1, #0]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f848 	bl	800d878 <_free_r>
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	e7bb      	b.n	800d764 <_reclaim_reent+0x1c>
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20000060 	.word	0x20000060

0800d7f4 <__errno>:
 800d7f4:	4b01      	ldr	r3, [pc, #4]	@ (800d7fc <__errno+0x8>)
 800d7f6:	6818      	ldr	r0, [r3, #0]
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20000060 	.word	0x20000060

0800d800 <__libc_init_array>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4d0d      	ldr	r5, [pc, #52]	@ (800d838 <__libc_init_array+0x38>)
 800d804:	4c0d      	ldr	r4, [pc, #52]	@ (800d83c <__libc_init_array+0x3c>)
 800d806:	1b64      	subs	r4, r4, r5
 800d808:	10a4      	asrs	r4, r4, #2
 800d80a:	2600      	movs	r6, #0
 800d80c:	42a6      	cmp	r6, r4
 800d80e:	d109      	bne.n	800d824 <__libc_init_array+0x24>
 800d810:	4d0b      	ldr	r5, [pc, #44]	@ (800d840 <__libc_init_array+0x40>)
 800d812:	4c0c      	ldr	r4, [pc, #48]	@ (800d844 <__libc_init_array+0x44>)
 800d814:	f000 fc6e 	bl	800e0f4 <_init>
 800d818:	1b64      	subs	r4, r4, r5
 800d81a:	10a4      	asrs	r4, r4, #2
 800d81c:	2600      	movs	r6, #0
 800d81e:	42a6      	cmp	r6, r4
 800d820:	d105      	bne.n	800d82e <__libc_init_array+0x2e>
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	f855 3b04 	ldr.w	r3, [r5], #4
 800d828:	4798      	blx	r3
 800d82a:	3601      	adds	r6, #1
 800d82c:	e7ee      	b.n	800d80c <__libc_init_array+0xc>
 800d82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d832:	4798      	blx	r3
 800d834:	3601      	adds	r6, #1
 800d836:	e7f2      	b.n	800d81e <__libc_init_array+0x1e>
 800d838:	0800e594 	.word	0x0800e594
 800d83c:	0800e594 	.word	0x0800e594
 800d840:	0800e594 	.word	0x0800e594
 800d844:	0800e598 	.word	0x0800e598

0800d848 <__retarget_lock_acquire_recursive>:
 800d848:	4770      	bx	lr

0800d84a <__retarget_lock_release_recursive>:
 800d84a:	4770      	bx	lr

0800d84c <strcpy>:
 800d84c:	4603      	mov	r3, r0
 800d84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d852:	f803 2b01 	strb.w	r2, [r3], #1
 800d856:	2a00      	cmp	r2, #0
 800d858:	d1f9      	bne.n	800d84e <strcpy+0x2>
 800d85a:	4770      	bx	lr

0800d85c <memcpy>:
 800d85c:	440a      	add	r2, r1
 800d85e:	4291      	cmp	r1, r2
 800d860:	f100 33ff 	add.w	r3, r0, #4294967295
 800d864:	d100      	bne.n	800d868 <memcpy+0xc>
 800d866:	4770      	bx	lr
 800d868:	b510      	push	{r4, lr}
 800d86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d872:	4291      	cmp	r1, r2
 800d874:	d1f9      	bne.n	800d86a <memcpy+0xe>
 800d876:	bd10      	pop	{r4, pc}

0800d878 <_free_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	4605      	mov	r5, r0
 800d87c:	2900      	cmp	r1, #0
 800d87e:	d041      	beq.n	800d904 <_free_r+0x8c>
 800d880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d884:	1f0c      	subs	r4, r1, #4
 800d886:	2b00      	cmp	r3, #0
 800d888:	bfb8      	it	lt
 800d88a:	18e4      	addlt	r4, r4, r3
 800d88c:	f000 f8e0 	bl	800da50 <__malloc_lock>
 800d890:	4a1d      	ldr	r2, [pc, #116]	@ (800d908 <_free_r+0x90>)
 800d892:	6813      	ldr	r3, [r2, #0]
 800d894:	b933      	cbnz	r3, 800d8a4 <_free_r+0x2c>
 800d896:	6063      	str	r3, [r4, #4]
 800d898:	6014      	str	r4, [r2, #0]
 800d89a:	4628      	mov	r0, r5
 800d89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8a0:	f000 b8dc 	b.w	800da5c <__malloc_unlock>
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	d908      	bls.n	800d8ba <_free_r+0x42>
 800d8a8:	6820      	ldr	r0, [r4, #0]
 800d8aa:	1821      	adds	r1, r4, r0
 800d8ac:	428b      	cmp	r3, r1
 800d8ae:	bf01      	itttt	eq
 800d8b0:	6819      	ldreq	r1, [r3, #0]
 800d8b2:	685b      	ldreq	r3, [r3, #4]
 800d8b4:	1809      	addeq	r1, r1, r0
 800d8b6:	6021      	streq	r1, [r4, #0]
 800d8b8:	e7ed      	b.n	800d896 <_free_r+0x1e>
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b10b      	cbz	r3, 800d8c4 <_free_r+0x4c>
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	d9fa      	bls.n	800d8ba <_free_r+0x42>
 800d8c4:	6811      	ldr	r1, [r2, #0]
 800d8c6:	1850      	adds	r0, r2, r1
 800d8c8:	42a0      	cmp	r0, r4
 800d8ca:	d10b      	bne.n	800d8e4 <_free_r+0x6c>
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	4401      	add	r1, r0
 800d8d0:	1850      	adds	r0, r2, r1
 800d8d2:	4283      	cmp	r3, r0
 800d8d4:	6011      	str	r1, [r2, #0]
 800d8d6:	d1e0      	bne.n	800d89a <_free_r+0x22>
 800d8d8:	6818      	ldr	r0, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	6053      	str	r3, [r2, #4]
 800d8de:	4408      	add	r0, r1
 800d8e0:	6010      	str	r0, [r2, #0]
 800d8e2:	e7da      	b.n	800d89a <_free_r+0x22>
 800d8e4:	d902      	bls.n	800d8ec <_free_r+0x74>
 800d8e6:	230c      	movs	r3, #12
 800d8e8:	602b      	str	r3, [r5, #0]
 800d8ea:	e7d6      	b.n	800d89a <_free_r+0x22>
 800d8ec:	6820      	ldr	r0, [r4, #0]
 800d8ee:	1821      	adds	r1, r4, r0
 800d8f0:	428b      	cmp	r3, r1
 800d8f2:	bf04      	itt	eq
 800d8f4:	6819      	ldreq	r1, [r3, #0]
 800d8f6:	685b      	ldreq	r3, [r3, #4]
 800d8f8:	6063      	str	r3, [r4, #4]
 800d8fa:	bf04      	itt	eq
 800d8fc:	1809      	addeq	r1, r1, r0
 800d8fe:	6021      	streq	r1, [r4, #0]
 800d900:	6054      	str	r4, [r2, #4]
 800d902:	e7ca      	b.n	800d89a <_free_r+0x22>
 800d904:	bd38      	pop	{r3, r4, r5, pc}
 800d906:	bf00      	nop
 800d908:	200055c4 	.word	0x200055c4

0800d90c <sbrk_aligned>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	4e0f      	ldr	r6, [pc, #60]	@ (800d94c <sbrk_aligned+0x40>)
 800d910:	460c      	mov	r4, r1
 800d912:	6831      	ldr	r1, [r6, #0]
 800d914:	4605      	mov	r5, r0
 800d916:	b911      	cbnz	r1, 800d91e <sbrk_aligned+0x12>
 800d918:	f000 fba6 	bl	800e068 <_sbrk_r>
 800d91c:	6030      	str	r0, [r6, #0]
 800d91e:	4621      	mov	r1, r4
 800d920:	4628      	mov	r0, r5
 800d922:	f000 fba1 	bl	800e068 <_sbrk_r>
 800d926:	1c43      	adds	r3, r0, #1
 800d928:	d103      	bne.n	800d932 <sbrk_aligned+0x26>
 800d92a:	f04f 34ff 	mov.w	r4, #4294967295
 800d92e:	4620      	mov	r0, r4
 800d930:	bd70      	pop	{r4, r5, r6, pc}
 800d932:	1cc4      	adds	r4, r0, #3
 800d934:	f024 0403 	bic.w	r4, r4, #3
 800d938:	42a0      	cmp	r0, r4
 800d93a:	d0f8      	beq.n	800d92e <sbrk_aligned+0x22>
 800d93c:	1a21      	subs	r1, r4, r0
 800d93e:	4628      	mov	r0, r5
 800d940:	f000 fb92 	bl	800e068 <_sbrk_r>
 800d944:	3001      	adds	r0, #1
 800d946:	d1f2      	bne.n	800d92e <sbrk_aligned+0x22>
 800d948:	e7ef      	b.n	800d92a <sbrk_aligned+0x1e>
 800d94a:	bf00      	nop
 800d94c:	200055c0 	.word	0x200055c0

0800d950 <_malloc_r>:
 800d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d954:	1ccd      	adds	r5, r1, #3
 800d956:	f025 0503 	bic.w	r5, r5, #3
 800d95a:	3508      	adds	r5, #8
 800d95c:	2d0c      	cmp	r5, #12
 800d95e:	bf38      	it	cc
 800d960:	250c      	movcc	r5, #12
 800d962:	2d00      	cmp	r5, #0
 800d964:	4606      	mov	r6, r0
 800d966:	db01      	blt.n	800d96c <_malloc_r+0x1c>
 800d968:	42a9      	cmp	r1, r5
 800d96a:	d904      	bls.n	800d976 <_malloc_r+0x26>
 800d96c:	230c      	movs	r3, #12
 800d96e:	6033      	str	r3, [r6, #0]
 800d970:	2000      	movs	r0, #0
 800d972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da4c <_malloc_r+0xfc>
 800d97a:	f000 f869 	bl	800da50 <__malloc_lock>
 800d97e:	f8d8 3000 	ldr.w	r3, [r8]
 800d982:	461c      	mov	r4, r3
 800d984:	bb44      	cbnz	r4, 800d9d8 <_malloc_r+0x88>
 800d986:	4629      	mov	r1, r5
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff ffbf 	bl	800d90c <sbrk_aligned>
 800d98e:	1c43      	adds	r3, r0, #1
 800d990:	4604      	mov	r4, r0
 800d992:	d158      	bne.n	800da46 <_malloc_r+0xf6>
 800d994:	f8d8 4000 	ldr.w	r4, [r8]
 800d998:	4627      	mov	r7, r4
 800d99a:	2f00      	cmp	r7, #0
 800d99c:	d143      	bne.n	800da26 <_malloc_r+0xd6>
 800d99e:	2c00      	cmp	r4, #0
 800d9a0:	d04b      	beq.n	800da3a <_malloc_r+0xea>
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	eb04 0903 	add.w	r9, r4, r3
 800d9ac:	f000 fb5c 	bl	800e068 <_sbrk_r>
 800d9b0:	4581      	cmp	r9, r0
 800d9b2:	d142      	bne.n	800da3a <_malloc_r+0xea>
 800d9b4:	6821      	ldr	r1, [r4, #0]
 800d9b6:	1a6d      	subs	r5, r5, r1
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	f7ff ffa6 	bl	800d90c <sbrk_aligned>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d03a      	beq.n	800da3a <_malloc_r+0xea>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	442b      	add	r3, r5
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	bb62      	cbnz	r2, 800da2c <_malloc_r+0xdc>
 800d9d2:	f8c8 7000 	str.w	r7, [r8]
 800d9d6:	e00f      	b.n	800d9f8 <_malloc_r+0xa8>
 800d9d8:	6822      	ldr	r2, [r4, #0]
 800d9da:	1b52      	subs	r2, r2, r5
 800d9dc:	d420      	bmi.n	800da20 <_malloc_r+0xd0>
 800d9de:	2a0b      	cmp	r2, #11
 800d9e0:	d917      	bls.n	800da12 <_malloc_r+0xc2>
 800d9e2:	1961      	adds	r1, r4, r5
 800d9e4:	42a3      	cmp	r3, r4
 800d9e6:	6025      	str	r5, [r4, #0]
 800d9e8:	bf18      	it	ne
 800d9ea:	6059      	strne	r1, [r3, #4]
 800d9ec:	6863      	ldr	r3, [r4, #4]
 800d9ee:	bf08      	it	eq
 800d9f0:	f8c8 1000 	streq.w	r1, [r8]
 800d9f4:	5162      	str	r2, [r4, r5]
 800d9f6:	604b      	str	r3, [r1, #4]
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f000 f82f 	bl	800da5c <__malloc_unlock>
 800d9fe:	f104 000b 	add.w	r0, r4, #11
 800da02:	1d23      	adds	r3, r4, #4
 800da04:	f020 0007 	bic.w	r0, r0, #7
 800da08:	1ac2      	subs	r2, r0, r3
 800da0a:	bf1c      	itt	ne
 800da0c:	1a1b      	subne	r3, r3, r0
 800da0e:	50a3      	strne	r3, [r4, r2]
 800da10:	e7af      	b.n	800d972 <_malloc_r+0x22>
 800da12:	6862      	ldr	r2, [r4, #4]
 800da14:	42a3      	cmp	r3, r4
 800da16:	bf0c      	ite	eq
 800da18:	f8c8 2000 	streq.w	r2, [r8]
 800da1c:	605a      	strne	r2, [r3, #4]
 800da1e:	e7eb      	b.n	800d9f8 <_malloc_r+0xa8>
 800da20:	4623      	mov	r3, r4
 800da22:	6864      	ldr	r4, [r4, #4]
 800da24:	e7ae      	b.n	800d984 <_malloc_r+0x34>
 800da26:	463c      	mov	r4, r7
 800da28:	687f      	ldr	r7, [r7, #4]
 800da2a:	e7b6      	b.n	800d99a <_malloc_r+0x4a>
 800da2c:	461a      	mov	r2, r3
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	42a3      	cmp	r3, r4
 800da32:	d1fb      	bne.n	800da2c <_malloc_r+0xdc>
 800da34:	2300      	movs	r3, #0
 800da36:	6053      	str	r3, [r2, #4]
 800da38:	e7de      	b.n	800d9f8 <_malloc_r+0xa8>
 800da3a:	230c      	movs	r3, #12
 800da3c:	6033      	str	r3, [r6, #0]
 800da3e:	4630      	mov	r0, r6
 800da40:	f000 f80c 	bl	800da5c <__malloc_unlock>
 800da44:	e794      	b.n	800d970 <_malloc_r+0x20>
 800da46:	6005      	str	r5, [r0, #0]
 800da48:	e7d6      	b.n	800d9f8 <_malloc_r+0xa8>
 800da4a:	bf00      	nop
 800da4c:	200055c4 	.word	0x200055c4

0800da50 <__malloc_lock>:
 800da50:	4801      	ldr	r0, [pc, #4]	@ (800da58 <__malloc_lock+0x8>)
 800da52:	f7ff bef9 	b.w	800d848 <__retarget_lock_acquire_recursive>
 800da56:	bf00      	nop
 800da58:	200055bc 	.word	0x200055bc

0800da5c <__malloc_unlock>:
 800da5c:	4801      	ldr	r0, [pc, #4]	@ (800da64 <__malloc_unlock+0x8>)
 800da5e:	f7ff bef4 	b.w	800d84a <__retarget_lock_release_recursive>
 800da62:	bf00      	nop
 800da64:	200055bc 	.word	0x200055bc

0800da68 <__ssputs_r>:
 800da68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da6c:	688e      	ldr	r6, [r1, #8]
 800da6e:	461f      	mov	r7, r3
 800da70:	42be      	cmp	r6, r7
 800da72:	680b      	ldr	r3, [r1, #0]
 800da74:	4682      	mov	sl, r0
 800da76:	460c      	mov	r4, r1
 800da78:	4690      	mov	r8, r2
 800da7a:	d82d      	bhi.n	800dad8 <__ssputs_r+0x70>
 800da7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da84:	d026      	beq.n	800dad4 <__ssputs_r+0x6c>
 800da86:	6965      	ldr	r5, [r4, #20]
 800da88:	6909      	ldr	r1, [r1, #16]
 800da8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da8e:	eba3 0901 	sub.w	r9, r3, r1
 800da92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da96:	1c7b      	adds	r3, r7, #1
 800da98:	444b      	add	r3, r9
 800da9a:	106d      	asrs	r5, r5, #1
 800da9c:	429d      	cmp	r5, r3
 800da9e:	bf38      	it	cc
 800daa0:	461d      	movcc	r5, r3
 800daa2:	0553      	lsls	r3, r2, #21
 800daa4:	d527      	bpl.n	800daf6 <__ssputs_r+0x8e>
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7ff ff52 	bl	800d950 <_malloc_r>
 800daac:	4606      	mov	r6, r0
 800daae:	b360      	cbz	r0, 800db0a <__ssputs_r+0xa2>
 800dab0:	6921      	ldr	r1, [r4, #16]
 800dab2:	464a      	mov	r2, r9
 800dab4:	f7ff fed2 	bl	800d85c <memcpy>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	6126      	str	r6, [r4, #16]
 800dac6:	6165      	str	r5, [r4, #20]
 800dac8:	444e      	add	r6, r9
 800daca:	eba5 0509 	sub.w	r5, r5, r9
 800dace:	6026      	str	r6, [r4, #0]
 800dad0:	60a5      	str	r5, [r4, #8]
 800dad2:	463e      	mov	r6, r7
 800dad4:	42be      	cmp	r6, r7
 800dad6:	d900      	bls.n	800dada <__ssputs_r+0x72>
 800dad8:	463e      	mov	r6, r7
 800dada:	6820      	ldr	r0, [r4, #0]
 800dadc:	4632      	mov	r2, r6
 800dade:	4641      	mov	r1, r8
 800dae0:	f000 faa8 	bl	800e034 <memmove>
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	1b9b      	subs	r3, r3, r6
 800dae8:	60a3      	str	r3, [r4, #8]
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	4433      	add	r3, r6
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	2000      	movs	r0, #0
 800daf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf6:	462a      	mov	r2, r5
 800daf8:	f000 fac6 	bl	800e088 <_realloc_r>
 800dafc:	4606      	mov	r6, r0
 800dafe:	2800      	cmp	r0, #0
 800db00:	d1e0      	bne.n	800dac4 <__ssputs_r+0x5c>
 800db02:	6921      	ldr	r1, [r4, #16]
 800db04:	4650      	mov	r0, sl
 800db06:	f7ff feb7 	bl	800d878 <_free_r>
 800db0a:	230c      	movs	r3, #12
 800db0c:	f8ca 3000 	str.w	r3, [sl]
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db16:	81a3      	strh	r3, [r4, #12]
 800db18:	f04f 30ff 	mov.w	r0, #4294967295
 800db1c:	e7e9      	b.n	800daf2 <__ssputs_r+0x8a>
	...

0800db20 <_svfiprintf_r>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	4698      	mov	r8, r3
 800db26:	898b      	ldrh	r3, [r1, #12]
 800db28:	061b      	lsls	r3, r3, #24
 800db2a:	b09d      	sub	sp, #116	@ 0x74
 800db2c:	4607      	mov	r7, r0
 800db2e:	460d      	mov	r5, r1
 800db30:	4614      	mov	r4, r2
 800db32:	d510      	bpl.n	800db56 <_svfiprintf_r+0x36>
 800db34:	690b      	ldr	r3, [r1, #16]
 800db36:	b973      	cbnz	r3, 800db56 <_svfiprintf_r+0x36>
 800db38:	2140      	movs	r1, #64	@ 0x40
 800db3a:	f7ff ff09 	bl	800d950 <_malloc_r>
 800db3e:	6028      	str	r0, [r5, #0]
 800db40:	6128      	str	r0, [r5, #16]
 800db42:	b930      	cbnz	r0, 800db52 <_svfiprintf_r+0x32>
 800db44:	230c      	movs	r3, #12
 800db46:	603b      	str	r3, [r7, #0]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	b01d      	add	sp, #116	@ 0x74
 800db4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db52:	2340      	movs	r3, #64	@ 0x40
 800db54:	616b      	str	r3, [r5, #20]
 800db56:	2300      	movs	r3, #0
 800db58:	9309      	str	r3, [sp, #36]	@ 0x24
 800db5a:	2320      	movs	r3, #32
 800db5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db60:	f8cd 800c 	str.w	r8, [sp, #12]
 800db64:	2330      	movs	r3, #48	@ 0x30
 800db66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd04 <_svfiprintf_r+0x1e4>
 800db6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db6e:	f04f 0901 	mov.w	r9, #1
 800db72:	4623      	mov	r3, r4
 800db74:	469a      	mov	sl, r3
 800db76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db7a:	b10a      	cbz	r2, 800db80 <_svfiprintf_r+0x60>
 800db7c:	2a25      	cmp	r2, #37	@ 0x25
 800db7e:	d1f9      	bne.n	800db74 <_svfiprintf_r+0x54>
 800db80:	ebba 0b04 	subs.w	fp, sl, r4
 800db84:	d00b      	beq.n	800db9e <_svfiprintf_r+0x7e>
 800db86:	465b      	mov	r3, fp
 800db88:	4622      	mov	r2, r4
 800db8a:	4629      	mov	r1, r5
 800db8c:	4638      	mov	r0, r7
 800db8e:	f7ff ff6b 	bl	800da68 <__ssputs_r>
 800db92:	3001      	adds	r0, #1
 800db94:	f000 80a7 	beq.w	800dce6 <_svfiprintf_r+0x1c6>
 800db98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db9a:	445a      	add	r2, fp
 800db9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db9e:	f89a 3000 	ldrb.w	r3, [sl]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 809f 	beq.w	800dce6 <_svfiprintf_r+0x1c6>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800dbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbb2:	f10a 0a01 	add.w	sl, sl, #1
 800dbb6:	9304      	str	r3, [sp, #16]
 800dbb8:	9307      	str	r3, [sp, #28]
 800dbba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbc0:	4654      	mov	r4, sl
 800dbc2:	2205      	movs	r2, #5
 800dbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc8:	484e      	ldr	r0, [pc, #312]	@ (800dd04 <_svfiprintf_r+0x1e4>)
 800dbca:	f7f2 fb09 	bl	80001e0 <memchr>
 800dbce:	9a04      	ldr	r2, [sp, #16]
 800dbd0:	b9d8      	cbnz	r0, 800dc0a <_svfiprintf_r+0xea>
 800dbd2:	06d0      	lsls	r0, r2, #27
 800dbd4:	bf44      	itt	mi
 800dbd6:	2320      	movmi	r3, #32
 800dbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbdc:	0711      	lsls	r1, r2, #28
 800dbde:	bf44      	itt	mi
 800dbe0:	232b      	movmi	r3, #43	@ 0x2b
 800dbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbea:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbec:	d015      	beq.n	800dc1a <_svfiprintf_r+0xfa>
 800dbee:	9a07      	ldr	r2, [sp, #28]
 800dbf0:	4654      	mov	r4, sl
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	f04f 0c0a 	mov.w	ip, #10
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbfe:	3b30      	subs	r3, #48	@ 0x30
 800dc00:	2b09      	cmp	r3, #9
 800dc02:	d94b      	bls.n	800dc9c <_svfiprintf_r+0x17c>
 800dc04:	b1b0      	cbz	r0, 800dc34 <_svfiprintf_r+0x114>
 800dc06:	9207      	str	r2, [sp, #28]
 800dc08:	e014      	b.n	800dc34 <_svfiprintf_r+0x114>
 800dc0a:	eba0 0308 	sub.w	r3, r0, r8
 800dc0e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc12:	4313      	orrs	r3, r2
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	46a2      	mov	sl, r4
 800dc18:	e7d2      	b.n	800dbc0 <_svfiprintf_r+0xa0>
 800dc1a:	9b03      	ldr	r3, [sp, #12]
 800dc1c:	1d19      	adds	r1, r3, #4
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	9103      	str	r1, [sp, #12]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	bfbb      	ittet	lt
 800dc26:	425b      	neglt	r3, r3
 800dc28:	f042 0202 	orrlt.w	r2, r2, #2
 800dc2c:	9307      	strge	r3, [sp, #28]
 800dc2e:	9307      	strlt	r3, [sp, #28]
 800dc30:	bfb8      	it	lt
 800dc32:	9204      	strlt	r2, [sp, #16]
 800dc34:	7823      	ldrb	r3, [r4, #0]
 800dc36:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc38:	d10a      	bne.n	800dc50 <_svfiprintf_r+0x130>
 800dc3a:	7863      	ldrb	r3, [r4, #1]
 800dc3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc3e:	d132      	bne.n	800dca6 <_svfiprintf_r+0x186>
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	1d1a      	adds	r2, r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	9203      	str	r2, [sp, #12]
 800dc48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc4c:	3402      	adds	r4, #2
 800dc4e:	9305      	str	r3, [sp, #20]
 800dc50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd14 <_svfiprintf_r+0x1f4>
 800dc54:	7821      	ldrb	r1, [r4, #0]
 800dc56:	2203      	movs	r2, #3
 800dc58:	4650      	mov	r0, sl
 800dc5a:	f7f2 fac1 	bl	80001e0 <memchr>
 800dc5e:	b138      	cbz	r0, 800dc70 <_svfiprintf_r+0x150>
 800dc60:	9b04      	ldr	r3, [sp, #16]
 800dc62:	eba0 000a 	sub.w	r0, r0, sl
 800dc66:	2240      	movs	r2, #64	@ 0x40
 800dc68:	4082      	lsls	r2, r0
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	3401      	adds	r4, #1
 800dc6e:	9304      	str	r3, [sp, #16]
 800dc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc74:	4824      	ldr	r0, [pc, #144]	@ (800dd08 <_svfiprintf_r+0x1e8>)
 800dc76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc7a:	2206      	movs	r2, #6
 800dc7c:	f7f2 fab0 	bl	80001e0 <memchr>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d036      	beq.n	800dcf2 <_svfiprintf_r+0x1d2>
 800dc84:	4b21      	ldr	r3, [pc, #132]	@ (800dd0c <_svfiprintf_r+0x1ec>)
 800dc86:	bb1b      	cbnz	r3, 800dcd0 <_svfiprintf_r+0x1b0>
 800dc88:	9b03      	ldr	r3, [sp, #12]
 800dc8a:	3307      	adds	r3, #7
 800dc8c:	f023 0307 	bic.w	r3, r3, #7
 800dc90:	3308      	adds	r3, #8
 800dc92:	9303      	str	r3, [sp, #12]
 800dc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc96:	4433      	add	r3, r6
 800dc98:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc9a:	e76a      	b.n	800db72 <_svfiprintf_r+0x52>
 800dc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dca0:	460c      	mov	r4, r1
 800dca2:	2001      	movs	r0, #1
 800dca4:	e7a8      	b.n	800dbf8 <_svfiprintf_r+0xd8>
 800dca6:	2300      	movs	r3, #0
 800dca8:	3401      	adds	r4, #1
 800dcaa:	9305      	str	r3, [sp, #20]
 800dcac:	4619      	mov	r1, r3
 800dcae:	f04f 0c0a 	mov.w	ip, #10
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb8:	3a30      	subs	r2, #48	@ 0x30
 800dcba:	2a09      	cmp	r2, #9
 800dcbc:	d903      	bls.n	800dcc6 <_svfiprintf_r+0x1a6>
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0c6      	beq.n	800dc50 <_svfiprintf_r+0x130>
 800dcc2:	9105      	str	r1, [sp, #20]
 800dcc4:	e7c4      	b.n	800dc50 <_svfiprintf_r+0x130>
 800dcc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcca:	4604      	mov	r4, r0
 800dccc:	2301      	movs	r3, #1
 800dcce:	e7f0      	b.n	800dcb2 <_svfiprintf_r+0x192>
 800dcd0:	ab03      	add	r3, sp, #12
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	462a      	mov	r2, r5
 800dcd6:	4b0e      	ldr	r3, [pc, #56]	@ (800dd10 <_svfiprintf_r+0x1f0>)
 800dcd8:	a904      	add	r1, sp, #16
 800dcda:	4638      	mov	r0, r7
 800dcdc:	f3af 8000 	nop.w
 800dce0:	1c42      	adds	r2, r0, #1
 800dce2:	4606      	mov	r6, r0
 800dce4:	d1d6      	bne.n	800dc94 <_svfiprintf_r+0x174>
 800dce6:	89ab      	ldrh	r3, [r5, #12]
 800dce8:	065b      	lsls	r3, r3, #25
 800dcea:	f53f af2d 	bmi.w	800db48 <_svfiprintf_r+0x28>
 800dcee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcf0:	e72c      	b.n	800db4c <_svfiprintf_r+0x2c>
 800dcf2:	ab03      	add	r3, sp, #12
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	462a      	mov	r2, r5
 800dcf8:	4b05      	ldr	r3, [pc, #20]	@ (800dd10 <_svfiprintf_r+0x1f0>)
 800dcfa:	a904      	add	r1, sp, #16
 800dcfc:	4638      	mov	r0, r7
 800dcfe:	f000 f879 	bl	800ddf4 <_printf_i>
 800dd02:	e7ed      	b.n	800dce0 <_svfiprintf_r+0x1c0>
 800dd04:	0800e559 	.word	0x0800e559
 800dd08:	0800e563 	.word	0x0800e563
 800dd0c:	00000000 	.word	0x00000000
 800dd10:	0800da69 	.word	0x0800da69
 800dd14:	0800e55f 	.word	0x0800e55f

0800dd18 <_printf_common>:
 800dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd1c:	4616      	mov	r6, r2
 800dd1e:	4698      	mov	r8, r3
 800dd20:	688a      	ldr	r2, [r1, #8]
 800dd22:	690b      	ldr	r3, [r1, #16]
 800dd24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	bfb8      	it	lt
 800dd2c:	4613      	movlt	r3, r2
 800dd2e:	6033      	str	r3, [r6, #0]
 800dd30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd34:	4607      	mov	r7, r0
 800dd36:	460c      	mov	r4, r1
 800dd38:	b10a      	cbz	r2, 800dd3e <_printf_common+0x26>
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	6033      	str	r3, [r6, #0]
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	0699      	lsls	r1, r3, #26
 800dd42:	bf42      	ittt	mi
 800dd44:	6833      	ldrmi	r3, [r6, #0]
 800dd46:	3302      	addmi	r3, #2
 800dd48:	6033      	strmi	r3, [r6, #0]
 800dd4a:	6825      	ldr	r5, [r4, #0]
 800dd4c:	f015 0506 	ands.w	r5, r5, #6
 800dd50:	d106      	bne.n	800dd60 <_printf_common+0x48>
 800dd52:	f104 0a19 	add.w	sl, r4, #25
 800dd56:	68e3      	ldr	r3, [r4, #12]
 800dd58:	6832      	ldr	r2, [r6, #0]
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dc26      	bgt.n	800ddae <_printf_common+0x96>
 800dd60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd64:	6822      	ldr	r2, [r4, #0]
 800dd66:	3b00      	subs	r3, #0
 800dd68:	bf18      	it	ne
 800dd6a:	2301      	movne	r3, #1
 800dd6c:	0692      	lsls	r2, r2, #26
 800dd6e:	d42b      	bmi.n	800ddc8 <_printf_common+0xb0>
 800dd70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd74:	4641      	mov	r1, r8
 800dd76:	4638      	mov	r0, r7
 800dd78:	47c8      	blx	r9
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d01e      	beq.n	800ddbc <_printf_common+0xa4>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	6922      	ldr	r2, [r4, #16]
 800dd82:	f003 0306 	and.w	r3, r3, #6
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	bf02      	ittt	eq
 800dd8a:	68e5      	ldreq	r5, [r4, #12]
 800dd8c:	6833      	ldreq	r3, [r6, #0]
 800dd8e:	1aed      	subeq	r5, r5, r3
 800dd90:	68a3      	ldr	r3, [r4, #8]
 800dd92:	bf0c      	ite	eq
 800dd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd98:	2500      	movne	r5, #0
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	bfc4      	itt	gt
 800dd9e:	1a9b      	subgt	r3, r3, r2
 800dda0:	18ed      	addgt	r5, r5, r3
 800dda2:	2600      	movs	r6, #0
 800dda4:	341a      	adds	r4, #26
 800dda6:	42b5      	cmp	r5, r6
 800dda8:	d11a      	bne.n	800dde0 <_printf_common+0xc8>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e008      	b.n	800ddc0 <_printf_common+0xa8>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	47c8      	blx	r9
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d103      	bne.n	800ddc4 <_printf_common+0xac>
 800ddbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	e7c6      	b.n	800dd56 <_printf_common+0x3e>
 800ddc8:	18e1      	adds	r1, r4, r3
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	2030      	movs	r0, #48	@ 0x30
 800ddce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ddd2:	4422      	add	r2, r4
 800ddd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ddd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dddc:	3302      	adds	r3, #2
 800ddde:	e7c7      	b.n	800dd70 <_printf_common+0x58>
 800dde0:	2301      	movs	r3, #1
 800dde2:	4622      	mov	r2, r4
 800dde4:	4641      	mov	r1, r8
 800dde6:	4638      	mov	r0, r7
 800dde8:	47c8      	blx	r9
 800ddea:	3001      	adds	r0, #1
 800ddec:	d0e6      	beq.n	800ddbc <_printf_common+0xa4>
 800ddee:	3601      	adds	r6, #1
 800ddf0:	e7d9      	b.n	800dda6 <_printf_common+0x8e>
	...

0800ddf4 <_printf_i>:
 800ddf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	7e0f      	ldrb	r7, [r1, #24]
 800ddfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ddfc:	2f78      	cmp	r7, #120	@ 0x78
 800ddfe:	4691      	mov	r9, r2
 800de00:	4680      	mov	r8, r0
 800de02:	460c      	mov	r4, r1
 800de04:	469a      	mov	sl, r3
 800de06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de0a:	d807      	bhi.n	800de1c <_printf_i+0x28>
 800de0c:	2f62      	cmp	r7, #98	@ 0x62
 800de0e:	d80a      	bhi.n	800de26 <_printf_i+0x32>
 800de10:	2f00      	cmp	r7, #0
 800de12:	f000 80d2 	beq.w	800dfba <_printf_i+0x1c6>
 800de16:	2f58      	cmp	r7, #88	@ 0x58
 800de18:	f000 80b9 	beq.w	800df8e <_printf_i+0x19a>
 800de1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de24:	e03a      	b.n	800de9c <_printf_i+0xa8>
 800de26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de2a:	2b15      	cmp	r3, #21
 800de2c:	d8f6      	bhi.n	800de1c <_printf_i+0x28>
 800de2e:	a101      	add	r1, pc, #4	@ (adr r1, 800de34 <_printf_i+0x40>)
 800de30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de34:	0800de8d 	.word	0x0800de8d
 800de38:	0800dea1 	.word	0x0800dea1
 800de3c:	0800de1d 	.word	0x0800de1d
 800de40:	0800de1d 	.word	0x0800de1d
 800de44:	0800de1d 	.word	0x0800de1d
 800de48:	0800de1d 	.word	0x0800de1d
 800de4c:	0800dea1 	.word	0x0800dea1
 800de50:	0800de1d 	.word	0x0800de1d
 800de54:	0800de1d 	.word	0x0800de1d
 800de58:	0800de1d 	.word	0x0800de1d
 800de5c:	0800de1d 	.word	0x0800de1d
 800de60:	0800dfa1 	.word	0x0800dfa1
 800de64:	0800decb 	.word	0x0800decb
 800de68:	0800df5b 	.word	0x0800df5b
 800de6c:	0800de1d 	.word	0x0800de1d
 800de70:	0800de1d 	.word	0x0800de1d
 800de74:	0800dfc3 	.word	0x0800dfc3
 800de78:	0800de1d 	.word	0x0800de1d
 800de7c:	0800decb 	.word	0x0800decb
 800de80:	0800de1d 	.word	0x0800de1d
 800de84:	0800de1d 	.word	0x0800de1d
 800de88:	0800df63 	.word	0x0800df63
 800de8c:	6833      	ldr	r3, [r6, #0]
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6032      	str	r2, [r6, #0]
 800de94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de9c:	2301      	movs	r3, #1
 800de9e:	e09d      	b.n	800dfdc <_printf_i+0x1e8>
 800dea0:	6833      	ldr	r3, [r6, #0]
 800dea2:	6820      	ldr	r0, [r4, #0]
 800dea4:	1d19      	adds	r1, r3, #4
 800dea6:	6031      	str	r1, [r6, #0]
 800dea8:	0606      	lsls	r6, r0, #24
 800deaa:	d501      	bpl.n	800deb0 <_printf_i+0xbc>
 800deac:	681d      	ldr	r5, [r3, #0]
 800deae:	e003      	b.n	800deb8 <_printf_i+0xc4>
 800deb0:	0645      	lsls	r5, r0, #25
 800deb2:	d5fb      	bpl.n	800deac <_printf_i+0xb8>
 800deb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800deb8:	2d00      	cmp	r5, #0
 800deba:	da03      	bge.n	800dec4 <_printf_i+0xd0>
 800debc:	232d      	movs	r3, #45	@ 0x2d
 800debe:	426d      	negs	r5, r5
 800dec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dec4:	4859      	ldr	r0, [pc, #356]	@ (800e02c <_printf_i+0x238>)
 800dec6:	230a      	movs	r3, #10
 800dec8:	e011      	b.n	800deee <_printf_i+0xfa>
 800deca:	6821      	ldr	r1, [r4, #0]
 800decc:	6833      	ldr	r3, [r6, #0]
 800dece:	0608      	lsls	r0, r1, #24
 800ded0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ded4:	d402      	bmi.n	800dedc <_printf_i+0xe8>
 800ded6:	0649      	lsls	r1, r1, #25
 800ded8:	bf48      	it	mi
 800deda:	b2ad      	uxthmi	r5, r5
 800dedc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dede:	4853      	ldr	r0, [pc, #332]	@ (800e02c <_printf_i+0x238>)
 800dee0:	6033      	str	r3, [r6, #0]
 800dee2:	bf14      	ite	ne
 800dee4:	230a      	movne	r3, #10
 800dee6:	2308      	moveq	r3, #8
 800dee8:	2100      	movs	r1, #0
 800deea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800deee:	6866      	ldr	r6, [r4, #4]
 800def0:	60a6      	str	r6, [r4, #8]
 800def2:	2e00      	cmp	r6, #0
 800def4:	bfa2      	ittt	ge
 800def6:	6821      	ldrge	r1, [r4, #0]
 800def8:	f021 0104 	bicge.w	r1, r1, #4
 800defc:	6021      	strge	r1, [r4, #0]
 800defe:	b90d      	cbnz	r5, 800df04 <_printf_i+0x110>
 800df00:	2e00      	cmp	r6, #0
 800df02:	d04b      	beq.n	800df9c <_printf_i+0x1a8>
 800df04:	4616      	mov	r6, r2
 800df06:	fbb5 f1f3 	udiv	r1, r5, r3
 800df0a:	fb03 5711 	mls	r7, r3, r1, r5
 800df0e:	5dc7      	ldrb	r7, [r0, r7]
 800df10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df14:	462f      	mov	r7, r5
 800df16:	42bb      	cmp	r3, r7
 800df18:	460d      	mov	r5, r1
 800df1a:	d9f4      	bls.n	800df06 <_printf_i+0x112>
 800df1c:	2b08      	cmp	r3, #8
 800df1e:	d10b      	bne.n	800df38 <_printf_i+0x144>
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	07df      	lsls	r7, r3, #31
 800df24:	d508      	bpl.n	800df38 <_printf_i+0x144>
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	6861      	ldr	r1, [r4, #4]
 800df2a:	4299      	cmp	r1, r3
 800df2c:	bfde      	ittt	le
 800df2e:	2330      	movle	r3, #48	@ 0x30
 800df30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df38:	1b92      	subs	r2, r2, r6
 800df3a:	6122      	str	r2, [r4, #16]
 800df3c:	f8cd a000 	str.w	sl, [sp]
 800df40:	464b      	mov	r3, r9
 800df42:	aa03      	add	r2, sp, #12
 800df44:	4621      	mov	r1, r4
 800df46:	4640      	mov	r0, r8
 800df48:	f7ff fee6 	bl	800dd18 <_printf_common>
 800df4c:	3001      	adds	r0, #1
 800df4e:	d14a      	bne.n	800dfe6 <_printf_i+0x1f2>
 800df50:	f04f 30ff 	mov.w	r0, #4294967295
 800df54:	b004      	add	sp, #16
 800df56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	f043 0320 	orr.w	r3, r3, #32
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	4833      	ldr	r0, [pc, #204]	@ (800e030 <_printf_i+0x23c>)
 800df64:	2778      	movs	r7, #120	@ 0x78
 800df66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	6831      	ldr	r1, [r6, #0]
 800df6e:	061f      	lsls	r7, r3, #24
 800df70:	f851 5b04 	ldr.w	r5, [r1], #4
 800df74:	d402      	bmi.n	800df7c <_printf_i+0x188>
 800df76:	065f      	lsls	r7, r3, #25
 800df78:	bf48      	it	mi
 800df7a:	b2ad      	uxthmi	r5, r5
 800df7c:	6031      	str	r1, [r6, #0]
 800df7e:	07d9      	lsls	r1, r3, #31
 800df80:	bf44      	itt	mi
 800df82:	f043 0320 	orrmi.w	r3, r3, #32
 800df86:	6023      	strmi	r3, [r4, #0]
 800df88:	b11d      	cbz	r5, 800df92 <_printf_i+0x19e>
 800df8a:	2310      	movs	r3, #16
 800df8c:	e7ac      	b.n	800dee8 <_printf_i+0xf4>
 800df8e:	4827      	ldr	r0, [pc, #156]	@ (800e02c <_printf_i+0x238>)
 800df90:	e7e9      	b.n	800df66 <_printf_i+0x172>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	f023 0320 	bic.w	r3, r3, #32
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	e7f6      	b.n	800df8a <_printf_i+0x196>
 800df9c:	4616      	mov	r6, r2
 800df9e:	e7bd      	b.n	800df1c <_printf_i+0x128>
 800dfa0:	6833      	ldr	r3, [r6, #0]
 800dfa2:	6825      	ldr	r5, [r4, #0]
 800dfa4:	6961      	ldr	r1, [r4, #20]
 800dfa6:	1d18      	adds	r0, r3, #4
 800dfa8:	6030      	str	r0, [r6, #0]
 800dfaa:	062e      	lsls	r6, r5, #24
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	d501      	bpl.n	800dfb4 <_printf_i+0x1c0>
 800dfb0:	6019      	str	r1, [r3, #0]
 800dfb2:	e002      	b.n	800dfba <_printf_i+0x1c6>
 800dfb4:	0668      	lsls	r0, r5, #25
 800dfb6:	d5fb      	bpl.n	800dfb0 <_printf_i+0x1bc>
 800dfb8:	8019      	strh	r1, [r3, #0]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	4616      	mov	r6, r2
 800dfc0:	e7bc      	b.n	800df3c <_printf_i+0x148>
 800dfc2:	6833      	ldr	r3, [r6, #0]
 800dfc4:	1d1a      	adds	r2, r3, #4
 800dfc6:	6032      	str	r2, [r6, #0]
 800dfc8:	681e      	ldr	r6, [r3, #0]
 800dfca:	6862      	ldr	r2, [r4, #4]
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7f2 f906 	bl	80001e0 <memchr>
 800dfd4:	b108      	cbz	r0, 800dfda <_printf_i+0x1e6>
 800dfd6:	1b80      	subs	r0, r0, r6
 800dfd8:	6060      	str	r0, [r4, #4]
 800dfda:	6863      	ldr	r3, [r4, #4]
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfe4:	e7aa      	b.n	800df3c <_printf_i+0x148>
 800dfe6:	6923      	ldr	r3, [r4, #16]
 800dfe8:	4632      	mov	r2, r6
 800dfea:	4649      	mov	r1, r9
 800dfec:	4640      	mov	r0, r8
 800dfee:	47d0      	blx	sl
 800dff0:	3001      	adds	r0, #1
 800dff2:	d0ad      	beq.n	800df50 <_printf_i+0x15c>
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	079b      	lsls	r3, r3, #30
 800dff8:	d413      	bmi.n	800e022 <_printf_i+0x22e>
 800dffa:	68e0      	ldr	r0, [r4, #12]
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	4298      	cmp	r0, r3
 800e000:	bfb8      	it	lt
 800e002:	4618      	movlt	r0, r3
 800e004:	e7a6      	b.n	800df54 <_printf_i+0x160>
 800e006:	2301      	movs	r3, #1
 800e008:	4632      	mov	r2, r6
 800e00a:	4649      	mov	r1, r9
 800e00c:	4640      	mov	r0, r8
 800e00e:	47d0      	blx	sl
 800e010:	3001      	adds	r0, #1
 800e012:	d09d      	beq.n	800df50 <_printf_i+0x15c>
 800e014:	3501      	adds	r5, #1
 800e016:	68e3      	ldr	r3, [r4, #12]
 800e018:	9903      	ldr	r1, [sp, #12]
 800e01a:	1a5b      	subs	r3, r3, r1
 800e01c:	42ab      	cmp	r3, r5
 800e01e:	dcf2      	bgt.n	800e006 <_printf_i+0x212>
 800e020:	e7eb      	b.n	800dffa <_printf_i+0x206>
 800e022:	2500      	movs	r5, #0
 800e024:	f104 0619 	add.w	r6, r4, #25
 800e028:	e7f5      	b.n	800e016 <_printf_i+0x222>
 800e02a:	bf00      	nop
 800e02c:	0800e56a 	.word	0x0800e56a
 800e030:	0800e57b 	.word	0x0800e57b

0800e034 <memmove>:
 800e034:	4288      	cmp	r0, r1
 800e036:	b510      	push	{r4, lr}
 800e038:	eb01 0402 	add.w	r4, r1, r2
 800e03c:	d902      	bls.n	800e044 <memmove+0x10>
 800e03e:	4284      	cmp	r4, r0
 800e040:	4623      	mov	r3, r4
 800e042:	d807      	bhi.n	800e054 <memmove+0x20>
 800e044:	1e43      	subs	r3, r0, #1
 800e046:	42a1      	cmp	r1, r4
 800e048:	d008      	beq.n	800e05c <memmove+0x28>
 800e04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e052:	e7f8      	b.n	800e046 <memmove+0x12>
 800e054:	4402      	add	r2, r0
 800e056:	4601      	mov	r1, r0
 800e058:	428a      	cmp	r2, r1
 800e05a:	d100      	bne.n	800e05e <memmove+0x2a>
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e066:	e7f7      	b.n	800e058 <memmove+0x24>

0800e068 <_sbrk_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d06      	ldr	r5, [pc, #24]	@ (800e084 <_sbrk_r+0x1c>)
 800e06c:	2300      	movs	r3, #0
 800e06e:	4604      	mov	r4, r0
 800e070:	4608      	mov	r0, r1
 800e072:	602b      	str	r3, [r5, #0]
 800e074:	f7f3 faf2 	bl	800165c <_sbrk>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d102      	bne.n	800e082 <_sbrk_r+0x1a>
 800e07c:	682b      	ldr	r3, [r5, #0]
 800e07e:	b103      	cbz	r3, 800e082 <_sbrk_r+0x1a>
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	200055b8 	.word	0x200055b8

0800e088 <_realloc_r>:
 800e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08c:	4680      	mov	r8, r0
 800e08e:	4615      	mov	r5, r2
 800e090:	460c      	mov	r4, r1
 800e092:	b921      	cbnz	r1, 800e09e <_realloc_r+0x16>
 800e094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e098:	4611      	mov	r1, r2
 800e09a:	f7ff bc59 	b.w	800d950 <_malloc_r>
 800e09e:	b92a      	cbnz	r2, 800e0ac <_realloc_r+0x24>
 800e0a0:	f7ff fbea 	bl	800d878 <_free_r>
 800e0a4:	2400      	movs	r4, #0
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ac:	f000 f81a 	bl	800e0e4 <_malloc_usable_size_r>
 800e0b0:	4285      	cmp	r5, r0
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	d802      	bhi.n	800e0bc <_realloc_r+0x34>
 800e0b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0ba:	d8f4      	bhi.n	800e0a6 <_realloc_r+0x1e>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4640      	mov	r0, r8
 800e0c0:	f7ff fc46 	bl	800d950 <_malloc_r>
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d0ec      	beq.n	800e0a4 <_realloc_r+0x1c>
 800e0ca:	42b5      	cmp	r5, r6
 800e0cc:	462a      	mov	r2, r5
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	bf28      	it	cs
 800e0d2:	4632      	movcs	r2, r6
 800e0d4:	f7ff fbc2 	bl	800d85c <memcpy>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4640      	mov	r0, r8
 800e0dc:	f7ff fbcc 	bl	800d878 <_free_r>
 800e0e0:	463c      	mov	r4, r7
 800e0e2:	e7e0      	b.n	800e0a6 <_realloc_r+0x1e>

0800e0e4 <_malloc_usable_size_r>:
 800e0e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e8:	1f18      	subs	r0, r3, #4
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	bfbc      	itt	lt
 800e0ee:	580b      	ldrlt	r3, [r1, r0]
 800e0f0:	18c0      	addlt	r0, r0, r3
 800e0f2:	4770      	bx	lr

0800e0f4 <_init>:
 800e0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f6:	bf00      	nop
 800e0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fa:	bc08      	pop	{r3}
 800e0fc:	469e      	mov	lr, r3
 800e0fe:	4770      	bx	lr

0800e100 <_fini>:
 800e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e102:	bf00      	nop
 800e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e106:	bc08      	pop	{r3}
 800e108:	469e      	mov	lr, r3
 800e10a:	4770      	bx	lr
